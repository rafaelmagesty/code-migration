commit_hash,codigo_llm,codigo_desenvolvedor,levenshtein_distance
59c81532be707170d068b4e4dd93175a19fa8d9a,"`async parseAsync(argv, parseOptions) {`

    await this.parse(argv, parseOptions);

    return Promise.all(this._actionResults);

  }`","  async parseAsync(argv, parseOptions) {

    const userArgs = this._prepareUserArgs(argv, parseOptions);

    await this._parseCommand([], userArgs);



    return this;
",80
7b497181fdceea62dccfab846c41247a14abc2ff,"describe(""My Test"", function() {
  it(""Does something"", function() {
    expect(true).toBe(true);
  });
});","    ""Sanity check operations"": async browser => {

        const Images = await import(""../samples/Images.mjs"");

        testOp(browser, ""A1Z26 Cipher Decode"", ""20 5 19 20 15 21 20 16 21 20"", ""testoutput"");

        testOp(browser, ""A1Z26 Cipher Encode"", ""test input"", ""20 5 19 20 9 14 16 21 20"");

        testOp(browser, ""ADD"", ""test input"", ""Ê»ÉÊv¿ÄÆËÊ"", [{ ""option"": ""Hex"", ""string"": ""56"" }]);

        testOp(browser, ""AES Decrypt"", ""b443f7f7c16ac5396a34273f6f639caa"", ""test output"", [{ ""option"": ""Hex"", ""string"": ""00112233445566778899aabbccddeeff"" }, { ""option"": ""Hex"", ""string"": ""00000000000000000000000000000000"" }, ""CBC"", ""Hex"", ""Raw"", { ""option"": ""Hex"", ""string"": """" }]);

        testOp(browser, ""AES Encrypt"", ""test input"", ""e42eb8fbfb7a98fff061cd2c1a794d92"", [{""option"": ""Hex"", ""string"": ""00112233445566778899aabbccddeeff""}, {""option"": ""Hex"", ""string"": ""00000000000000000000000000000000""}, ""CBC"", ""Raw"", ""Hex""]);

        testOp(browser, ""AND"", ""test input"", ""4$04  $044"", [{ ""option"": ""Hex"", ""string"": ""34"" }]);

        testOp(browser, ""Add line numbers"", ""test input"", ""1 test input"");

        testOp(browser, [""From Hex"", ""Add Text To Image"", ""To Base64""], Images.PNG_HEX, Images.PNG_CHEF_B64, [""Chef"", ""Center"", ""Middle"", 0, 0, 16]);

        testOp(browser, ""Adler-32 Checksum"", ""test input"", ""16160411"");

        testOp(browser, ""Affine Cipher Decode"", ""test input"", ""rcqr glnsr"", [1, 2]);

        testOp(browser, ""Affine Cipher Encode"", ""test input"", ""njln rbfpn"", [2, 1]);

        testOp(browser, ""Analyse hash"", ""0123456789abcdef"", /CRC-64/);

        testOp(browser, ""Atbash Cipher"", ""test input"", ""gvhg rmkfg"");

        // testOp(browser, ""Avro to JSON"", ""test input"", ""test_output"");

        // testOp(browser, ""BLAKE2b"", ""test input"", ""test_output"");

        // testOp(browser, ""BLAKE2s"", ""test input"", ""test_output"");

        // testOp(browser, ""BSON deserialise"", ""test input"", ""test_output"");

        // testOp(browser, ""BSON serialise"", ""test input"", ""test_output"");

        // testOp(browser, ""Bacon Cipher Decode"", ""test input"", ""test_output"");

        // testOp(browser, ""Bacon Cipher Encode"", ""test input"", ""test_output"");

        // testOp(browser, ""Bcrypt"", ""test input"", ""test_output"");

        // testOp(browser, ""Bcrypt compare"", ""test input"", ""test_output"");

        // testOp(browser, ""Bcrypt parse"", ""test input"", ""test_output"");

        // testOp(browser, ""Bifid Cipher Decode"", ""test input"", ""test_output"");

        // testOp(browser, ""Bifid Cipher Encode"", ""test input"", ""test_output"");

        // testOp(browser, ""Bit shift left"", ""test input"", ""test_output"");

        // testOp(browser, ""Bit shift right"", ""test input"", ""test_output"");

        testOp(browser, ""Blowfish Decrypt"", ""10884e15427dd84ec35204e9c8e921ae"", ""test_output"", [{""option"": ""Hex"", ""string"": ""1234567801234567""}, {""option"": ""Hex"", ""string"": ""0011223344556677""}, ""CBC"", ""Hex"", ""Raw""]);

        testOp(browser, ""Blowfish Encrypt"", ""test input"", ""f0fadbd1d90d774f714248cf26b96410"", [{""option"": ""Hex"", ""string"": ""1234567801234567""}, {""option"": ""Hex"", ""string"": ""0011223344556677""}, ""CBC"", ""Raw"", ""Hex""]);

        testOp(browser, [""From Hex"", ""Blur Image"", ""To Base64""], Images.PNG_HEX, Images.PNG_BLUR_B64);

        // testOp(browser, ""Bombe"", ""test input"", ""test_output"");

        testOp(browser, ""Bzip2 Compress"", ""test input"", ""BZh91AY&SYÏ........@..!N. .!.Â.À.3..ß.rE8P.Ï..."");

        testOp(browser, [""From Hex"", ""Bzip2 Decompress""], ""425a68393141592653597b0884b7000003038000008200ce00200021a647a4218013709517c5dc914e14241ec2212dc0"", ""test_output"", [true]);

        // testOp(browser, ""CRC-16 Checksum"", ""test input"", ""test_output"");

        // testOp(browser, ""CRC-32 Checksum"", ""test input"", ""test_output"");

        // testOp(browser, ""CRC-8 Checksum"", ""test input"", ""test_output"");

        // testOp(browser, ""CSS Beautify"", ""test input"", ""test_output"");

        // testOp(browser, ""CSS Minify"", ""test input"", ""test_output"");

        // testOp(browser, ""CSS selector"", ""test input"", ""test_output"");

        // testOp(browser, ""CSV to JSON"", ""test input"", ""test_output"");

        // testOp(browser, ""CTPH"", ""test input"", ""test_output"");

        // testOp(browser, ""Cartesian Product"", ""test input"", ""test_output"");

        // testOp(browser, ""Change IP format"", ""test input"", ""test_output"");

        // testOp(browser, ""Chi Square"", ""test input"", ""test_output"");

        // testOp(browser, ""CipherSaber2 Decrypt"", ""test input"", ""test_output"");

        // testOp(browser, ""CipherSaber2 Encrypt"", ""test input"", ""test_output"");

        // testOp(browser, ""Citrix CTX1 Decode"", ""test input"", ""test_output"");

        // testOp(browser, ""Citrix CTX1 Encode"", ""test input"", ""test_output"");

        // testOp(browser, ""Colossus"", ""test input"", ""test_output"");

        // testOp(browser, ""Comment"", ""test input"", ""test_output"");

        // testOp(browser, ""Compare CTPH hashes"", ""test input"", ""test_output"");

        // testOp(browser, ""Compare SSDEEP hashes"", ""test input"", ""test_output"");

        // /testOp(browser, ""Conditional Jump"", ""test input"", ""test_output"");

        // testOp(browser, ""Contain Image"", ""test input"", ""test_output"");

        // testOp(browser, ""Convert area"", ""test input"", ""test_output"");

        // /testOp(browser, ""Convert co-ordinate format"", ""test input"", ""test_output"");

        // testOp(browser, ""Convert data units"", ""test input"", ""test_output"");

        // testOp(browser, ""Convert distance"", ""test input"", ""test_output"");

        // testOp(browser, ""Convert Image Format"", ""test input"", ""test_output"");

        // testOp(browser, ""Convert mass"", ""test input"", ""test_output"");

        // testOp(browser, ""Convert speed"", ""test input"", ""test_output"");

        // testOp(browser, ""Convert to NATO alphabet"", ""test input"", ""test_output"");

        // testOp(browser, ""Count occurrences"", ""test input"", ""test_output"");

        // testOp(browser, ""Cover Image"", ""test input"", ""test_output"");

        // testOp(browser, ""Crop Image"", ""test input"", ""test_output"");

        // testOp(browser, ""DES Decrypt"", ""test input"", ""test_output"");

        // testOp(browser, ""DES Encrypt"", ""test input"", ""test_output"");

        // testOp(browser, ""DNS over HTTPS"", ""test input"", ""test_output"");

        // testOp(browser, ""Dechunk HTTP response"", ""test input"", ""test_output"");

        // testOp(browser, ""Decode NetBIOS Name"", ""test input"", ""test_output"");

        // testOp(browser, ""Decode text"", ""test input"", ""test_output"");

        // testOp(browser, ""Defang IP Addresses"", ""test input"", ""test_output"");

        // testOp(browser, ""Defang URL"", ""test input"", ""test_output"");

        // testOp(browser, ""Derive EVP key"", ""test input"", ""test_output"");

        // testOp(browser, ""Derive PBKDF2 key"", ""test input"", ""test_output"");

        // testOp(browser, ""Detect File Type"", ""test input"", ""test_output"");

        // testOp(browser, ""Diff"", ""test input"", ""test_output"");

        // testOp(browser, ""Disassemble x86"", ""test input"", ""test_output"");

        // testOp(browser, ""Dither Image"", ""test input"", ""test_output"");

        // testOp(browser, ""Divide"", ""test input"", ""test_output"");

        // testOp(browser, ""Drop bytes"", ""test input"", ""test_output"");

        // testOp(browser, ""Encode NetBIOS Name"", ""test input"", ""test_output"");

        // testOp(browser, ""Encode text"", ""test input"", ""test_output"");

        // testOp(browser, ""Enigma"", ""test input"", ""test_output"");

        // testOp(browser, ""Entropy"", ""test input"", ""test_output"");

        // testOp(browser, ""Escape string"", ""test input"", ""test_output"");

        // testOp(browser, ""Escape Unicode Characters"", ""test input"", ""test_output"");

        // testOp(browser, ""Expand alphabet range"", ""test input"", ""test_output"");

        // testOp(browser, ""Extract dates"", ""test input"", ""test_output"");

        // testOp(browser, ""Extract domains"", ""test input"", ""test_output"");

        // testOp(browser, ""Extract EXIF"", ""test input"", ""test_output"");

        // testOp(browser, ""Extract email addresses"", ""test input"", ""test_output"");

        // testOp(browser, ""Extract file paths"", ""test input"", ""test_output"");

        // testOp(browser, ""Extract Files"", ""test input"", ""test_output"");

        // testOp(browser, ""Extract IP addresses"", ""test input"", ""test_output"");

        // testOp(browser, ""Extract LSB"", ""test input"", ""test_output"");

        // testOp(browser, ""Extract MAC addresses"", ""test input"", ""test_output"");

        // testOp(browser, ""Extract RGBA"", ""test input"", ""test_output"");

        // testOp(browser, ""Extract URLs"", ""test input"", ""test_output"");

        // testOp(browser, ""Filter"", ""test input"", ""test_output"");

        // testOp(browser, ""Find / Replace"", ""test input"", ""test_output"");

        // testOp(browser, ""Fletcher-16 Checksum"", ""test input"", ""test_output"");

        // testOp(browser, ""Fletcher-32 Checksum"", ""test input"", ""test_output"");

        // testOp(browser, ""Fletcher-64 Checksum"", ""test input"", ""test_output"");

        // testOp(browser, ""Fletcher-8 Checksum"", ""test input"", ""test_output"");

        // testOp(browser, ""Flip Image"", ""test input"", ""test_output"");

        // testOp(browser, ""Fork"", ""test input"", ""test_output"");

        // testOp(browser, ""Format MAC addresses"", ""test input"", ""test_output"");

        // testOp(browser, ""Frequency distribution"", ""test input"", ""test_output"");

        // testOp(browser, ""From BCD"", ""test input"", ""test_output"");

        // testOp(browser, ""From Base"", ""test input"", ""test_output"");

        // testOp(browser, ""From Base32"", ""test input"", ""test_output"");

        // testOp(browser, ""From Base58"", ""test input"", ""test_output"");

        // testOp(browser, ""From Base62"", ""test input"", ""test_output"");

        // testOp(browser, ""From Base64"", ""test input"", ""test_output"");

        // testOp(browser, ""From Base85"", ""test input"", ""test_output"");

        // testOp(browser, ""From Binary"", ""test input"", ""test_output"");

        // testOp(browser, ""From Braille"", ""test input"", ""test_output"");

        // testOp(browser, ""From Case Insensitive Regex"", ""test input"", ""test_output"");

        // testOp(browser, ""From Charcode"", ""test input"", ""test_output"");

        // testOp(browser, ""From Decimal"", ""test input"", ""test_output"");

        // testOp(browser, ""From HTML Entity"", ""test input"", ""test_output"");

        // testOp(browser, ""From Hex"", ""test input"", ""test_output"");

        // testOp(browser, ""From Hex Content"", ""test input"", ""test_output"");

        // testOp(browser, ""From Hexdump"", ""test input"", ""test_output"");

        // testOp(browser, ""From MessagePack"", ""test input"", ""test_output"");

        // testOp(browser, ""From Morse Code"", ""test input"", ""test_output"");

        // testOp(browser, ""From Octal"", ""test input"", ""test_output"");

        // testOp(browser, ""From Punycode"", ""test input"", ""test_output"");

        // testOp(browser, ""From Quoted Printable"", ""test input"", ""test_output"");

        // testOp(browser, ""From UNIX Timestamp"", ""test input"", ""test_output"");

        // testOp(browser, ""GOST hash"", ""test input"", ""test_output"");

        // testOp(browser, ""Generate all hashes"", ""test input"", ""test_output"");

        // testOp(browser, ""Generate HOTP"", ""test input"", ""test_output"");

        // testOp(browser, ""Generate Image"", ""test input"", ""test_output"");

        // testOp(browser, ""Generate Lorem Ipsum"", ""test input"", ""test_output"");

        // testOp(browser, ""Generate PGP Key Pair"", ""test input"", ""test_output"");

        // testOp(browser, ""Generate QR Code"", ""test input"", ""test_output"");

        // testOp(browser, ""Generate TOTP"", ""test input"", ""test_output"");

        // testOp(browser, ""Generate UUID"", ""test input"", ""test_output"");

        // testOp(browser, ""Generic Code Beautify"", ""test input"", ""test_output"");

        // testOp(browser, ""Group IP addresses"", ""test input"", ""test_output"");

        // testOp(browser, ""Gunzip"", ""test input"", ""test_output"");

        // testOp(browser, ""Gzip"", ""test input"", ""test_output"");

        // testOp(browser, ""HAS-160"", ""test input"", ""test_output"");

        // testOp(browser, ""HMAC"", ""test input"", ""test_output"");

        // testOp(browser, ""HTML To Text"", ""test input"", ""test_output"");

        // testOp(browser, ""HTTP request"", ""test input"", ""test_output"");

        // testOp(browser, ""Hamming Distance"", ""test input"", ""test_output"");

        // testOp(browser, ""Haversine distance"", ""test input"", ""test_output"");

        // testOp(browser, ""Head"", ""test input"", ""test_output"");

        // testOp(browser, ""Heatmap chart"", ""test input"", ""test_output"");

        // testOp(browser, ""Hex Density chart"", ""test input"", ""test_output"");

        // testOp(browser, ""Hex to Object Identifier"", ""test input"", ""test_output"");

        // testOp(browser, ""Hex to PEM"", ""test input"", ""test_output"");

        // testOp(browser, ""Image Brightness / Contrast"", ""test input"", ""test_output"");

        // testOp(browser, ""Image Filter"", ""test input"", ""test_output"");

        // testOp(browser, ""Image Hue/Saturation/Lightness"", ""test input"", ""test_output"");

        // testOp(browser, ""Image Opacity"", ""test input"", ""test_output"");

        // testOp(browser, ""Index of Coincidence"", ""test input"", ""test_output"");

        // testOp(browser, ""Invert Image"", ""test input"", ""test_output"");

        // testOp(browser, ""JPath expression"", ""test input"", ""test_output"");

        // testOp(browser, ""JSON Beautify"", ""test input"", ""test_output"");

        // testOp(browser, ""JSON Minify"", ""test input"", ""test_output"");

        // testOp(browser, ""JSON to CSV"", ""test input"", ""test_output"");

        // testOp(browser, ""JWT Decode"", ""test input"", ""test_output"");

        // testOp(browser, ""JWT Sign"", ""test input"", ""test_output"");

        // testOp(browser, ""JWT Verify"", ""test input"", ""test_output"");

        // testOp(browser, ""JavaScript Beautify"", ""test input"", ""test_output"");

        // testOp(browser, ""JavaScript Minify"", ""test input"", ""test_output"");

        // testOp(browser, ""JavaScript Parser"", ""test input"", ""test_output"");

        // testOp(browser, ""Jump"", ""test input"", ""test_output"");

        // testOp(browser, ""Keccak"", ""test input"", ""test_output"");

        // testOp(browser, ""Label"", ""test input"", ""test_output"");

        // testOp(browser, ""Lorenz"", ""test input"", ""test_output"");

        // testOp(browser, ""Luhn Checksum"", ""test input"", ""test_output"");

        // testOp(browser, ""MD2"", ""test input"", ""test_output"");

        // testOp(browser, ""MD4"", ""test input"", ""test_output"");

        // testOp(browser, ""MD5"", ""test input"", ""test_output"");

        // testOp(browser, ""MD6"", ""test input"", ""test_output"");

        // testOpHtml(browser, ""Magic"", ""dGVzdCBvdXRwdXQ="", ""td"", /Result snippet/);

        testOpHtml(browser, ""Magic"", ""dGVzdCBvdXRwdXQ="", ""tr:{1} td:{2}"", ""Result snippet"");

        // testOp(browser, ""Mean"", ""test input"", ""test_output"");

        // testOp(browser, ""Median"", ""test input"", ""test_output"");`

        // testOp(browser, ""Merge"", ""test input"", ""test_output"");`

        // testOp(browser, ""Microsoft Script Decoder"", ""test input"", ""test_output"");

        // testOp(browser, ""Multiple Bombe"", ""test input"", ""test_output"");

        // testOp(browser, ""Multiply"", ""test input"", ""test_output"");

        // testOp(browser, ""NOT"", ""test input"", ""test_output"");

        // testOp(browser, ""Normalise Image"", ""test input"", ""test_output"");

        // testOp(browser, ""Normalise Unicode"", ""test input"", ""test_output"");

        // testOp(browser, ""Numberwang"", ""test input"", ""test_output"");

        // testOp(browser, ""OR"", ""test input"", ""test_output"");

        // testOp(browser, ""Object Identifier to Hex"", ""test input"", ""test_output"");

        // testOp(browser, ""Offset checker"", ""test input"", ""test_output"");

        // testOp(browser, ""Optical Character Recognition"", ""test input"", ""test_output"");

        // testOp(browser, ""PEM to Hex"", ""test input"", ""test_output"");

        // testOp(browser, ""PGP Decrypt"", ""test input"", ""test_output"");

        // testOp(browser, ""PGP Decrypt and Verify"", ""test input"", ""test_output"");

        // testOp(browser, ""PGP Encrypt"", ""test input"", ""test_output"");

        // testOp(browser, ""PGP Encrypt and Sign"", ""test input"", ""test_output"");

        // testOp(browser, ""PGP Verify"", ""test input"", ""test_output"");

        // testOp(browser, ""PHP Deserialize"", ""test input"", ""test_output"");

        // testOp(browser, ""Pad lines"", ""test input"", ""test_output"");

        // testOp(browser, ""Parse ASN.1 hex string"", ""test input"", ""test_output"");

        // testOp(browser, ""Parse colour code"", ""test input"", ""test_output"");

        // testOp(browser, ""Parse DateTime"", ""test input"", ""test_output"");

        // testOp(browser, ""Parse IP range"", ""test input"", ""test_output"");

        // testOp(browser, ""Parse IPv4 header"", ""test input"", ""test_output"");

        // testOp(browser, ""Parse IPv6 address"", ""test input"", ""test_output"");

        // testOp(browser, ""Parse ObjectID timestamp"", ""test input"", ""test_output"");

        // testOp(browser, ""Parse QR Code"", ""test input"", ""test_output"");

        // testOp(browser, ""Parse SSH Host Key"", ""test input"", ""test_output"");

        // testOp(browser, ""Parse TLV"", ""test input"", ""test_output"");

        // testOp(browser, ""Parse UDP"", ""test input"", ""test_output"");

        // testOp(browser, ""Parse UNIX file permissions"", ""test input"", ""test_output"");

        // testOp(browser, ""Parse URI"", ""test input"", ""test_output"");

        // testOp(browser, ""Parse User Agent"", ""test input"", ""test_output"");

        // testOp(browser, ""Parse X.509 certificate"", ""test input"", ""test_output"");

        // testOp(browser, ""Play Media"", ""test input"", ""test_output"");

        // testOp(browser, ""Power Set"", ""test input"", ""test_output"");

        // testOp(browser, ""Protobuf Decode"", ""test input"", ""test_output"");

        // testOp(browser, ""Pseudo-Random Number Generator"", ""test input"", ""test_output"");

        // testOp(browser, ""RC2 Decrypt"", ""test input"", ""test_output"");

        // testOp(browser, ""RC2 Encrypt"", ""test input"", ""test_output"");

        // testOp(browser, ""RC4"", ""test input"", ""test_output"");

        // testOp(browser, ""RC4 Drop"", ""test input"", ""test_output"");

        // testOp(browser, ""RIPEMD"", ""test input"", ""test_output"");

        // testOp(browser, ""ROT13"", ""test input"", ""test_output"");

        // testOp(browser, ""ROT47"", ""test input"", ""test_output"");

        // testOp(browser, ""Rail Fence Cipher Decode"", ""test input"", ""test_output"");

        // testOp(browser, ""Rail Fence Cipher Encode"", ""test input"", ""test_output"");

        // testOp(browser, ""Randomize Colour Palette"", ""test input"", ""test_output"");

        // testOp(browser, ""Raw Deflate"", ""test input"", ""test_output"");

        // testOp(browser, ""Raw Inflate"", ""test input"", ""test_output"");

        // testOp(browser, ""Register"", ""test input"", ""test_output"");

        // testOp(browser, ""Regular expression"", ""test input"", ""test_output"");

        // testOp(browser, ""Remove Diacritics"", ""test input"", ""test_output"");

        // testOp(browser, ""Remove EXIF"", ""test input"", ""test_output"");

        // testOp(browser, ""Remove line numbers"", ""test input"", ""test_output"");

        // testOp(browser, ""Remove null bytes"", ""test input"", ""test_output"");

        // testOp(browser, ""Remove whitespace"", ""test input"", ""test_output"");

        // testOp(browser, ""Render Image"", ""test input"", ""test_output"");

        // testOp(browser, ""Render Markdown"", ""test input"", ""test_output"");

        // testOp(browser, ""Resize Image"", ""test input"", ""test_output"");

        // testOp(browser, ""Return"", ""test input"", ""test_output"");

        // testOp(browser, ""Reverse"", ""test input"", ""test_output"");

        // testOp(browser, ""Rotate Image"", ""test input"", ""test_output"");

        // testOp(browser, ""Rotate left"", ""test input"", ""test_output"");

        // testOp(browser, ""Rotate right"", ""test input"", ""test_output"");

        // testOp(browser, ""SHA0"", ""test input"", ""test_output"");

        // testOp(browser, ""SHA1"", ""test input"", ""test_output"");

        // testOp(browser, ""SHA2"", ""test input"", ""test_output"");

        // testOp(browser, ""SHA3"", ""test input"", ""test_output"");

        // testOp(browser, ""SQL Beautify"", ""test input"", ""test_output"");

        // testOp(browser, ""SQL Minify"", ""test input"", ""test_output"");

        // testOp(browser, ""SSDEEP"", ""test input"", ""test_output"");

        // testOp(browser, ""SUB"", ""test input"", ""test_output"");

        // testOp(browser, ""Scan for Embedded Files"", ""test input"", ""test_output"");

        // testOp(browser, ""Scatter chart"", ""test input"", ""test_output"");

        // testOp(browser, ""Scrypt"", ""test input"", ""test_output"");

        // testOp(browser, ""Series chart"", ""test input"", ""test_output"");

        // testOp(browser, ""Set Difference"", ""test input"", ""test_output"");

        // testOp(browser, ""Set Intersection"", ""test input"", ""test_output"");

        // testOp(browser, ""Set Union"", ""test input"", ""test_output"");

        // testOp(browser, ""Shake"", ""test input"", ""test_output"");

        // testOp(browser, ""Sharpen Image"", ""test input"", ""test_output"");

        // testOp(browser, ""Show Base64 offsets"", ""test input"", ""test_output"");

        // testOp(browser, ""Show on map"", ""test input"", ""test_output"");

        // testOp(browser, ""Sleep"", ""test input"", ""test_output"");

        // testOp(browser, ""Snefru"", ""test input"", ""test_output"");

        // testOp(browser, ""Sort"", ""test input"", ""test_output"");

        // testOp(browser, ""Split"", ""test input"", ""test_output"");

        // testOp(browser, ""Split Colour Channels"", ""test input"", ""test_output"");

        // testOp(browser, ""Standard Deviation"", ""test input"", ""test_output"");

        // testOp(browser, ""Streebog"", ""test input"", ""test_output"");

        // testOp(browser, ""Strings"", ""test input"", ""test_output"");

        // testOp(browser, ""Strip HTML tags"", ""test input"", ""test_output"");

        // testOp(browser, ""Strip HTTP headers"", ""test input"", ""test_output"");

        // testOp(browser, ""Subsection"", ""test input"", ""test_output"");

        // testOp(browser, ""Substitute"", ""test input"", ""test_output"");

        // testOp(browser, ""Subtract"", ""test input"", ""test_output"");

        // testOp(browser, ""Sum"", ""test input"", ""test_output"");

        // testOp(browser, ""Swap endianness"", ""test input"", ""test_output"");

        // testOp(browser, ""Symmetric Difference"", ""test input"", ""test_output"");

        // testOp(browser, ""Syntax highlighter"", ""test input"", ""test_output"");

        // testOp(browser, ""TCP/IP Checksum"", ""test input"", ""test_output"");

        // testOp(browser, ""Tail"", ""test input"", ""test_output"");

        // testOp(browser, ""Take bytes"", ""test input"", ""test_output"");

        // testOp(browser, ""Tar"", ""test input"", ""test_output"");

        // testOp(browser, ""Text Encoding Brute Force"", ""test input"", ""test_output"");

        // testOp(browser, ""To BCD"", ""test input"", ""test_output"");

        // testOp(browser, ""To Base"", ""test input"", ""test_output"");

        // testOp(browser, ""To Base32"", ""test input"", ""test_output"");

        // testOp(browser, ""To Base58"", ""test input"", ""test_output"");

        // testOp(browser, ""To Base62"", ""test input"", ""test_output"");

        // testOp(browser, ""To Base64"", ""test input"", ""test_output"");

        // testOp(browser, ""To Base85"", ""test input"", ""test_output"");

        // testOp(browser, ""To Binary"", ""test input"", ""test_output"");

        // testOp(browser, ""To Braille"", ""test input"", ""test_output"");

        // testOp(browser, ""To Camel case"", ""test input"", ""test_output"");

        // testOp(browser, ""To Case Insensitive Regex"", ""test input"", ""test_output"");

        // testOp(browser, ""To Charcode"", ""test input"", ""test_output"");

        // testOp(browser, ""To Decimal"", ""test input"", ""test_output"");

        // testOp(browser, ""To HTML Entity"", ""test input"", ""test_output"");

        // testOp(browser, ""To Hex"", ""test input"", ""test_output"");

        // testOp(browser, ""To Hex Content"", ""test input"", ""test_output"");

        // testOp(browser, ""To Hexdump"", ""test input"", ""test_output"");

        // testOp(browser, ""To Kebab case"", ""test input"", ""test_output"");

        // testOp(browser, ""To Lower case"", ""test input"", ""test_output"");

        // testOp(browser, ""To MessagePack"", ""test input"", ""test_output"");

        // testOp(browser, ""To Morse Code"", ""test input"", ""test_output"");

        // testOp(browser, ""To Octal"", ""test input"", ""test_output"");

        // testOp(browser, ""To Punycode"", ""test input"", ""test_output"");

        // testOp(browser, ""To Quoted Printable"", ""test input"", ""test_output"");

        // testOp(browser, ""To Snake case"", ""test input"", ""test_output"");

        // testOp(browser, ""To Table"", ""test input"", ""test_output"");

        // testOp(browser, ""To UNIX Timestamp"", ""test input"", ""test_output"");

        // testOp(browser, ""To Upper case"", ""test input"", ""test_output"");

        // testOp(browser, ""Translate DateTime Format"", ""test input"", ""test_output"");

        // testOp(browser, ""Triple DES Decrypt"", ""test input"", ""test_output"");

        // testOp(browser, ""Triple DES Encrypt"", ""test input"", ""test_output"");

        // testOp(browser, ""Typex"", ""test input"", ""test_output"");

        // testOp(browser, ""UNIX Timestamp to Windows Filetime"", ""test input"", ""test_output"");

        // testOp(browser, ""URL Decode"", ""test input"", ""test_output"");

        // testOp(browser, ""URL Encode"", ""test input"", ""test_output"");

        // testOp(browser, ""Unescape string"", ""test input"", ""test_output"");

        // testOp(browser, ""Unescape Unicode Characters"", ""test input"", ""test_output"");

        // testOp(browser, ""Unique"", ""test input"", ""test_output"");

        // testOp(browser, ""Untar"", ""test input"", ""test_output"");

        // testOp(browser, ""Unzip"", ""test input"", ""test_output"");

        // testOp(browser, ""VarInt Decode"", ""test input"", ""test_output"");

        // testOp(browser, ""VarInt Encode"", ""test input"", ""test_output"");

        // testOp(browser, ""View Bit Plane"", ""test input"", ""test_output"");

        // testOp(browser, ""Vigenère Decode"", ""test input"", ""test_output"");

        // testOp(browser, ""Vigenère Encode"", ""test input"", ""test_output"");

        // testOp(browser, ""Whirlpool"", ""test input"", ""test_output"");

        // testOp(browser, ""Windows Filetime to UNIX Timestamp"", ""test input"", ""test_output"");

        // testOp(browser, ""XKCD Random Number"", ""test input"", ""test_output"");

        // testOp(browser, ""XML Beautify"", ""test input"", ""test_output"");

        // testOp(browser, ""XML Minify"", ""test input"", ""test_output"");

        // testOp(browser, ""XOR"", ""test input"", ""test_output"");

        // testOp(browser, ""XOR Brute Force"", ""test input"", ""test_output"");

        // testOp(browser, ""XPath expression"", ""test input"", ""test_output"");

        // testOp(browser, ""YARA Rules"", ""test input"", ""test_output"");

        // testOp(browser, ""Zip"", ""test input"", ""test_output"");

        // testOp(browser, ""Zlib Deflate"", ""test input"", ""test_output"");

        // testOp(browser, ""Zlib Inflate"", ""test input"", ""test_output"");
",27202
8df8e8b28e9b5f8ed40ecda11c02132a78248e63,"async function initGreeter() {
  let shellContainer = document.getElementById(""main_shell"");
  let greeter = document.getElementById(""main_shell_greeting"");

  try {
    const userlist = await require(""systeminformation"").users();
    greeter.innerHTML += `Welcome back, <em>${userlist[0].user}</em>`;
  } catch (err) {
    greeter.innerHTML += ""Welcome back"";
  } finally {
    greeter.setAttribute(""style"", ""opacity: 1;"");
    setTimeout(() => {
      greeter.setAttribute(""style"", ""opacity: 0;"");
      setTimeout(() => {
        greeter.remove();
        setTimeout(() => {
          shellContainer.innerHTML += `
            <ul id=""main_shell_tabs"">
              <li id=""shell_tab0"" onclick=""window.focusShellTab(0);"" class=""active"">MAIN SHELL</li>
              <li id=""shell_tab1"" onclick=""window.focusShellTab(1);"">EMPTY</li>
              <li id=""shell_tab2"" onclick=""window.focusShellTab(2);"">EMPTY</li>
              <li id=""shell_tab3"" onclick=""window.focusShellTab(3);"">EMPTY</li>
              <li id=""shell_tab4"" onclick=""window.focusShellTab(4);"">EMPTY</li>
            </ul>
            <div id=""main_shell_innercontainer"">
              <pre id=""terminal0"" class=""active""></pre>
              <pre id=""terminal1""></pre>
              <pre id=""terminal2""></pre>
              <pre id=""terminal3""></pre>
              <pre id=""terminal4""></pre>
            </div>`;
          window.term = {
            0: new Terminal({
              role: ""client"",
              parentId: ""terminal0"",
              port: window.settings.port || 3000,
            }),
          };
          window.currentTerm = 0;
          window.term[0].onprocesschange = (p) => {
            document.getElementById(""shell_tab0"").innerText = ""MAIN - "" + p;
          };
        }, 100);
      }, 500);
    }, 1100);
  }
}","    await _delay(100);

    // Initialize the terminal

    let shellContainer = document.getElementById(""main_shell"");

    shellContainer.innerHTML += `

        <ul id=""main_shell_tabs"">

            <li id=""shell_tab0"" onclick=""window.focusShellTab(0);"" class=""active"">MAIN SHELL</li>

            <li id=""shell_tab1"" onclick=""window.focusShellTab(1);"">EMPTY</li>

            <li id=""shell_tab2"" onclick=""window.focusShellTab(2);"">EMPTY</li>

            <li id=""shell_tab3"" onclick=""window.focusShellTab(3);"">EMPTY</li>

            <li id=""shell_tab4"" onclick=""window.focusShellTab(4);"">EMPTY</li>

        </ul>

        <div id=""main_shell_innercontainer"">

            <pre id=""terminal0"" class=""active""></pre>

            <pre id=""terminal1""></pre>

            <pre id=""terminal2""></pre>

            <pre id=""terminal3""></pre>

            <pre id=""terminal4""></pre>

        </div>`;

    window.term = {

        0: new Terminal({

            role: ""client"",

            parentId: ""terminal0"",

            port: window.settings.port || 3000

    };

    window.currentTerm = 0;

    window.term[0].onprocesschange = p => {

        document.getElementById(""shell_tab0"").innerText = ""MAIN - ""+p;

    };

    // Prevent losing hardware keyboard focus on the terminal when using touch keyboard

    window.onmouseup = (e) => {

        if (window.keyboard.linkedToTerm) window.term[window.currentTerm].term.focus();

    };

    window.term[0].term.writeln(""\033[1m""+`Welcome to eDEX-UI v${electron.remote.app.getVersion()} - Electron v${process.versions.electron}`+""\033[0m"");



    await _delay(100);

    window.fsDisp = new FilesystemDisplay({

        parentId: ""filesystem""



    await _delay(200);



    document.getElementById(""filesystem"").setAttribute(""style"", ""opacity: 1;"");



    await _delay(200);



    window.updateCheck = new UpdateChecker();

window.themeChanger = theme => {

window.remakeKeyboard = layout => {
",1279
eecc773923f2a97038e4c94c288e855a8ab3e978,"async function produce(base) {

d.b = 1

}","                return produce(base, async d => {

                    await Promise.resolve()

                    d.b = 1
",98
f7b2735d2320eecafe478f3e4dd77ccaab848194,"async function () {
  var errors = [];

  try {
    const results = await Promise.all(
      collection.map((args) => {
        return new Promise((resolve, reject) => {
          Fiber(() => {
            try {
              resolve(callback.apply(context, args));
            } catch (err) {
              reject(err);
            }
          }).run();
        });
      })
    );
  } catch (error) {
    errors.push(error);
  }
}","  const errors = [];

  const results = Promise.all(_.map(collection, (...args) => {

    async function run() {

      return callback.apply(context, args);

    }



    return run().catch(error => {
",274
4b17a0b760086ced573124a85b467e23ec44af18,"let lastSendMessagePromise = Promise.resolve();

async function sendMessageAsync(message) {
  try {
    await lastSendMessagePromise;
    const result = await both();
    return result;
  } catch (error) {
    console.error(error);
  }
}

function refreshClient(arch) {
  sendMessageAsync({
    ""package"": ""webapp"",
    ""method"": ""generateClientProgram"",
    ""args"": [arch],
  }).then((result) => {
    // handle result
  }).catch((error) => {
    console.error(error);
  });
}","    async function refreshClient(arch) {

        await appProcess.proc.sendMessage(""webapp"", {

          method: ""generateClientProgram"",

          args: [arch],

      await appProcess.proc.sendMessage(""autoupdate"", {
",345
1387473cf56dfa095f57eb472288e68530f6ecd4,"async function postStartupCallback() {
    // Build and write the target in one step.
    const clientTarget = makeClientTarget(app, arch, { minifiers });
    await refreshClient(arch);
    runLog.log(`Finished delayed build of ${arch} in ${new Date - start}ms`, { arrow: true });
  }","        postStartupCallbacks.push(async ({

          pauseClient,

          // Build the target first.

          const target = makeClientTarget(app, arch, { minifiers });



          // Tell the webapp package to pause responding to requests from

          // clients that use this arch, because we're about to write a

          // new version of this bundle to disk.

          await pauseClient(arch);



          // Now write the target to disk. Note that we are rewriting the

          // bundle in place, so this work is not atomic by any means,

          // which is why we needed to pause the client.

          writeClientTarget(target);



          // Refresh and unpause the client, now that writing is finished.

          await refreshClient(arch);

          runLog.log(`Finished delayed build of ${arch} in ${

            new Date - start

          }ms`, { arrow: true });
",662
996ab0b831bfff60e325e1895a7c35f1cc0e2f24,"const f = new Future();
async function minifyCssAsync(cssText) {
  try {
    const res = await CssTools.minifyCssAsync(cssText);
    return [res];
  } catch (error) {
    throw error;
  }
}","    return Promise.await(CssTools.minifyCssAsync(cssText));
",135
e7060c29f4a3fbaf91d0fe291700f1fb46e6e9e5,"async (test, onComplete) => {

    await Promise.all(promises);
    onComplete();

}","  async (test) => {

    return Promise.all(promises);
",40
d08790778a984e28ac73d81a5f42cd366b82ceb0,"async function updateUser(user) {
  const hash = await hashPassword(newPlaintextPassword);
  const update = {
    $unset: {
      'services.password.reset': 1,
    },
    $set: {
      'services.password.bcrypt': hash,
    }
  };
  if (options.logout) {
    update.$unset['services.resume.loginTokens'] = 1;
  }
  Meteor.users.update({ _id: user._id }, update);
}","  const update = {

    $unset: {

      'services.password.reset': 1

    },

    $set: {'services.password.bcrypt': await hashPassword(newPlaintextPassword)}

  };

  if (options.logout) {

    update.$unset['services.resume.loginTokens'] = 1;

  }

  Meteor.users.update({_id: user._id}, update);

};



/**

 * @summary Forcibly change the password for a user.

 * @locus Server

 * @param {String} userId The id of the user to update.

 * @param {String} newPassword A new password for the user.

 * @param {Object} [options]

 * @param {Object} options.logout Logout all current connections with this userId (default: true)

 * @importFromPackage accounts-base

 */

Accounts.setPassword = (userId, newPlaintextPassword, options) => {

  return Promise.await(Accounts.setPasswordAsync(userId, newPlaintextPassword, options));
",621
b86b2a122c4dcc3e82d11c87e6e8922720140c1d,"async function promise() {
  try {
    const result = await promise;
    // do something with result
  } catch (exception) {
    // handle exception
  }
}","      try {

        const result = Promise.await(promise);

      } catch (exception) {

      }
",85
3186c0436b0d31ed5e13cbaa9b33e87e7f1678d1,"_doneQuerying: async function () {
    const afterCaughtUp = await self._mongoHandle._oplogHandle.waitUntilCaughtUp();
    if (self._stopped) return;
    if (self._phase !== PHASE.QUERYING) throw Error(""Phase unexpectedly "" + self._phase);
    Meteor._noYieldsAllowed(function () {
      if (self._requeryWhenDoneThisQuery) {
        self._requeryWhenDoneThisQuery = false;
        self._pollQuery();
      } else if (self._needToFetch.empty()) {
        self._beSteady();
      } else {
        self._fetchModifiedDocuments();
      }
    });
  },","  _doneQuerying: async function () {

    await self._mongoHandle._oplogHandle.waitUntilCaughtUp();

    if (self._stopped)

      return;

    if (self._phase !== PHASE.QUERYING)

      throw Error(""Phase unexpectedly "" + self._phase);

    await Meteor._noYieldsAllowed(async function () {

      if (self._requeryWhenDoneThisQuery) {

        self._requeryWhenDoneThisQuery = false;

        self._pollQuery();

      } else if (self._needToFetch.empty()) {

        await self._beSteady();

      } else {

        self._fetchModifiedDocuments();

      }

    });
",72
4b31d2b352b46275ec18fc0de7851b6862325025,"// Build the output from scratch

if (resetBuildPath) {

  await files.rm_recursive(this.buildPath);
  files.mkdir_p(this.buildPath, 0o755);
  this.watchSet = new WatchSet();

}","    this.resetBuildPath = resetBuildPath;

  async init() {

    // Build the output from scratch

    if (this.resetBuildPath) {

      await files.rm_recursive(this.buildPath);

      files.mkdir_p(this.buildPath, 0o755);

      this.watchSet = new WatchSet();

    }

  }


",100
b1a6cc07615a875847068c4df16bcc7b39286e1e,"async function () {
  try {
    files.rm_recursive(wildcardCacheFilename);
    await files.writeFileAtomically(cacheFilename, retAsJSON);
  } finally {}
}","        try {

          await files.rm_recursive(wildcardCacheFilename);

        } finally {

          await files.writeFileAtomically(cacheFilename, retAsJSON);

        }
",65
a76c30693f8697885787e9baab80107a8471a0c4,"async function startMongo(tries = 3) {
    let ok;
    try {
        const res = await self._startMongoAsync();
        if (res) {
            unblockAppRunner();
        } else {
            --tries;
            const left = tries + (tries === 1 ? "" try"" : "" tries"");
            Console.error(left + "" left."");
            if (tries > 0) {
                self.mongoRunner.stop();
                setTimeout(() => startMongo(tries), 1000);
            } else {
                self.mongoRunner._fail();
            }
        }
    } catch (e) {
        --tries;
        const left = tries + (tries === 1 ? "" try"" : "" tries"");
        Console.error(left + "" left."");
        if (tries > 0) {
            self.mongoRunner.stop();
            setTimeout(() => startMongo(tries), 1000);
        } else {
            self.mongoRunner._fail();
        }
    }
}
startMongo();
self.updater.start();
self.hmrServer.start();","    async function startMongo(tries = 3) {

      try {

        await self._startMongoAsync();

        await unblockAppRunner();

      } catch (error) {

        --tries;

        const left = tries + (tries === 1 ? "" try"" : "" tries"");

        Console.error(

        );



        if (tries > 0) {

          await self.mongoRunner.stop();

          await setTimeout(() => startMongo(tries), 1000);

        } else {

          await self.mongoRunner._fail();



      }

    await startMongo();

      await self.updater.start();

      await self.hmrServer.start();
",437
a76c30693f8697885787e9baab80107a8471a0c4,"findMongoPids = async function(dbDir_unused, port) {
  try {
    const childProcess = require('child_process');
    let mongoPids = [];
    await new Promise((resolve, reject) => {
      childProcess.exec('tasklist /fi ""IMAGENAME eq mongod.exe""', (error, stdout, stderr) => {
        if (error) {
          const additionalInfo = JSON.stringify(error);
          if (error.code === 'ENOENT') {
            additionalInfo = 'tasklist wasn\'t found on your system, it usually can be found at C:\\Windows\\System32\\.';
            reject(new Error(`Couldn't run tasklist.exe: ${additionalInfo}`));
          } else {
            // Find the pids of all mongod processes
            stdout.split('\n').forEach((line) => {
              const m = line.match(/^mongod.exe\s+(\d+) /);
              if (m) {
                mongoPids[m[1]] = true;
              }
            });
          }
        }
        resolve();
      });
    });
    await new Promise((resolve, reject) => {
      childProcess.exec('netstat -ano', { maxBuffer: 1024 * 1024 * 10 }, (error, stdout, stderr) => {
        if (error) {
          promise.reject(new Error(`Couldn't run netstat -ano: ${JSON.stringify(error)}`));
        } else {
          const pids = [];
          stdout.split('\n').forEach((line) => {
            const m = line.match(/^\s*TCP\s+\S+:(\d+)\s+\S+\s+LISTENING\s+(\d+)/);
            if (m) {
              const foundPid = parseInt(m[2], 10);
              const foundPort = parseInt(m[1], 10);
              // We can't check the path app_dir so assume it always matches
              if (mongoPids[foundPid] && (!port || port === foundPort)) {
                delete mongoPids[foundPid];
                pids.push({ pid: foundPid, port: foundPort, app_dir: null });
              }
            }
          });
          resolve(pids);
        }
      });
    });
  } catch (error) {
    throw error;
  }
}","  findMongoPids = async function(dbDir_unused, port) {

    var promise = fiberHelpers.makeFulfillablePromise();

    child_process.exec('tasklist /fi ""IMAGENAME eq mongod.exe""', function(

      error,

      stdout,

      stderr

    ) {

      if (error) {

        var additionalInfo = JSON.stringify(error);

        if (error.code === 'ENOENT') {

          additionalInfo =

            ""tasklist wasn't found on your system, it usually can be found at C:\\Windows\\System32\\."";

        }

        promise.reject(

          new Error(""Couldn't run tasklist.exe: "" + additionalInfo)

        );

        return;

      } else {

        // Find the pids of all mongod processes

        var mongo_pids = [];

        stdout.split('\n').forEach(function(line) {

          var m = line.match(/^mongod.exe\s+(\d+) /);

          if (m) {

            mongo_pids[m[1]] = true;

        });



        // Now get the corresponding port numbers

        child_process.exec(

          'netstat -ano',

          { maxBuffer: 1024 * 1024 * 10 },

          function(error, stdout, stderr) {

            if (error) {

              promise.reject(

                new Error(""Couldn't run netstat -ano: "" + JSON.stringify(error))

              );

              return;

            } else {

              var pids = [];

              stdout.split('\n').forEach(function(line) {

                var m = line.match(

                  /^\s*TCP\s+\S+:(\d+)\s+\S+\s+LISTENING\s+(\d+)/

                if (m) {

                  var found_pid = parseInt(m[2], 10);

                  var found_port = parseInt(m[1], 10);



                  // We can't check the path app_dir so assume it always matches

                  if (mongo_pids[found_pid] && (!port || port === found_port)) {

                    // Note that if the mongo rest interface is enabled the

                    // initial port + 1000 is also likely to be open.

                    // So remove the pid so we only match it once.

                    delete mongo_pids[found_pid];

                    pids.push({

                      pid: found_pid,

                      port: found_port,

                      app_dir: null,

                    });

                  }

                }

              });



              promise.resolve(pids);

          }

        );

      }



    return await promise;

  findMongoPids = async function(dbDir, port) {

    var promise = fiberHelpers.makeFulfillablePromise();



    // 'ps ax' should be standard across all MacOS and Linux.

    // However, ps on OS X corrupts some non-ASCII characters in arguments,

    // such as т (CYRILLIC SMALL LETTER TE), leading to this function

    // failing to properly match pathnames with those characters.  #3999

    //

    // pgrep appears to do a better job (and has output that is roughly

    // similar; it lacks a few fields that we don't care about).  Plus,

    // it can do some of the grepping for us.

    //

    // However, 'pgrep' only started shipping with OS X 10.8 (and may be less

    // common on Linux too), so we check to see if it exists and fall back to

    // 'ps' if we can't find it.

    //

    // We avoid using pgrep on Linux, because some versions of Linux pgrep

    // require you to pass -a/--list-full to include the arguments in the

    // output, and other versions fail if you pass that option. We have not

    // observed the Unicode corruption on Linux, so using ps ax there is fine.

    var psScript = 'ps ax';

    if (process.platform === 'darwin') {

      psScript =

        'if type pgrep >/dev/null 2>&1; then ' +

        // -lf means to display and match against full argument lists.

        // pgrep exits 1 if no processes match the argument; we're OK

        // considering this as a success, but we don't want other errors

        // to be ignored.  Note that this is sh not bash, so we can't use

        // [[.

        'pgrep -lf mongod; test ""$?"" -eq 0 -o ""$?"" -eq 1;' +

        'else ps ax; fi';

    }

    // If the child process output includes unicode, make sure it's

    // handled properly.

    const {

      LANG = 'en_US.UTF-8',

      LC_ALL = LANG,

      LANGUAGE = LANG,

      // Remainder of process.env without above properties.

      ...env

    } = process.env;



    // Make sure all three properties are set to the same value, which

    // defaults to ""en_US.UTF-8"" or whatever LANG was already set to.

    Object.assign(env, { LANG, LC_ALL, LANGUAGE });



    child_process.exec(

      psScript,

      {

        env,

        // we don't want this to randomly fail just because you're running

        // lots of processes. 10MB should be more than ps ax will ever

        // spit out; the default is 200K, which at least one person hit

        // (#2158).

        maxBuffer: 1024 * 1024 * 10,

      },

      function(error, stdout, stderr) {

        if (error) {

          promise.reject(

            new Error(

              ""Couldn't run ps ax: "" +

            )

          );

          return;

        }



        var ret = [];

        stdout.split('\n').forEach(function(line) {

          // Matches mongos we start. Note that this matches

          // 'fake-mongod' (our mongod stub for automated tests) as well

          // as 'mongod'.

          var m = line.match(

            /^\s*(\d+).+mongod .+--port (\d+) --dbpath (.+(?:\/|\\)db)/

          );

          if (m && m.length === 4) {

            var foundPid = parseInt(m[1], 10);

            var foundPort = parseInt(m[2], 10);

            var foundPath = m[3];



            if (

              (!port || port === foundPort) &&

              (!dbDir || dbDir === foundPath)

            ) {

              ret.push({

                pid: foundPid,

                port: foundPort,

                dbDir: foundPath,

              });

            }

        });

        promise.resolve(ret);

      }

    );

    return await promise;
",4561
34b53168884ddf15c2f47435913cb5fcf0edbc80,"async function getData() {
  console.log('init .....');
  try {
    const versionRecord = self._getVersionRecord(options.version);
    if (versionRecord.local) {
      self.data = await self._getLocalVersion(versionRecord);
      console.log('init .....', { res });
    } else {
      self.data = self._getOfficialVersion(versionRecord);
    }
    self.data = self._collectPackageData();
    return self.data;
  } catch (err) {
    console.error(err);
  }
}","  self.version = options.version;

};

Object.assign(PackageQuery.prototype, {

  init: async function() {

    const self = this;

    // Collect the data for this package, including looking up any specific

    // package version that we care about.

    if (self.version) {

      var versionRecord = await self._getVersionRecord(self.version);

      self.data = versionRecord.local ?

          await self._getLocalVersion(versionRecord) :

          await self._getOfficialVersion(versionRecord);

      self.data = await self._collectPackageData();

  },

  _getVersionRecord: async function (version) {

    var versionRecord = await self.localCatalog.getLatestVersion(self.name);
",439
fcb7f8f8e7cd0c8e75f60f6abc1c9950458d9477,"async function (test, expect) {

  // var id1 = await ;

  // var id2 = await collection.insert({y: 2});

  try {
    const [id1, id2] = await Promise.all([collection.insert({x: 1}), collection.insert({y: 2})]);

    console.trace({id1, id2});

  } catch (error) {
    console.error(error);
  }

  //

  // var fetcher = new DocFetcher(

  //   MongoInternals.defaultRemoteCollectionDriver().mongo);

  //

  // // Test basic operation.

  // const fakeOp1 = {};

  // const fakeOp2 = {};

}","  async function (test, expect) {

    var id1 = await collection.insert({x: 1});

    var id2 = await collection.insert({y: 2});



    var fetcher = new DocFetcher(

      MongoInternals.defaultRemoteCollectionDriver().mongo);



    // Test basic operation.

    const fakeOp1 = {};

    const fakeOp2 = {};
",194
1b2b87499b1c6988448564074df328915f5f03a3,"async function() {

  try{

    await Meteor.isServer && collection.rawCollection().createIndex({ a: 1 });

    const count = await collection.find({}, { }).count();

    test.equal(count, 1);

    done();

  }catch (error) {

      test.fail(error.message);

  }

}","    if (Meteor.isServer) {

        await collection.rawCollection().createIndex({ a: 1 });

        const count = await collection.find({}, {

        }).count();

        test.equal(count , 1);

        done();

    }
",119
57afe0a7bfa2b4b58d5c651659e146aa6d170ca5,"LocalCollection.prototype[methodNameAsync] = async function(...args) {
  const result = await self[methodName](...args);
  return result;
};","  LocalCollection.prototype[methodNameAsync] = async function(...args) {

    return self[methodName](...args);
",38
bdc2ff478a448720697d2ffa715a2d1785bd4461,"async function runWebAppServer() {
  try {
    _ = await _; // use await to replace .then() callbacks
  } catch (e) {
    console.error(e.stack);
    process.exit(1);
  }
}","await runWebAppServer()


",149
a8bc5a80ac615b1b2f560a914eddd7afc3dfd62b,The output of your `migrateRoles` method should be the following object:,"  it('get an empty list of roles for an empty user', async function () {

    assert.sameMembers(await Roles.getRolesForUserAsync(undefined), [])

    assert.sameMembers(await Roles.getRolesForUserAsync(null), [])

    assert.sameMembers(await Roles.getRolesForUserAsync({}), [])

  })



  it('get an empty list of roles for non-existant user', async function () {

    assert.sameMembers(await Roles.getRolesForUserAsync('1'), [])

    assert.sameMembers(await Roles.getRolesForUserAsync('1', 'scope1'), [])

  })



  // it('can get all roles for user', function () {

  //   Roles.createRoleAsync('admin')

  //   Roles.createRoleAsync('user')

  //

  //   const userId = users.eve

  //   let userObj

  //

  //   // by userId

  //   assert.sameMembers(await Roles.getRolesForUserAsync(userId), [])

  //

  //   // by user object

  //   userObj = Meteor.users.findOneAsync({ _id: userId })

  //   assert.sameMembers(await Roles.getRolesForUserAsync(userObj), [])

  //

  //   Roles.addUsersToRolesAsync(userId, ['admin', 'user'])

  //

  //   // by userId

  //   assert.sameMembers(await Roles.getRolesForUserAsync(userId), ['admin', 'user'])

  //

  //   // by user object

  //   userObj = Meteor.users.findOneAsync({ _id: userId })

  //   assert.sameMembers(await Roles.getRolesForUserAsync(userObj), ['admin', 'user'])

  //

  //   assert.sameDeepMembers(await Roles.getRolesForUserAsync(userId, { fullObjects: true }).map(obj => { delete obj._id; return obj }), [{

  //     role: { _id: 'admin' },

  //     scope: null,

  //     user: { _id: userId },

  //     inheritedRoles: [{ _id: 'admin' }]

  //   }, {

  //     role: { _id: 'user' },

  //     scope: null,

  //     user: { _id: userId },

  //     inheritedRoles: [{ _id: 'user' }]

  //   }])

  // })

  //

  // it('can get all roles for user by scope', function () {

  //   Roles.createRoleAsync('admin')

  //   Roles.createRoleAsync('user')

  //

  //   const userId = users.eve

  //   let userObj

  //

  //   // by userId

  //   assert.sameMembers(await Roles.getRolesForUserAsync(userId, 'scope1'), [])

  //

  //   // by user object

  //   userObj = Meteor.users.findOneAsync({ _id: userId })

  //   assert.sameMembers(await Roles.getRolesForUserAsync(userObj, 'scope1'), [])

  //

  //   // add roles

  //   Roles.addUsersToRolesAsync(userId, ['admin', 'user'], 'scope1')

  //   Roles.addUsersToRolesAsync(userId, ['admin'], 'scope2')

  //

  //   // by userId

  //   assert.sameMembers(await Roles.getRolesForUserAsync(userId, 'scope1'), ['admin', 'user'])

  //   assert.sameMembers(await Roles.getRolesForUserAsync(userId, 'scope2'), ['admin'])

  //   assert.sameMembers(await Roles.getRolesForUserAsync(userId), [])

  //

  //   // by user object

  //   userObj = Meteor.users.findOneAsync({ _id: userId })

  //   assert.sameMembers(await Roles.getRolesForUserAsync(userObj, 'scope1'), ['admin', 'user'])

  //   assert.sameMembers(await Roles.getRolesForUserAsync(userObj, 'scope2'), ['admin'])

  //   assert.sameMembers(await Roles.getRolesForUserAsync(userObj), [])

  //

  //   assert.sameDeepMembers(await Roles.getRolesForUserAsync(userId, { fullObjects: true, scope: 'scope1' }).map(obj => { delete obj._id; return obj }), [{

  //     role: { _id: 'admin' },

  //     scope: 'scope1',

  //     user: { _id: userId },

  //     inheritedRoles: [{ _id: 'admin' }]

  //   }, {

  //     role: { _id: 'user' },

  //     scope: 'scope1',

  //     user: { _id: userId },

  //     inheritedRoles: [{ _id: 'user' }]

  //   }])

  //   assert.sameDeepMembers(await Roles.getRolesForUserAsync(userId, { fullObjects: true, scope: 'scope2' }).map(obj => { delete obj._id; return obj }), [{

  //     role: { _id: 'admin' },

  //     scope: 'scope2',

  //     user: { _id: userId },

  //     inheritedRoles: [{ _id: 'admin' }]

  //   }])

  //

  //   assert.sameDeepMembers(await Roles.getRolesForUserAsync(userId, { fullObjects: true, anyScope: true }).map(obj => { delete obj._id; return obj }), [{

  //     role: { _id: 'admin' },

  //     scope: 'scope1',

  //     user: { _id: userId },

  //     inheritedRoles: [{ _id: 'admin' }]

  //   }, {

  //     role: { _id: 'user' },

  //     scope: 'scope1',

  //     user: { _id: userId },

  //     inheritedRoles: [{ _id: 'user' }]

  //   }, {

  //     role: { _id: 'admin' },

  //     scope: 'scope2',

  //     user: { _id: userId },

  //     inheritedRoles: [{ _id: 'admin' }]

  //   }])

  //

  //   Roles.createRoleAsync('PERMISSION')

  //   Roles.addRolesToParent('PERMISSION', 'user')

  //

  //   assert.sameDeepMembers(await Roles.getRolesForUserAsync(userId, { fullObjects: true, scope: 'scope1' }).map(obj => { delete obj._id; return obj }), [{

  //     role: { _id: 'admin' },

  //     scope: 'scope1',

  //     user: { _id: userId },

  //     inheritedRoles: [{ _id: 'admin' }]

  //   }, {

  //     role: { _id: 'user' },

  //     scope: 'scope1',

  //     user: { _id: userId },

  //     inheritedRoles: [{ _id: 'user' }, { _id: 'PERMISSION' }]

  //   }])

  //   assert.sameDeepMembers(await Roles.getRolesForUserAsync(userId, { fullObjects: true, scope: 'scope2' }).map(obj => { delete obj._id; return obj }), [{

  //     role: { _id: 'admin' },

  //     scope: 'scope2',

  //     user: { _id: userId },

  //     inheritedRoles: [{ _id: 'admin' }]

  //   }])

  //   assert.sameMembers(await Roles.getRolesForUserAsync(userId, { scope: 'scope1' }), ['admin', 'user', 'PERMISSION'])

  //   assert.sameMembers(await Roles.getRolesForUserAsync(userId, { scope: 'scope2' }), ['admin'])

  //

  //   assert.sameDeepMembers(await Roles.getRolesForUserAsync(userId, { fullObjects: true, anyScope: true }).map(obj => { delete obj._id; return obj }), [{

  //     role: { _id: 'admin' },

  //     scope: 'scope1',

  //     user: { _id: userId },

  //     inheritedRoles: [{ _id: 'admin' }]

  //   }, {

  //     role: { _id: 'user' },

  //     scope: 'scope1',

  //     user: { _id: userId },

  //     inheritedRoles: [{ _id: 'user' }, { _id: 'PERMISSION' }]

  //   }, {

  //     role: { _id: 'admin' },

  //     scope: 'scope2',

  //     user: { _id: userId },

  //     inheritedRoles: [{ _id: 'admin' }]

  //   }])

  //   assert.sameMembers(await Roles.getRolesForUserAsync(userId, { anyScope: true }), ['admin', 'user', 'PERMISSION'])

  //

  //   assert.sameDeepMembers(await Roles.getRolesForUserAsync(userId, { fullObjects: true, scope: 'scope1', onlyAssigned: true }).map(obj => { delete obj._id; return obj }), [{

  //     role: { _id: 'admin' },

  //     scope: 'scope1',

  //     user: { _id: userId },

  //     inheritedRoles: [{ _id: 'admin' }]

  //   }, {

  //     role: { _id: 'user' },

  //     scope: 'scope1',

  //     user: { _id: userId },

  //     inheritedRoles: [{ _id: 'user' }, { _id: 'PERMISSION' }]

  //   }])

  //   assert.sameDeepMembers(await Roles.getRolesForUserAsync(userId, { fullObjects: true, scope: 'scope2', onlyAssigned: true }).map(obj => { delete obj._id; return obj }), [{

  //     role: { _id: 'admin' },

  //     scope: 'scope2',

  //     user: { _id: userId },

  //     inheritedRoles: [{ _id: 'admin' }]

  //   }])

  //   assert.sameMembers(await Roles.getRolesForUserAsync(userId, { scope: 'scope1', onlyAssigned: true }), ['admin', 'user'])

  //   assert.sameMembers(await Roles.getRolesForUserAsync(userId, { scope: 'scope2', onlyAssigned: true }), ['admin'])

  //

  //   assert.sameDeepMembers(await Roles.getRolesForUserAsync(userId, { fullObjects: true, anyScope: true, onlyAssigned: true }).map(obj => { delete obj._id; return obj }), [{

  //     role: { _id: 'admin' },

  //     scope: 'scope1',

  //     user: { _id: userId },

  //     inheritedRoles: [{ _id: 'admin' }]

  //   }, {

  //     role: { _id: 'user' },

  //     scope: 'scope1',

  //     user: { _id: userId },

  //     inheritedRoles: [{ _id: 'user' }, { _id: 'PERMISSION' }]

  //   }, {

  //     role: { _id: 'admin' },

  //     scope: 'scope2',

  //     user: { _id: userId },

  //     inheritedRoles: [{ _id: 'admin' }]

  //   }])

  //   assert.sameMembers(await Roles.getRolesForUserAsync(userId, { anyScope: true, onlyAssigned: true }), ['admin', 'user'])

  // })

  //

  // it('can get only scoped roles for user', function () {

  //   Roles.createRoleAsync('admin')

  //   Roles.createRoleAsync('user')

  //

  //   const userId = users.eve

  //

  //   // add roles

  //   Roles.addUsersToRolesAsync(userId, ['user'], 'scope1')

  //   Roles.addUsersToRolesAsync(userId, ['admin'])

  //

  //   Roles.createRoleAsync('PERMISSION')

  //   Roles.addRolesToParent('PERMISSION', 'user')

  //

  //   assert.sameMembers(await Roles.getRolesForUserAsync(userId, { onlyScoped: true, scope: 'scope1' }), ['user', 'PERMISSION'])

  //   assert.sameMembers(await Roles.getRolesForUserAsync(userId, { onlyScoped: true, onlyAssigned: true, scope: 'scope1' }), ['user'])

  //   assert.sameDeepMembers(await Roles.getRolesForUserAsync(userId, { onlyScoped: true, fullObjects: true, scope: 'scope1' }).map(obj => { delete obj._id; return obj }), [{

  //     role: { _id: 'user' },

  //     scope: 'scope1',

  //     user: { _id: userId },

  //     inheritedRoles: [{ _id: 'user' }, { _id: 'PERMISSION' }]

  //   }])

  // })

  //

  // it('can get all roles for user by scope with periods in name', function () {

  //   Roles.createRoleAsync('admin')

  //

  //   Roles.addUsersToRolesAsync(users.joe, ['admin'], 'example.k12.va.us')

  //

  //   assert.sameMembers(await Roles.getRolesForUserAsync(users.joe, 'example.k12.va.us'), ['admin'])

  // })

  //

  // it('can get all roles for user by scope including Roles.GLOBAL_SCOPE', function () {

  //   Roles.createRoleAsync('admin')

  //   Roles.createRoleAsync('user')

  //   Roles.createRoleAsync('editor')

  //

  //   const userId = users.eve

  //

  //   Roles.addUsersToRolesAsync([users.eve], ['editor'], Roles.GLOBAL_SCOPE)

  //   Roles.addUsersToRolesAsync([users.eve], ['admin', 'user'], 'scope1')

  //

  //   // by userId

  //   assert.sameMembers(await Roles.getRolesForUserAsync(userId, 'scope1'), ['editor', 'admin', 'user'])

  //   assert.sameMembers(await Roles.getRolesForUserAsync(userId), ['editor'])

  //

  //   // by user object

  //   const userObj = Meteor.users.findOneAsync({ _id: userId })

  //   assert.sameMembers(await Roles.getRolesForUserAsync(userObj, 'scope1'), ['editor', 'admin', 'user'])

  //   assert.sameMembers(await Roles.getRolesForUserAsync(userObj), ['editor'])

  // })

  //

  // it('getRolesForUser should not return null entries if user has no roles for scope', function () {

  //   Roles.createRoleAsync('editor')

  //

  //   const userId = users.eve

  //   let userObj

  //

  //   // by userId

  //   assert.sameMembers(await Roles.getRolesForUserAsync(userId, 'scope1'), [])

  //   assert.sameMembers(await Roles.getRolesForUserAsync(userId), [])

  //

  //   // by user object

  //   userObj = Meteor.users.findOneAsync({ _id: userId })

  //   assert.sameMembers(await Roles.getRolesForUserAsync(userObj, 'scope1'), [])

  //   assert.sameMembers(await Roles.getRolesForUserAsync(userObj), [])

  //

  //   Roles.addUsersToRolesAsync([users.eve], ['editor'], Roles.GLOBAL_SCOPE)

  //

  //   // by userId

  //   assert.sameMembers(await Roles.getRolesForUserAsync(userId, 'scope1'), ['editor'])

  //   assert.sameMembers(await Roles.getRolesForUserAsync(userId), ['editor'])

  //

  //   // by user object

  //   userObj = Meteor.users.findOneAsync({ _id: userId })

  //   assert.sameMembers(await Roles.getRolesForUserAsync(userObj, 'scope1'), ['editor'])

  //   assert.sameMembers(await Roles.getRolesForUserAsync(userObj), ['editor'])

  // })

  //

  // it('getRolesForUser should not fail during a call of addUsersToRoles', function () {

  //   Roles.createRoleAsync('editor')

  //

  //   const userId = users.eve

  //   const promises = []

  //   const interval = setInterval(() => {

  //     promises.push(Promise.resolve().then(() => { await Roles.getRolesForUserAsync(userId) }))

  //   }, 0)

  //

  //   Roles.addUsersToRolesAsync([users.eve], ['editor'], Roles.GLOBAL_SCOPE)

  //   clearInterval(interval)

  //

  //   return Promise.all(promises)

  // })

  //

  // it('returns an empty list of scopes for null as user-id', function () {

  //   assert.sameMembers(Roles.getScopesForUser(undefined), [])

  //   assert.sameMembers(Roles.getScopesForUser(null), [])

  //   assert.sameMembers(Roles.getScopesForUser('foo'), [])

  //   assert.sameMembers(Roles.getScopesForUser({}), [])

  //   assert.sameMembers(Roles.getScopesForUser({ _id: 'foo' }), [])

  // })

  //

  // it('can get all scopes for user', function () {

  //   Roles.createRoleAsync('admin')

  //   Roles.createRoleAsync('user')

  //   Roles.createRoleAsync('editor')

  //

  //   const userId = users.eve

  //

  //   Roles.addUsersToRolesAsync([users.eve], ['editor'], 'scope1')

  //   Roles.addUsersToRolesAsync([users.eve], ['admin', 'user'], 'scope2')

  //

  //   // by userId

  //   assert.sameMembers(Roles.getScopesForUser(userId), ['scope1', 'scope2'])

  //

  //   // by user object

  //   const userObj = Meteor.users.findOneAsync({ _id: userId })

  //   assert.sameMembers(Roles.getScopesForUser(userObj), ['scope1', 'scope2'])

  // })

  //

  // it('can get all scopes for user by role', function () {

  //   Roles.createRoleAsync('admin')

  //   Roles.createRoleAsync('user')

  //   Roles.createRoleAsync('editor')

  //

  //   const userId = users.eve

  //

  //   Roles.addUsersToRolesAsync([users.eve], ['editor'], 'scope1')

  //   Roles.addUsersToRolesAsync([users.eve], ['editor', 'user'], 'scope2')

  //

  //   // by userId

  //   assert.sameMembers(Roles.getScopesForUser(userId, 'user'), ['scope2'])

  //   assert.sameMembers(Roles.getScopesForUser(userId, 'editor'), ['scope1', 'scope2'])

  //   assert.sameMembers(Roles.getScopesForUser(userId, 'admin'), [])

  //

  //   // by user object

  //   const userObj = Meteor.users.findOneAsync({ _id: userId })

  //   assert.sameMembers(Roles.getScopesForUser(userObj, 'user'), ['scope2'])

  //   assert.sameMembers(Roles.getScopesForUser(userObj, 'editor'), ['scope1', 'scope2'])

  //   assert.sameMembers(Roles.getScopesForUser(userObj, 'admin'), [])

  // })

  //

  // it('getScopesForUser returns [] when not using scopes', function () {

  //   Roles.createRoleAsync('user')

  //   Roles.createRoleAsync('editor')

  //

  //   const userId = users.eve

  //

  //   Roles.addUsersToRolesAsync([users.eve], ['editor', 'user'])

  //

  //   // by userId

  //   assert.sameMembers(Roles.getScopesForUser(userId), [])

  //   assert.sameMembers(Roles.getScopesForUser(userId, 'editor'), [])

  //   assert.sameMembers(Roles.getScopesForUser(userId, ['editor']), [])

  //   assert.sameMembers(Roles.getScopesForUser(userId, ['editor', 'user']), [])

  //

  //   // by user object

  //   const userObj = Meteor.users.findOneAsync({ _id: userId })

  //   assert.sameMembers(Roles.getScopesForUser(userObj), [])

  //   assert.sameMembers(Roles.getScopesForUser(userObj, 'editor'), [])

  //   assert.sameMembers(Roles.getScopesForUser(userObj, ['editor']), [])

  //   assert.sameMembers(Roles.getScopesForUser(userObj, ['editor', 'user']), [])

  // })

  //

  // it('can get all groups for user by role array', function () {

  //   const userId = users.eve

  //

  //   Roles.createRoleAsync('user')

  //   Roles.createRoleAsync('editor')

  //   Roles.createRoleAsync('moderator')

  //   Roles.createRoleAsync('admin')

  //

  //   Roles.addUsersToRolesAsync([users.eve], ['editor'], 'group1')

  //   Roles.addUsersToRolesAsync([users.eve], ['editor', 'user'], 'group2')

  //   Roles.addUsersToRolesAsync([users.eve], ['moderator'], 'group3')

  //

  //   // by userId, one role

  //   assert.sameMembers(Roles.getScopesForUser(userId, ['user']), ['group2'])

  //   assert.sameMembers(Roles.getScopesForUser(userId, ['editor']), ['group1', 'group2'])

  //   assert.sameMembers(Roles.getScopesForUser(userId, ['admin']), [])

  //

  //   // by userId, multiple roles

  //   assert.sameMembers(Roles.getScopesForUser(userId, ['editor', 'user']), ['group1', 'group2'])

  //   assert.sameMembers(Roles.getScopesForUser(userId, ['editor', 'moderator']), ['group1', 'group2', 'group3'])

  //   assert.sameMembers(Roles.getScopesForUser(userId, ['user', 'moderator']), ['group2', 'group3'])

  //

  //   // by user object, one role

  //   const userObj = Meteor.users.findOneAsync({ _id: userId })

  //   assert.sameMembers(Roles.getScopesForUser(userObj, ['user']), ['group2'])

  //   assert.sameMembers(Roles.getScopesForUser(userObj, ['editor']), ['group1', 'group2'])

  //   assert.sameMembers(Roles.getScopesForUser(userObj, ['admin']), [])

  //

  //   // by user object, multiple roles

  //   assert.sameMembers(Roles.getScopesForUser(userObj, ['editor', 'user']), ['group1', 'group2'])

  //   assert.sameMembers(Roles.getScopesForUser(userObj, ['editor', 'moderator']), ['group1', 'group2', 'group3'])

  //   assert.sameMembers(Roles.getScopesForUser(userObj, ['user', 'moderator']), ['group2', 'group3'])

  // })

  //

  // it('getting all scopes for user does not include GLOBAL_SCOPE', function () {

  //   Roles.createRoleAsync('admin')

  //   Roles.createRoleAsync('user')

  //   Roles.createRoleAsync('editor')

  //

  //   const userId = users.eve

  //

  //   Roles.addUsersToRolesAsync([users.eve], ['editor'], 'scope1')

  //   Roles.addUsersToRolesAsync([users.eve], ['editor', 'user'], 'scope2')

  //   Roles.addUsersToRolesAsync([users.eve], ['editor', 'user', 'admin'], Roles.GLOBAL_SCOPE)

  //

  //   // by userId

  //   assert.sameMembers(Roles.getScopesForUser(userId, 'user'), ['scope2'])

  //   assert.sameMembers(Roles.getScopesForUser(userId, 'editor'), ['scope1', 'scope2'])

  //   assert.sameMembers(Roles.getScopesForUser(userId, 'admin'), [])

  //   assert.sameMembers(Roles.getScopesForUser(userId, ['user']), ['scope2'])

  //   assert.sameMembers(Roles.getScopesForUser(userId, ['editor']), ['scope1', 'scope2'])

  //   assert.sameMembers(Roles.getScopesForUser(userId, ['admin']), [])

  //   assert.sameMembers(Roles.getScopesForUser(userId, ['user', 'editor', 'admin']), ['scope1', 'scope2'])

  //

  //   // by user object

  //   const userObj = Meteor.users.findOneAsync({ _id: userId })

  //   assert.sameMembers(Roles.getScopesForUser(userObj, 'user'), ['scope2'])

  //   assert.sameMembers(Roles.getScopesForUser(userObj, 'editor'), ['scope1', 'scope2'])

  //   assert.sameMembers(Roles.getScopesForUser(userObj, 'admin'), [])

  //   assert.sameMembers(Roles.getScopesForUser(userObj, ['user']), ['scope2'])

  //   assert.sameMembers(Roles.getScopesForUser(userObj, ['editor']), ['scope1', 'scope2'])

  //   assert.sameMembers(Roles.getScopesForUser(userObj, ['admin']), [])

  //   assert.sameMembers(Roles.getScopesForUser(userObj, ['user', 'editor', 'admin']), ['scope1', 'scope2'])

  // })

  //

  // it('can get all users in role', function () {

  //   Roles.createRoleAsync('admin')

  //   Roles.createRoleAsync('user')

  //   Roles.createRoleAsync('editor')

  //

  //   Roles.addUsersToRolesAsync([users.eve, users.joe], ['admin', 'user'])

  //   Roles.addUsersToRolesAsync([users.bob, users.joe], ['editor'])

  //

  //   const expected = [users.eve, users.joe]

  //   const actual = Roles.getUsersInRole('admin').fetch().map(r => r._id)

  //

  //   assert.sameMembers(actual, expected)

  // })

  //

  // it('can get all users in role by scope', function () {

  //   Roles.createRoleAsync('admin')

  //   Roles.createRoleAsync('user')

  //

  //   Roles.addUsersToRolesAsync([users.eve, users.joe], ['admin', 'user'], 'scope1')

  //   Roles.addUsersToRolesAsync([users.bob, users.joe], ['admin'], 'scope2')

  //

  //   let expected = [users.eve, users.joe]

  //   let actual = Roles.getUsersInRole('admin', 'scope1').fetch().map(r => r._id)

  //

  //   assert.sameMembers(actual, expected)

  //

  //   expected = [users.eve, users.joe]

  //   actual = Roles.getUsersInRole('admin', { scope: 'scope1' }).fetch().map(r => r._id)

  //   assert.sameMembers(actual, expected)

  //

  //   expected = [users.eve, users.bob, users.joe]

  //   actual = Roles.getUsersInRole('admin', { anyScope: true }).fetch().map(r => r._id)

  //   assert.sameMembers(actual, expected)

  //

  //   actual = Roles.getUsersInRole('admin').fetch().map(r => r._id)

  //   assert.sameMembers(actual, [])

  // })

  //

  // it('can get all users in role by scope including Roles.GLOBAL_SCOPE', function () {

  //   Roles.createRoleAsync('admin')

  //   Roles.createRoleAsync('user')

  //

  //   Roles.addUsersToRolesAsync([users.eve], ['admin', 'user'], Roles.GLOBAL_SCOPE)

  //   Roles.addUsersToRolesAsync([users.bob, users.joe], ['admin'], 'scope2')

  //

  //   let expected = [users.eve]

  //   let actual = Roles.getUsersInRole('admin', 'scope1').fetch().map(r => r._id)

  //

  //   assert.sameMembers(actual, expected)

  //

  //   expected = [users.eve, users.bob, users.joe]

  //   actual = Roles.getUsersInRole('admin', 'scope2').fetch().map(r => r._id)

  //

  //   assert.sameMembers(actual, expected)

  //

  //   expected = [users.eve]

  //   actual = Roles.getUsersInRole('admin').fetch().map(r => r._id)

  //

  //   assert.sameMembers(actual, expected)

  //

  //   expected = [users.eve, users.bob, users.joe]

  //   actual = Roles.getUsersInRole('admin', { anyScope: true }).fetch().map(r => r._id)

  //

  //   assert.sameMembers(actual, expected)

  // })

  //

  // it('can get all users in role by scope excluding Roles.GLOBAL_SCOPE', function () {

  //   Roles.createRoleAsync('admin')

  //

  //   Roles.addUsersToRolesAsync([users.eve], ['admin'], Roles.GLOBAL_SCOPE)

  //   Roles.addUsersToRolesAsync([users.bob], ['admin'], 'scope1')

  //

  //   let expected = [users.eve]

  //   let actual = Roles.getUsersInRole('admin').fetch().map(r => r._id)

  //   assert.sameMembers(actual, expected)

  //

  //   expected = [users.eve, users.bob]

  //   actual = Roles.getUsersInRole('admin', { scope: 'scope1' }).fetch().map(r => r._id)

  //   assert.sameMembers(actual, expected)

  //

  //   expected = [users.bob]

  //   actual = Roles.getUsersInRole('admin', { scope: 'scope1', onlyScoped: true }).fetch().map(r => r._id)

  //   assert.sameMembers(actual, expected)

  // })



  it('can get all users in role by scope and passes through mongo query arguments', async function () {

    await Roles.createRoleAsync('admin')

    await Roles.createRoleAsync('user')



    await Roles.addUsersToRolesAsync([users.eve, users.joe], ['admin', 'user'], 'scope1')

    await Roles.addUsersToRolesAsync([users.bob, users.joe], ['admin'], 'scope2')



    const results = await Roles.getUsersInRole('admin', 'scope1', { fields: { username: 0 }, limit: 1 }).fetch()

  // it('can use Roles.GLOBAL_SCOPE to assign blanket roles', function () {

  //   Roles.createRoleAsync('admin')

  //

  //   Roles.addUsersToRolesAsync([users.joe, users.bob], ['admin'], Roles.GLOBAL_SCOPE)

  //

  //   testUser('eve', [], 'scope1')

  //   testUser('joe', ['admin'], 'scope2')

  //   testUser('joe', ['admin'], 'scope1')

  //   testUser('bob', ['admin'], 'scope2')

  //   testUser('bob', ['admin'], 'scope1')

  //

  //   Roles.removeUsersFromRolesAsync(users.joe, ['admin'], Roles.GLOBAL_SCOPE)

  //

  //   testUser('eve', [], 'scope1')

  //   testUser('joe', [], 'scope2')

  //   testUser('joe', [], 'scope1')

  //   testUser('bob', ['admin'], 'scope2')

  //   testUser('bob', ['admin'], 'scope1')

  // })

  //

  // it('Roles.GLOBAL_SCOPE is independent of other scopes', function () {

  //   Roles.createRoleAsync('admin')

  //

  //   Roles.addUsersToRolesAsync([users.joe, users.bob], ['admin'], 'scope5')

  //   Roles.addUsersToRolesAsync([users.joe, users.bob], ['admin'], Roles.GLOBAL_SCOPE)

  //

  //   testUser('eve', [], 'scope1')

  //   testUser('joe', ['admin'], 'scope5')

  //   testUser('joe', ['admin'], 'scope2')

  //   testUser('joe', ['admin'], 'scope1')

  //   testUser('bob', ['admin'], 'scope5')

  //   testUser('bob', ['admin'], 'scope2')

  //   testUser('bob', ['admin'], 'scope1')

  //

  //   Roles.removeUsersFromRolesAsync(users.joe, ['admin'], Roles.GLOBAL_SCOPE)

  //

  //   testUser('eve', [], 'scope1')

  //   testUser('joe', ['admin'], 'scope5')

  //   testUser('joe', [], 'scope2')

  //   testUser('joe', [], 'scope1')

  //   testUser('bob', ['admin'], 'scope5')

  //   testUser('bob', ['admin'], 'scope2')

  //   testUser('bob', ['admin'], 'scope1')

  // })

  //

  // it('Roles.GLOBAL_SCOPE also checked when scope not specified', function () {

  //   Roles.createRoleAsync('admin')

  //

  //   Roles.addUsersToRolesAsync(users.joe, 'admin', Roles.GLOBAL_SCOPE)

  //

  //   testUser('joe', ['admin'])

  //

  //   Roles.removeUsersFromRolesAsync(users.joe, 'admin', Roles.GLOBAL_SCOPE)

  //

  //   testUser('joe', [])

  // })

  //

  // it('can use \'.\' in scope name', function () {

  //   Roles.createRoleAsync('admin')

  //

  //   Roles.addUsersToRolesAsync(users.joe, ['admin'], 'example.com')

  //   testUser('joe', ['admin'], 'example.com')

  // })

  //

  // it('can use multiple periods in scope name', function () {

  //   Roles.createRoleAsync('admin')

  //

  //   Roles.addUsersToRolesAsync(users.joe, ['admin'], 'example.k12.va.us')

  //   testUser('joe', ['admin'], 'example.k12.va.us')

  // })

  //

  // it('renaming of roles', function () {

  //   Roles.createRoleAsync('admin')

  //   Roles.createRoleAsync('user')

  //   Roles.createRoleAsync('editor')

  //

  //   await Roles.setUserRolesAsync([users.eve, users.bob], ['editor', 'user'], 'scope1')

  //   await Roles.setUserRolesAsync([users.bob, users.joe], ['user', 'admin'], 'scope2')

  //

  //   assert.isTrue(Roles.userIsInRoleAsync(users.eve, 'editor', 'scope1'))

  //   assert.isFalse(Roles.userIsInRoleAsync(users.eve, 'editor', 'scope2'))

  //

  //   assert.isFalse(Roles.userIsInRoleAsync(users.joe, 'admin', 'scope1'))

  //   assert.isTrue(Roles.userIsInRoleAsync(users.joe, 'admin', 'scope2'))

  //

  //   assert.isTrue(Roles.userIsInRoleAsync(users.eve, 'user', 'scope1'))

  //   assert.isTrue(Roles.userIsInRoleAsync(users.bob, 'user', 'scope1'))

  //   assert.isFalse(Roles.userIsInRoleAsync(users.joe, 'user', 'scope1'))

  //

  //   assert.isFalse(Roles.userIsInRoleAsync(users.eve, 'user', 'scope2'))

  //   assert.isTrue(Roles.userIsInRoleAsync(users.bob, 'user', 'scope2'))

  //   assert.isTrue(Roles.userIsInRoleAsync(users.joe, 'user', 'scope2'))

  //

  //   assert.isFalse(Roles.userIsInRoleAsync(users.eve, 'user2', 'scope1'))

  //   assert.isFalse(Roles.userIsInRoleAsync(users.eve, 'user2', 'scope2'))

  //

  //   Roles.renameRole('user', 'user2')

  //

  //   assert.isTrue(Roles.userIsInRoleAsync(users.eve, 'editor', 'scope1'))

  //   assert.isFalse(Roles.userIsInRoleAsync(users.eve, 'editor', 'scope2'))

  //

  //   assert.isFalse(Roles.userIsInRoleAsync(users.joe, 'admin', 'scope1'))

  //   assert.isTrue(Roles.userIsInRoleAsync(users.joe, 'admin', 'scope2'))

  //

  //   assert.isTrue(Roles.userIsInRoleAsync(users.eve, 'user2', 'scope1'))

  //   assert.isTrue(Roles.userIsInRoleAsync(users.bob, 'user2', 'scope1'))

  //   assert.isFalse(Roles.userIsInRoleAsync(users.joe, 'user2', 'scope1'))

  //

  //   assert.isFalse(Roles.userIsInRoleAsync(users.eve, 'user2', 'scope2'))

  //   assert.isTrue(Roles.userIsInRoleAsync(users.bob, 'user2', 'scope2'))

  //   assert.isTrue(Roles.userIsInRoleAsync(users.joe, 'user2', 'scope2'))

  //

  //   assert.isFalse(Roles.userIsInRoleAsync(users.eve, 'user', 'scope1'))

  //   assert.isFalse(Roles.userIsInRoleAsync(users.eve, 'user', 'scope2'))

  // })

  //

  // it('migration without global groups (to v2)', function () {

  //   assert.isOk(Meteor.roles.insert({ name: 'admin' }))

  //   assert.isOk(Meteor.roles.insert({ name: 'editor' }))

  //   assert.isOk(Meteor.roles.insert({ name: 'user' }))

  //

  //   assert.isOk(Meteor.users.update(users.eve, { $set: { roles: ['admin', 'editor'] } }))

  //   assert.isOk(Meteor.users.update(users.bob, { $set: { roles: [] } }))

  //   assert.isOk(Meteor.users.update(users.joe, { $set: { roles: ['user'] } }))

  //

  //   Roles._forwardMigrate()

  //

  //   assert.deepEqual(Meteor.users.findOneAsync(users.eve, { fields: { roles: 1, _id: 0 } }), {

  //     roles: [{

  //       _id: 'admin',

  //       scope: null,

  //       assigned: true

  //     }, {

  //       _id: 'editor',

  //       scope: null,

  //       assigned: true

  //     }]

  //   })

  //   assert.deepEqual(Meteor.users.findOneAsync(users.bob, { fields: { roles: 1, _id: 0 } }), {

  //     roles: []

  //   })

  //   assert.deepEqual(Meteor.users.findOneAsync(users.joe, { fields: { roles: 1, _id: 0 } }), {

  //     roles: [{

  //       _id: 'user',

  //       scope: null,

  //       assigned: true

  //     }]

  //   })

  //

  //   assert.deepEqual(Meteor.roles.findOne({ _id: 'admin' }), {

  //     _id: 'admin',

  //     children: []

  //   })

  //   assert.deepEqual(Meteor.roles.findOne({ _id: 'editor' }), {

  //     _id: 'editor',

  //     children: []

  //   })

  //   assert.deepEqual(Meteor.roles.findOne({ _id: 'user' }), {

  //     _id: 'user',

  //     children: []

  //   })

  //

  //   Roles._backwardMigrate(null, null, false)

  //

  //   assert.deepEqual(Meteor.users.findOneAsync(users.eve, { fields: { roles: 1, _id: 0 } }), {

  //     roles: ['admin', 'editor']

  //   })

  //   assert.deepEqual(Meteor.users.findOneAsync(users.bob, { fields: { roles: 1, _id: 0 } }), {

  //     roles: []

  //   })

  //   assert.deepEqual(Meteor.users.findOneAsync(users.joe, { fields: { roles: 1, _id: 0 } }), {

  //     roles: ['user']

  //   })

  //

  //   assert.deepEqual(Meteor.roles.findOne({ name: 'admin' }, { fields: { _id: 0 } }), {

  //     name: 'admin'

  //   })

  //   assert.deepEqual(Meteor.roles.findOne({ name: 'editor' }, { fields: { _id: 0 } }), {

  //     name: 'editor'

  //   })

  //   assert.deepEqual(Meteor.roles.findOne({ name: 'user' }, { fields: { _id: 0 } }), {

  //     name: 'user'

  //   })

  // })

  //

  // it('migration without global groups (to v3)')

  //

  // it('migration with global groups (to v2)', function () {

  //   assert.isOk(Meteor.roles.insert({ name: 'admin' }))

  //   assert.isOk(Meteor.roles.insert({ name: 'editor' }))

  //   assert.isOk(Meteor.roles.insert({ name: 'user' }))

  //

  //   assert.isOk(Meteor.users.update(users.eve, { $set: { roles: { __global_roles__: ['admin', 'editor'], foo_bla: ['user'] } } }))

  //   assert.isOk(Meteor.users.update(users.bob, { $set: { roles: { } } }))

  //   assert.isOk(Meteor.users.update(users.joe, { $set: { roles: { __global_roles__: ['user'], foo_bla: ['user'] } } }))

  //

  //   Roles._forwardMigrate(null, null, false)

  //

  //   assert.deepEqual(Meteor.users.findOneAsync(users.eve, { fields: { roles: 1, _id: 0 } }), {

  //     roles: [{

  //       _id: 'admin',

  //       scope: null,

  //       assigned: true

  //     }, {

  //       _id: 'editor',

  //       scope: null,

  //       assigned: true

  //     }, {

  //       _id: 'user',

  //       scope: 'foo_bla',

  //       assigned: true

  //     }]

  //   })

  //   assert.deepEqual(Meteor.users.findOneAsync(users.bob, { fields: { roles: 1, _id: 0 } }), {

  //     roles: []

  //   })

  //   assert.deepEqual(Meteor.users.findOneAsync(users.joe, { fields: { roles: 1, _id: 0 } }), {

  //     roles: [{

  //       _id: 'user',

  //       scope: null,

  //       assigned: true

  //     }, {

  //       _id: 'user',

  //       scope: 'foo_bla',

  //       assigned: true

  //     }]

  //   })

  //

  //   assert.deepEqual(Meteor.roles.findOne({ _id: 'admin' }), {

  //     _id: 'admin',

  //     children: []

  //   })

  //   assert.deepEqual(Meteor.roles.findOne({ _id: 'editor' }), {

  //     _id: 'editor',

  //     children: []

  //   })

  //   assert.deepEqual(Meteor.roles.findOne({ _id: 'user' }), {

  //     _id: 'user',

  //     children: []

  //   })

  //

  //   Roles._backwardMigrate(null, null, true)

  //

  //   assert.deepEqual(Meteor.users.findOneAsync(users.eve, { fields: { roles: 1, _id: 0 } }), {

  //     roles: {

  //       __global_roles__: ['admin', 'editor'],

  //       foo_bla: ['user']

  //     }

  //   })

  //   assert.deepEqual(Meteor.users.findOneAsync(users.bob, { fields: { roles: 1, _id: 0 } }), {

  //     roles: {}

  //   })

  //   assert.deepEqual(Meteor.users.findOneAsync(users.joe, { fields: { roles: 1, _id: 0 } }), {

  //     roles: {

  //       __global_roles__: ['user'],

  //       foo_bla: ['user']

  //     }

  //   })

  //

  //   assert.deepEqual(Meteor.roles.findOne({ name: 'admin' }, { fields: { _id: 0 } }), {

  //     name: 'admin'

  //   })

  //   assert.deepEqual(Meteor.roles.findOne({ name: 'editor' }, { fields: { _id: 0 } }), {

  //     name: 'editor'

  //   })

  //   assert.deepEqual(Meteor.roles.findOne({ name: 'user' }, { fields: { _id: 0 } }), {

  //     name: 'user'

  //   })

  //

  //   Roles._forwardMigrate(null, null, true)

  //

  //   assert.deepEqual(Meteor.users.findOneAsync(users.eve, { fields: { roles: 1, _id: 0 } }), {

  //     roles: [{

  //       _id: 'admin',

  //       scope: null,

  //       assigned: true

  //     }, {

  //       _id: 'editor',

  //       scope: null,

  //       assigned: true

  //     }, {

  //       _id: 'user',

  //       scope: 'foo.bla',

  //       assigned: true

  //     }]

  //   })

  //   assert.deepEqual(Meteor.users.findOneAsync(users.bob, { fields: { roles: 1, _id: 0 } }), {

  //     roles: []

  //   })

  //   assert.deepEqual(Meteor.users.findOneAsync(users.joe, { fields: { roles: 1, _id: 0 } }), {

  //     roles: [{

  //       _id: 'user',

  //       scope: null,

  //       assigned: true

  //     }, {

  //       _id: 'user',

  //       scope: 'foo.bla',

  //       assigned: true

  //     }]

  //   })

  //

  //   assert.deepEqual(Meteor.roles.findOne({ _id: 'admin' }), {

  //     _id: 'admin',

  //     children: []

  //   })

  //   assert.deepEqual(Meteor.roles.findOne({ _id: 'editor' }), {

  //     _id: 'editor',

  //     children: []

  //   })

  //   assert.deepEqual(Meteor.roles.findOne({ _id: 'user' }), {

  //     _id: 'user',

  //     children: []

  //   })

  // })

  //

  // it('migration with global groups (to v3)')

  //

  // it('_addUserToRole', function () {

  //   Roles.createRoleAsync('admin')

  //

  //   assert.sameDeepMembers(await Roles.getRolesForUserAsync(users.eve, { anyScope: true, fullObjects: true }).map(obj => { delete obj._id; return obj }), [])

  //

  //   assert.include(

  //     Object.keys(Roles._addUserToRole(users.eve, 'admin', { scope: null, ifExists: false })),

  //     'insertedId'

  //   )

  //

  //   assert.sameDeepMembers(await Roles.getRolesForUserAsync(users.eve, { anyScope: true, fullObjects: true }).map(obj => { delete obj._id; return obj }), [{

  //     role: { _id: 'admin' },

  //     scope: null,

  //     user: { _id: users.eve },

  //     inheritedRoles: [{ _id: 'admin' }]

  //   }])

  //

  //   assert.notInclude(

  //     Object.keys(Roles._addUserToRole(users.eve, 'admin', { scope: null, ifExists: false })),

  //     'insertedId'

  //   )

  //

  //   assert.sameDeepMembers(await Roles.getRolesForUserAsync(users.eve, { anyScope: true, fullObjects: true }).map(obj => { delete obj._id; return obj }), [{

  //     role: { _id: 'admin' },

  //     scope: null,

  //     user: { _id: users.eve },

  //     inheritedRoles: [{ _id: 'admin' }]

  //   }])

  // })

  //

  // it('_removeUserFromRole', function () {

  //   Roles.createRoleAsync('admin')

  //

  //   Roles.addUsersToRolesAsync(users.eve, 'admin')

  //

  //   assert.sameDeepMembers(await Roles.getRolesForUserAsync(users.eve, { anyScope: true, fullObjects: true }).map(obj => { delete obj._id; return obj }), [{

  //     role: { _id: 'admin' },

  //     scope: null,

  //     user: { _id: users.eve },

  //     inheritedRoles: [{ _id: 'admin' }]

  //   }])

  //

  //   Roles._removeUserFromRole(users.eve, 'admin', { scope: null })

  //

  //   assert.sameDeepMembers(await Roles.getRolesForUserAsync(users.eve, { anyScope: true, fullObjects: true }).map(obj => { delete obj._id; return obj }), [])

  // })

  //

  // it('keep assigned roles', function () {

  //   Roles.createRoleAsync('admin')

  //   Roles.createRoleAsync('user')

  //   Roles.createRoleAsync('ALL_PERMISSIONS')

  //   Roles.createRoleAsync('VIEW_PERMISSION')

  //   Roles.createRoleAsync('EDIT_PERMISSION')

  //   Roles.createRoleAsync('DELETE_PERMISSION')

  //   Roles.addRolesToParent('ALL_PERMISSIONS', 'user')

  //   Roles.addRolesToParent('EDIT_PERMISSION', 'ALL_PERMISSIONS')

  //   Roles.addRolesToParent('VIEW_PERMISSION', 'ALL_PERMISSIONS')

  //   Roles.addRolesToParent('DELETE_PERMISSION', 'admin')

  //

  //   Roles.addUsersToRolesAsync(users.eve, ['user'])

  //

  //   assert.isTrue(Roles.userIsInRoleAsync(users.eve, 'VIEW_PERMISSION'))

  //

  //   assert.sameDeepMembers(await Roles.getRolesForUserAsync(users.eve, { anyScope: true, fullObjects: true }).map(obj => { delete obj._id; return obj }), [{

  //     role: { _id: 'user' },

  //     scope: null,

  //     user: { _id: users.eve },

  //     inheritedRoles: [

  //       { _id: 'user' },

  //       { _id: 'ALL_PERMISSIONS' },

  //       { _id: 'EDIT_PERMISSION' },

  //       { _id: 'VIEW_PERMISSION' }

  //     ]

  //   }])

  //

  //   Roles.addUsersToRolesAsync(users.eve, 'VIEW_PERMISSION')

  //

  //   assert.isTrue(Roles.userIsInRoleAsync(users.eve, 'VIEW_PERMISSION'))

  //

  //   assert.sameDeepMembers(await Roles.getRolesForUserAsync(users.eve, { anyScope: true, fullObjects: true }).map(obj => { delete obj._id; return obj }), [{

  //     role: { _id: 'user' },

  //     scope: null,

  //     user: { _id: users.eve },

  //     inheritedRoles: [

  //       { _id: 'user' },

  //       { _id: 'ALL_PERMISSIONS' },

  //       { _id: 'EDIT_PERMISSION' },

  //       { _id: 'VIEW_PERMISSION' }

  //     ]

  //   }, {

  //     role: { _id: 'VIEW_PERMISSION' },

  //     scope: null,

  //     user: { _id: users.eve },

  //     inheritedRoles: [

  //       { _id: 'VIEW_PERMISSION' }

  //     ]

  //   }])

  //

  //   Roles.removeUsersFromRolesAsync(users.eve, 'user')

  //

  //   assert.isTrue(Roles.userIsInRoleAsync(users.eve, 'VIEW_PERMISSION'))

  //

  //   assert.sameDeepMembers(await Roles.getRolesForUserAsync(users.eve, { anyScope: true, fullObjects: true }).map(obj => { delete obj._id; return obj }), [{

  //     role: { _id: 'VIEW_PERMISSION' },

  //     scope: null,

  //     user: { _id: users.eve },

  //     inheritedRoles: [

  //       { _id: 'VIEW_PERMISSION' }

  //     ]

  //   }])

  //

  //   Roles.removeUsersFromRolesAsync(users.eve, 'VIEW_PERMISSION')

  //

  //   assert.isFalse(Roles.userIsInRoleAsync(users.eve, 'VIEW_PERMISSION'))

  //

  //   assert.sameDeepMembers(await Roles.getRolesForUserAsync(users.eve, { anyScope: true, fullObjects: true }).map(obj => { delete obj._id; return obj }), [])

  // })

  //

  // it('adds children of the added role to the assignments', function () {

  //   Roles.createRoleAsync('admin')

  //   Roles.createRoleAsync('ALBUM.ADMIN')

  //   Roles.createRoleAsync('ALBUM.VIEW')

  //   Roles.createRoleAsync('TRACK.ADMIN')

  //   Roles.createRoleAsync('TRACK.VIEW')

  //

  //   Roles.addRolesToParent('ALBUM.VIEW', 'ALBUM.ADMIN')

  //   Roles.addRolesToParent('TRACK.VIEW', 'TRACK.ADMIN')

  //

  //   Roles.addRolesToParent('ALBUM.ADMIN', 'admin')

  //

  //   Roles.addUsersToRolesAsync(users.eve, ['admin'])

  //

  //   assert.isFalse(Roles.userIsInRoleAsync(users.eve, 'TRACK.VIEW'))

  //

  //   Roles.addRolesToParent('TRACK.ADMIN', 'admin')

  //

  //   assert.isTrue(Roles.userIsInRoleAsync(users.eve, 'TRACK.VIEW'))

  // })

  //

  // it('removes children of the removed role from the assignments', function () {

  //   Roles.createRoleAsync('admin')

  //   Roles.createRoleAsync('ALBUM.ADMIN')

  //   Roles.createRoleAsync('ALBUM.VIEW')

  //   Roles.createRoleAsync('TRACK.ADMIN')

  //   Roles.createRoleAsync('TRACK.VIEW')

  //

  //   Roles.addRolesToParent('ALBUM.VIEW', 'ALBUM.ADMIN')

  //   Roles.addRolesToParent('TRACK.VIEW', 'TRACK.ADMIN')

  //

  //   Roles.addRolesToParent('ALBUM.ADMIN', 'admin')

  //   Roles.addRolesToParent('TRACK.ADMIN', 'admin')

  //

  //   Roles.addUsersToRolesAsync(users.eve, ['admin'])

  //

  //   assert.isTrue(Roles.userIsInRoleAsync(users.eve, 'TRACK.VIEW'))

  //

  //   Roles.removeRolesFromParent('TRACK.ADMIN', 'admin')

  //

  //   assert.isFalse(Roles.userIsInRoleAsync(users.eve, 'TRACK.VIEW'))

  // })

  //

  // it('modify assigned hierarchical roles', function () {

  //   Roles.createRoleAsync('admin')

  //   Roles.createRoleAsync('user')

  //   Roles.createRoleAsync('ALL_PERMISSIONS')

  //   Roles.createRoleAsync('VIEW_PERMISSION')

  //   Roles.createRoleAsync('EDIT_PERMISSION')

  //   Roles.createRoleAsync('DELETE_PERMISSION')

  //   Roles.addRolesToParent('ALL_PERMISSIONS', 'user')

  //   Roles.addRolesToParent('EDIT_PERMISSION', 'ALL_PERMISSIONS')

  //   Roles.addRolesToParent('VIEW_PERMISSION', 'ALL_PERMISSIONS')

  //   Roles.addRolesToParent('DELETE_PERMISSION', 'admin')

  //

  //   Roles.addUsersToRolesAsync(users.eve, ['user'])

  //   Roles.addUsersToRolesAsync(users.eve, ['ALL_PERMISSIONS'], 'scope')

  //

  //   assert.isFalse(Roles.userIsInRoleAsync(users.eve, 'MODERATE_PERMISSION'))

  //   assert.isFalse(Roles.userIsInRoleAsync(users.eve, 'MODERATE_PERMISSION', 'scope'))

  //

  //   assert.sameDeepMembers(await Roles.getRolesForUserAsync(users.eve, { anyScope: true, fullObjects: true }).map(obj => { delete obj._id; return obj }), [{

  //     role: { _id: 'user' },

  //     scope: null,

  //     user: { _id: users.eve },

  //     inheritedRoles: [

  //       { _id: 'user' },

  //       { _id: 'ALL_PERMISSIONS' },

  //       { _id: 'EDIT_PERMISSION' },

  //       { _id: 'VIEW_PERMISSION' }

  //     ]

  //   }, {

  //     role: { _id: 'ALL_PERMISSIONS' },

  //     scope: 'scope',

  //     user: { _id: users.eve },

  //     inheritedRoles: [

  //       { _id: 'ALL_PERMISSIONS' },

  //       { _id: 'EDIT_PERMISSION' },

  //       { _id: 'VIEW_PERMISSION' }

  //     ]

  //   }])

  //

  //   Roles.createRoleAsync('MODERATE_PERMISSION')

  //

  //   Roles.addRolesToParent('MODERATE_PERMISSION', 'ALL_PERMISSIONS')

  //

  //   assert.isTrue(Roles.userIsInRoleAsync(users.eve, 'MODERATE_PERMISSION'))

  //   assert.isTrue(Roles.userIsInRoleAsync(users.eve, 'MODERATE_PERMISSION', 'scope'))

  //

  //   assert.sameDeepMembers(await Roles.getRolesForUserAsync(users.eve, { anyScope: true, fullObjects: true }).map(obj => { delete obj._id; return obj }), [{

  //     role: { _id: 'user' },

  //     scope: null,

  //     user: { _id: users.eve },

  //     inheritedRoles: [

  //       { _id: 'user' },

  //       { _id: 'ALL_PERMISSIONS' },

  //       { _id: 'EDIT_PERMISSION' },

  //       { _id: 'VIEW_PERMISSION' },

  //       { _id: 'MODERATE_PERMISSION' }

  //     ]

  //   }, {

  //     role: { _id: 'ALL_PERMISSIONS' },

  //     scope: 'scope',

  //     user: { _id: users.eve },

  //     inheritedRoles: [

  //       { _id: 'ALL_PERMISSIONS' },

  //       { _id: 'EDIT_PERMISSION' },

  //       { _id: 'VIEW_PERMISSION' },

  //       { _id: 'MODERATE_PERMISSION' }

  //     ]

  //   }])

  //

  //   Roles.addUsersToRolesAsync(users.eve, ['admin'])

  //

  //   assert.isTrue(Roles.userIsInRoleAsync(users.eve, 'DELETE_PERMISSION'))

  //   assert.isTrue(Roles.userIsInRoleAsync(users.eve, 'DELETE_PERMISSION', 'scope'))

  //

  //   assert.sameDeepMembers(await Roles.getRolesForUserAsync(users.eve, { anyScope: true, fullObjects: true }).map(obj => { delete obj._id; return obj }), [{

  //     role: { _id: 'user' },

  //     scope: null,

  //     user: { _id: users.eve },

  //     inheritedRoles: [

  //       { _id: 'user' },

  //       { _id: 'ALL_PERMISSIONS' },

  //       { _id: 'EDIT_PERMISSION' },

  //       { _id: 'VIEW_PERMISSION' },

  //       { _id: 'MODERATE_PERMISSION' }

  //     ]

  //   }, {

  //     role: { _id: 'ALL_PERMISSIONS' },

  //     scope: 'scope',

  //     user: { _id: users.eve },

  //     inheritedRoles: [

  //       { _id: 'ALL_PERMISSIONS' },

  //       { _id: 'EDIT_PERMISSION' },

  //       { _id: 'VIEW_PERMISSION' },

  //       { _id: 'MODERATE_PERMISSION' }

  //     ]

  //   }, {

  //     role: { _id: 'admin' },

  //     scope: null,

  //     user: { _id: users.eve },

  //     inheritedRoles: [

  //       { _id: 'admin' },

  //       { _id: 'DELETE_PERMISSION' }

  //     ]

  //   }])

  //

  //   Roles.addRolesToParent('DELETE_PERMISSION', 'ALL_PERMISSIONS')

  //

  //   assert.isTrue(Roles.userIsInRoleAsync(users.eve, 'DELETE_PERMISSION'))

  //   assert.isTrue(Roles.userIsInRoleAsync(users.eve, 'DELETE_PERMISSION', 'scope'))

  //

  //   assert.sameDeepMembers(await Roles.getRolesForUserAsync(users.eve, { anyScope: true, fullObjects: true }).map(obj => { delete obj._id; return obj }), [{

  //     role: { _id: 'user' },

  //     scope: null,

  //     user: { _id: users.eve },

  //     inheritedRoles: [

  //       { _id: 'user' },

  //       { _id: 'ALL_PERMISSIONS' },

  //       { _id: 'EDIT_PERMISSION' },

  //       { _id: 'VIEW_PERMISSION' },

  //       { _id: 'MODERATE_PERMISSION' },

  //       { _id: 'DELETE_PERMISSION' }

  //     ]

  //   }, {

  //     role: { _id: 'ALL_PERMISSIONS' },

  //     scope: 'scope',

  //     user: { _id: users.eve },

  //     inheritedRoles: [

  //       { _id: 'ALL_PERMISSIONS' },

  //       { _id: 'EDIT_PERMISSION' },

  //       { _id: 'VIEW_PERMISSION' },

  //       { _id: 'MODERATE_PERMISSION' },

  //       { _id: 'DELETE_PERMISSION' }

  //     ]

  //   }, {

  //     role: { _id: 'admin' },

  //     scope: null,

  //     user: { _id: users.eve },

  //     inheritedRoles: [

  //       { _id: 'admin' },

  //       { _id: 'DELETE_PERMISSION' }

  //     ]

  //   }])

  //

  //   Roles.removeUsersFromRolesAsync(users.eve, ['admin'])

  //

  //   assert.isTrue(Roles.userIsInRoleAsync(users.eve, 'DELETE_PERMISSION'))

  //   assert.isTrue(Roles.userIsInRoleAsync(users.eve, 'DELETE_PERMISSION', 'scope'))

  //

  //   assert.sameDeepMembers(await Roles.getRolesForUserAsync(users.eve, { anyScope: true, fullObjects: true }).map(obj => { delete obj._id; return obj }), [{

  //     role: { _id: 'user' },

  //     scope: null,

  //     user: { _id: users.eve },

  //     inheritedRoles: [

  //       { _id: 'user' },

  //       { _id: 'ALL_PERMISSIONS' },

  //       { _id: 'EDIT_PERMISSION' },

  //       { _id: 'VIEW_PERMISSION' },

  //       { _id: 'MODERATE_PERMISSION' },

  //       { _id: 'DELETE_PERMISSION' }

  //     ]

  //   }, {

  //     role: { _id: 'ALL_PERMISSIONS' },

  //     scope: 'scope',

  //     user: { _id: users.eve },

  //     inheritedRoles: [

  //       { _id: 'ALL_PERMISSIONS' },

  //       { _id: 'EDIT_PERMISSION' },

  //       { _id: 'VIEW_PERMISSION' },

  //       { _id: 'MODERATE_PERMISSION' },

  //       { _id: 'DELETE_PERMISSION' }

  //     ]

  //   }])

  //

  //   Roles.deleteRole('ALL_PERMISSIONS')

  //

  //   assert.isFalse(Roles.userIsInRoleAsync(users.eve, 'DELETE_PERMISSION'))

  //   assert.isFalse(Roles.userIsInRoleAsync(users.eve, 'DELETE_PERMISSION', 'scope'))

  //

  //   assert.isFalse(Roles.userIsInRoleAsync(users.eve, 'MODERATE_PERMISSION'))

  //   assert.isFalse(Roles.userIsInRoleAsync(users.eve, 'MODERATE_PERMISSION', 'scope'))

  //

  //   assert.sameDeepMembers(await Roles.getRolesForUserAsync(users.eve, { anyScope: true, fullObjects: true }).map(obj => { delete obj._id; return obj }), [{

  //     role: { _id: 'user' },

  //     scope: null,

  //     user: { _id: users.eve },

  //     inheritedRoles: [

  //       { _id: 'user' }

  //     ]

  //   }])

  // })

  //

  // it('delete role with overlapping hierarchical roles', function () {

  //   Roles.createRoleAsync('role1')

  //   Roles.createRoleAsync('role2')

  //   Roles.createRoleAsync('COMMON_PERMISSION_1')

  //   Roles.createRoleAsync('COMMON_PERMISSION_2')

  //   Roles.createRoleAsync('COMMON_PERMISSION_3')

  //   Roles.createRoleAsync('EXTRA_PERMISSION_ROLE_1')

  //   Roles.createRoleAsync('EXTRA_PERMISSION_ROLE_2')

  //

  //   Roles.addRolesToParent('COMMON_PERMISSION_1', 'role1')

  //   Roles.addRolesToParent('COMMON_PERMISSION_2', 'role1')

  //   Roles.addRolesToParent('COMMON_PERMISSION_3', 'role1')

  //   Roles.addRolesToParent('EXTRA_PERMISSION_ROLE_1', 'role1')

  //

  //   Roles.addRolesToParent('COMMON_PERMISSION_1', 'role2')

  //   Roles.addRolesToParent('COMMON_PERMISSION_2', 'role2')

  //   Roles.addRolesToParent('COMMON_PERMISSION_3', 'role2')

  //   Roles.addRolesToParent('EXTRA_PERMISSION_ROLE_2', 'role2')

  //

  //   Roles.addUsersToRolesAsync(users.eve, 'role1')

  //   Roles.addUsersToRolesAsync(users.eve, 'role2')

  //

  //   assert.isTrue(Roles.userIsInRoleAsync(users.eve, 'COMMON_PERMISSION_1'))

  //   assert.isTrue(Roles.userIsInRoleAsync(users.eve, 'EXTRA_PERMISSION_ROLE_1'))

  //   assert.isTrue(Roles.userIsInRoleAsync(users.eve, 'EXTRA_PERMISSION_ROLE_2'))

  //

  //   assert.sameDeepMembers(await Roles.getRolesForUserAsync(users.eve, { anyScope: true, fullObjects: true }).map(obj => { delete obj._id; return obj }), [{

  //     role: { _id: 'role1' },

  //     scope: null,

  //     user: { _id: users.eve },

  //     inheritedRoles: [

  //       { _id: 'role1' },

  //       { _id: 'COMMON_PERMISSION_1' },

  //       { _id: 'COMMON_PERMISSION_2' },

  //       { _id: 'COMMON_PERMISSION_3' },

  //       { _id: 'EXTRA_PERMISSION_ROLE_1' }

  //     ]

  //   }, {

  //     role: { _id: 'role2' },

  //     scope: null,

  //     user: { _id: users.eve },

  //     inheritedRoles: [

  //       { _id: 'role2' },

  //       { _id: 'COMMON_PERMISSION_1' },

  //       { _id: 'COMMON_PERMISSION_2' },

  //       { _id: 'COMMON_PERMISSION_3' },

  //       { _id: 'EXTRA_PERMISSION_ROLE_2' }

  //     ]

  //   }])

  //

  //   Roles.removeUsersFromRolesAsync(users.eve, 'role2')

  //

  //   assert.isTrue(Roles.userIsInRoleAsync(users.eve, 'COMMON_PERMISSION_1'))

  //   assert.isTrue(Roles.userIsInRoleAsync(users.eve, 'EXTRA_PERMISSION_ROLE_1'))

  //   assert.isFalse(Roles.userIsInRoleAsync(users.eve, 'EXTRA_PERMISSION_ROLE_2'))

  //

  //   assert.sameDeepMembers(await Roles.getRolesForUserAsync(users.eve, { anyScope: true, fullObjects: true }).map(obj => { delete obj._id; return obj }), [{

  //     role: { _id: 'role1' },

  //     scope: null,

  //     user: { _id: users.eve },

  //     inheritedRoles: [

  //       { _id: 'role1' },

  //       { _id: 'COMMON_PERMISSION_1' },

  //       { _id: 'COMMON_PERMISSION_2' },

  //       { _id: 'COMMON_PERMISSION_3' },

  //       { _id: 'EXTRA_PERMISSION_ROLE_1' }

  //     ]

  //   }])

  //

  //   Roles.addUsersToRolesAsync(users.eve, 'role2')

  //

  //   assert.isTrue(Roles.userIsInRoleAsync(users.eve, 'COMMON_PERMISSION_1'))

  //   assert.isTrue(Roles.userIsInRoleAsync(users.eve, 'EXTRA_PERMISSION_ROLE_1'))

  //   assert.isTrue(Roles.userIsInRoleAsync(users.eve, 'EXTRA_PERMISSION_ROLE_2'))

  //

  //   assert.sameDeepMembers(await Roles.getRolesForUserAsync(users.eve, { anyScope: true, fullObjects: true }).map(obj => { delete obj._id; return obj }), [{

  //     role: { _id: 'role1' },

  //     scope: null,

  //     user: { _id: users.eve },

  //     inheritedRoles: [

  //       { _id: 'role1' },

  //       { _id: 'COMMON_PERMISSION_1' },

  //       { _id: 'COMMON_PERMISSION_2' },

  //       { _id: 'COMMON_PERMISSION_3' },

  //       { _id: 'EXTRA_PERMISSION_ROLE_1' }

  //     ]

  //   }, {

  //     role: { _id: 'role2' },

  //     scope: null,

  //     user: { _id: users.eve },

  //     inheritedRoles: [

  //       { _id: 'role2' },

  //       { _id: 'COMMON_PERMISSION_1' },

  //       { _id: 'COMMON_PERMISSION_2' },

  //       { _id: 'COMMON_PERMISSION_3' },

  //       { _id: 'EXTRA_PERMISSION_ROLE_2' }

  //     ]

  //   }])

  //

  //   Roles.deleteRole('role2')

  //

  //   assert.isTrue(Roles.userIsInRoleAsync(users.eve, 'COMMON_PERMISSION_1'))

  //   assert.isTrue(Roles.userIsInRoleAsync(users.eve, 'EXTRA_PERMISSION_ROLE_1'))

  //   assert.isFalse(Roles.userIsInRoleAsync(users.eve, 'EXTRA_PERMISSION_ROLE_2'))

  //

  //   assert.sameDeepMembers(await Roles.getRolesForUserAsync(users.eve, { anyScope: true, fullObjects: true }).map(obj => { delete obj._id; return obj }), [{

  //     role: { _id: 'role1' },

  //     scope: null,

  //     user: { _id: users.eve },

  //     inheritedRoles: [

  //       { _id: 'role1' },

  //       { _id: 'COMMON_PERMISSION_1' },

  //       { _id: 'COMMON_PERMISSION_2' },

  //       { _id: 'COMMON_PERMISSION_3' },

  //       { _id: 'EXTRA_PERMISSION_ROLE_1' }

  //     ]

  //   }])

  // })

  //

  // it('set parent on assigned role', function () {

  //   Roles.createRoleAsync('admin')

  //   Roles.createRoleAsync('EDIT_PERMISSION')

  //

  //   Roles.addUsersToRolesAsync(users.eve, 'EDIT_PERMISSION')

  //

  //   assert.isTrue(Roles.userIsInRoleAsync(users.eve, 'EDIT_PERMISSION'))

  //   assert.isFalse(Roles.userIsInRoleAsync(users.eve, 'admin'))

  //

  //   assert.sameDeepMembers(await Roles.getRolesForUserAsync(users.eve, { anyScope: true, fullObjects: true }).map(obj => { delete obj._id; return obj }), [{

  //     role: { _id: 'EDIT_PERMISSION' },

  //     scope: null,

  //     user: { _id: users.eve },

  //     inheritedRoles: [{ _id: 'EDIT_PERMISSION' }]

  //   }])

  //

  //   Roles.addRolesToParent('EDIT_PERMISSION', 'admin')

  //

  //   assert.isTrue(Roles.userIsInRoleAsync(users.eve, 'EDIT_PERMISSION'))

  //   assert.isFalse(Roles.userIsInRoleAsync(users.eve, 'admin'))

  //

  //   assert.sameDeepMembers(await Roles.getRolesForUserAsync(users.eve, { anyScope: true, fullObjects: true }).map(obj => { delete obj._id; return obj }), [{

  //     role: { _id: 'EDIT_PERMISSION' },

  //     scope: null,

  //     user: { _id: users.eve },

  //     inheritedRoles: [{ _id: 'EDIT_PERMISSION' }]

  //   }])

  // })

  //

  // it('remove parent on assigned role', function () {

  //   Roles.createRoleAsync('admin')

  //   Roles.createRoleAsync('EDIT_PERMISSION')

  //

  //   Roles.addRolesToParent('EDIT_PERMISSION', 'admin')

  //

  //   Roles.addUsersToRolesAsync(users.eve, 'EDIT_PERMISSION')

  //

  //   assert.isTrue(Roles.userIsInRoleAsync(users.eve, 'EDIT_PERMISSION'))

  //   assert.isFalse(Roles.userIsInRoleAsync(users.eve, 'admin'))

  //

  //   assert.sameDeepMembers(await Roles.getRolesForUserAsync(users.eve, { anyScope: true, fullObjects: true }).map(obj => { delete obj._id; return obj }), [{

  //     role: { _id: 'EDIT_PERMISSION' },

  //     scope: null,

  //     user: { _id: users.eve },

  //     inheritedRoles: [{ _id: 'EDIT_PERMISSION' }]

  //   }])

  //

  //   Roles.removeRolesFromParent('EDIT_PERMISSION', 'admin')

  //

  //   assert.isTrue(Roles.userIsInRoleAsync(users.eve, 'EDIT_PERMISSION'))

  //   assert.isFalse(Roles.userIsInRoleAsync(users.eve, 'admin'))

  //

  //   assert.sameDeepMembers(await Roles.getRolesForUserAsync(users.eve, { anyScope: true, fullObjects: true }).map(obj => { delete obj._id; return obj }), [{

  //     role: { _id: 'EDIT_PERMISSION' },

  //     scope: null,

  //     user: { _id: users.eve },

  //     inheritedRoles: [{ _id: 'EDIT_PERMISSION' }]

  //   }])

  // })

  //

  // it('adding and removing extra role parents', function () {

  //   Roles.createRoleAsync('admin')

  //   Roles.createRoleAsync('user')

  //   Roles.createRoleAsync('EDIT_PERMISSION')

  //

  //   Roles.addRolesToParent('EDIT_PERMISSION', 'admin')

  //

  //   Roles.addUsersToRolesAsync(users.eve, 'EDIT_PERMISSION')

  //

  //   assert.isTrue(Roles.userIsInRoleAsync(users.eve, 'EDIT_PERMISSION'))

  //   assert.isFalse(Roles.userIsInRoleAsync(users.eve, 'admin'))

  //

  //   assert.sameDeepMembers(await Roles.getRolesForUserAsync(users.eve, { anyScope: true, fullObjects: true }).map(obj => { delete obj._id; return obj }), [{

  //     role: { _id: 'EDIT_PERMISSION' },

  //     scope: null,

  //     user: { _id: users.eve },

  //     inheritedRoles: [{ _id: 'EDIT_PERMISSION' }]

  //   }])

  //

  //   Roles.addRolesToParent('EDIT_PERMISSION', 'user')

  //

  //   assert.isTrue(Roles.userIsInRoleAsync(users.eve, 'EDIT_PERMISSION'))

  //   assert.isFalse(Roles.userIsInRoleAsync(users.eve, 'admin'))

  //

  //   assert.sameDeepMembers(await Roles.getRolesForUserAsync(users.eve, { anyScope: true, fullObjects: true }).map(obj => { delete obj._id; return obj }), [{

  //     role: { _id: 'EDIT_PERMISSION' },

  //     scope: null,

  //     user: { _id: users.eve },

  //     inheritedRoles: [{ _id: 'EDIT_PERMISSION' }]

  //   }])

  //

  //   Roles.removeRolesFromParent('EDIT_PERMISSION', 'user')

  //

  //   assert.isTrue(Roles.userIsInRoleAsync(users.eve, 'EDIT_PERMISSION'))

  //   assert.isFalse(Roles.userIsInRoleAsync(users.eve, 'admin'))

  //

  //   assert.sameDeepMembers(await Roles.getRolesForUserAsync(users.eve, { anyScope: true, fullObjects: true }).map(obj => { delete obj._id; return obj }), [{

  //     role: { _id: 'EDIT_PERMISSION' },

  //     scope: null,

  //     user: { _id: users.eve },

  //     inheritedRoles: [{ _id: 'EDIT_PERMISSION' }]

  //   }])

  // })

  //

  // it('cyclic roles', function () {

  //   Roles.createRoleAsync('admin')

  //   Roles.createRoleAsync('editor')

  //   Roles.createRoleAsync('user')

  //

  //   Roles.addRolesToParent('editor', 'admin')

  //   Roles.addRolesToParent('user', 'editor')

  //

  //   assert.throws(function () {

  //     Roles.addRolesToParent('admin', 'user')

  //   }, /form a cycle/)

  // })

  //

  // it('userIsInRole returns false for unknown roles', function () {

  //   Roles.createRoleAsync('admin')

  //   Roles.createRoleAsync('user')

  //   Roles.createRoleAsync('editor')

  //   Roles.addUsersToRolesAsync(users.eve, ['admin', 'user'])

  //   Roles.addUsersToRolesAsync(users.eve, ['editor'])

  //

  //   assert.isFalse(Roles.userIsInRoleAsync(users.eve, 'unknown'))

  //   assert.isFalse(Roles.userIsInRoleAsync(users.eve, []))

  //   assert.isFalse(Roles.userIsInRoleAsync(users.eve, null))

  //   assert.isFalse(Roles.userIsInRoleAsync(users.eve, undefined))

  //

  //   assert.isFalse(Roles.userIsInRoleAsync(users.eve, 'unknown', { anyScope: true }))

  //   assert.isFalse(Roles.userIsInRoleAsync(users.eve, [], { anyScope: true }))

  //   assert.isFalse(Roles.userIsInRoleAsync(users.eve, null, { anyScope: true }))

  //   assert.isFalse(Roles.userIsInRoleAsync(users.eve, undefined, { anyScope: true }))

  //

  //   assert.isFalse(Roles.userIsInRoleAsync(users.eve, ['Role1', 'Role2', undefined], 'GroupName'))

  // })

  //

  // it('userIsInRole returns false if user is a function', function () {

  //   Roles.createRoleAsync('admin')

  //   Roles.addUsersToRolesAsync(users.eve, ['admin'])

  //

  //   assert.isFalse(Roles.userIsInRoleAsync(() => {}, 'admin'))

  // })

  //

  // describe('isParentOf', function () {

  //   it('returns false for unknown roles', function () {

  //     Roles.createRoleAsync('admin')

  //

  //     assert.isFalse(Roles.isParentOf('admin', 'unknown'))

  //     assert.isFalse(Roles.isParentOf('admin', null))

  //     assert.isFalse(Roles.isParentOf('admin', undefined))

  //

  //     assert.isFalse(Roles.isParentOf('unknown', 'admin'))

  //     assert.isFalse(Roles.isParentOf(null, 'admin'))

  //     assert.isFalse(Roles.isParentOf(undefined, 'admin'))

  //   })

  //

  //   it('returns false if role is not parent of', function () {

  //     Roles.createRoleAsync('admin')

  //     Roles.createRoleAsync('editor')

  //     Roles.createRoleAsync('user')

  //     Roles.addRolesToParent(['editor'], 'admin')

  //     Roles.addRolesToParent(['user'], 'editor')

  //

  //     assert.isFalse(Roles.isParentOf('user', 'admin'))

  //     assert.isFalse(Roles.isParentOf('editor', 'admin'))

  //   })

  //

  //   it('returns true if role is parent of the demanded role', function () {

  //     Roles.createRoleAsync('admin')

  //     Roles.createRoleAsync('editor')

  //     Roles.createRoleAsync('user')

  //     Roles.addRolesToParent(['editor'], 'admin')

  //     Roles.addRolesToParent(['user'], 'editor')

  //

  //     assert.isTrue(Roles.isParentOf('admin', 'user'))

  //     assert.isTrue(Roles.isParentOf('editor', 'user'))

  //     assert.isTrue(Roles.isParentOf('admin', 'editor'))

  //

  //     assert.isTrue(Roles.isParentOf('admin', 'admin'))

  //     assert.isTrue(Roles.isParentOf('editor', 'editor'))

  //     assert.isTrue(Roles.isParentOf('user', 'user'))

  //   })

  // })
",61530
913687cbd2d76c193362fe67ede16bcbc9855e19,"const isThenable = async () => {
    try {
        const resultOrThenable = await Promise.resolve(resultOrThenable);
        return self._publishHandlerResult.bind(self)(...args);
    } catch (e) {
        self.error(e);
    }
}","    const isThenable =  

      try {

        self._publishHandlerResult(await resultOrThenable);

      } catch(e) {

        self.error(e)

      }
",122
190bae33d3b10a23e1d4276d814f7a6a71007019,"async function waitForUser() {
  const user = Meteor.user();
  await new Promise((resolve) => {
    setTimeout(() => {
      test.equal(user, { _id: Meteor.userId() });
      resolve();
    }, 100);
  });
}","      test.equal(await Meteor.userAsync(), { _id: Meteor.userId() });
",153
0fd3d09d15da7c50e93a5c04f62445370eb9e296,"async function rm_recursive() {
  try {
    await files.rm_recursive();
    console.info(""Project reset."");
  } catch (error) {
    console.error(error);
  }
}","    await files.rm_recursive_async(

    );

    Console.info(""Project reset."");

    return;
",95
0fd3d09d15da7c50e93a5c04f62445370eb9e296,"console.log(""-> allRemovePromises"", allRemovePromises);

async function removeProjects() {
  try {
    await Promise.all(allRemovePromises).then(() => {
      console.info(""Project reset."");
    });
  } catch (error) {
    console.error(error);
  }
}","  await Promise.all(allRemovePromises);

  Console.info(""Project reset."");
",178
6804b236b2a3d6c8725360243b8573495df8a0d5,"const devBundleBinCommand = process.argv[2];

async function getChildProcess() {
  const helpers = require(""./dev-bundle-bin-helpers.js"");
  try {
    const [devBundleDir, env] = await Promise.all([
      helpers.getDevBundle(),
      helpers.getEnv(),
    ]);
    const cmd = helpers.getCommand(devBundleBinCommand, devBundleDir);
    if (!cmd) return null;
    const child = require(""child_process"").spawn(cmd, process.argv.slice(3), {
      stdio: ""inherit"",
      env,
    });
    require(""./flush-buffers-on-exit-in-windows.js"");
    child.on(""error"", (error) => console.log(error.stack || error));
    child.on(""exit"", (exitCode) => process.exit(exitCode));
    return child;
  } catch (err) {
    console.log(err);
    return null;
  }
}
module.exports = getChildProcess();","const { getDevBundleDir, DEFAULT_DEV_BUNDLE_DIR } = require('./dev-bundle');

const { getEnv } = require('./dev-bundle-bin-helpers');

const devBundleBinCommand = process.argv[2];

const args = process.argv.slice(3);

async function getChildProcess({ isFirstTry }) {

  const helpers = require(""./dev-bundle-bin-helpers"");

  const [devBundleDir, env] = await Promise.all([

    getDevBundleDir(),

    getEnv()

  ]);

  if (isFirstTry && devBundleDir === DEFAULT_DEV_BUNDLE_DIR) {

    return null

  }

  const cmd = helpers.getCommand(devBundleBinCommand, devBundleDir);

  if (!cmd) {

    return null;

  }

  const child = require(""child_process"").spawn(cmd, args, {

    stdio: ""inherit"",

    env: env

  require(""./flush-buffers-on-exit-in-windows"");

  child.on(""error"", function (error) {

    console.log(error.stack || error);

  });

  child.on(""exit"", function (exitCode) {

    process.exit(exitCode);

  });

  return child;

module.exports = {

  getChildProcess

}
",458
6804b236b2a3d6c8725360243b8573495df8a0d5,"exports.getEnv = async function (options) {
  var devBundle = options && options.devBundle;
  var devBundlePromise = typeof devBundle === ""string"" ? Promise.resolve(convertToOSPath(devBundle)) : getDevBundle();
  
  try {
    const devBundleDir = await devBundlePromise;
    const paths = [
      path.join(devBundleDir, ""bin""),
      path.dirname(devBundleDir),
      path.join(devBundleDir, ""lib"", ""node_modules"", "".bin"")
    ];
  
    var env = Object.create(process.env);
    
    // Make sure notifications to update npm aren't presented to the user.
    env.NO_UPDATE_NOTIFIER = true;
    
    // Make sure `meteor npm install --global ...` installs into dev_bundle/lib/node_modules by default.
    if (!env.NPM_CONFIG_PREFIX) {
      env.NPM_CONFIG_PREFIX = devBundleDir;
    }
  
    if (env.METEOR_ALLOW_SUPERUSER) {
      // Note that env.METEOR_ALLOW_SUPERUSER could be ""0"" or ""false"", which should propagate falsy semantics to NPM_CONFIG_UNSAFE_PERM.
      env.NPM_CONFIG_UNSAFE_PERM = env.METEOR_ALLOW_SUPERUSER;
    }
  
    // This allows node-gyp to find Node headers and libraries in dev_bundle/include/node.
    env.NPM_CONFIG_NODEDIR = devBundleDir;
  
    const PATH = env.PATH || env.Path;
    if (PATH) {
      paths.push(PATH);
    }
  
    env.PATH = paths.join(path.delimiter);
  
    if (process.platform === ""win32"") {
      return addWindowsVariables(devBundleDir, env);
    }
  
    return env;
  } catch (error) {
    console.log(""Error:"", error);
  }
};

var cachedMSVSVersion;","async function getEnv(options) {

  const devBundle = options && options.devBundle;

  /**

   * @type string

   */

  const devBundleDir = typeof devBundle === ""string""

    ? await convertToOSPath(devBundle)

    : await getDevBundleDir();

  const paths = [

    // When npm looks for node, it must find dev_bundle/bin/node.

    path.join(devBundleDir, ""bin""),

    // When npm looks for meteor, it should find dev_bundle/../meteor.

    path.dirname(devBundleDir),

    // Also make available any scripts installed by packages in

    // dev_bundle/lib/node_modules, such as node-gyp.

    path.join(devBundleDir, ""lib"", ""node_modules"", "".bin"")

  ];

  const env = Object.create(process.env);

  env.NO_UPDATE_NOTIFIER = true;

  if (!env.NPM_CONFIG_PREFIX) {

    env.NPM_CONFIG_PREFIX = devBundleDir;

  }

  if (env.METEOR_ALLOW_SUPERUSER) {

    // Note that env.METEOR_ALLOW_SUPERUSER could be ""0"" or ""false"", which

    // should propagate falsy semantics to NPM_CONFIG_UNSAFE_PERM.

    env.NPM_CONFIG_UNSAFE_PERM = env.METEOR_ALLOW_SUPERUSER;

  }

  env.NPM_CONFIG_NODEDIR = devBundleDir;

  const PATH = env.PATH || env.Path;



  if (PATH) {

    paths.push(PATH);

  }

  env.PATH = paths.join(path.delimiter);

  if (process.platform === ""win32"") {

    return addWindowsVariables(devBundleDir, env);

  }

  return env;

}

let cachedMSVSVersion;
",703
6804b236b2a3d6c8725360243b8573495df8a0d5,"var fs = require(""fs"");

var path = require(""path"");

var links = require(""./dev-bundle-links.js"");

var rootDir = path.resolve(__dirname, "".."", "".."");

var defaultDevBundlePromise = Promise.resolve(path.join(rootDir, ""dev_bundle""));

async function getDevBundleDir() {
  try {
    var releaseFile = find(function (file) {
      return fs.statSync(file).isFile();
    });
    if (!releaseFile) {
      return defaultDevBundlePromise;
    }
    var localDir = path.join(path.dirname(releaseFile), ""local"");
    var devBundleLink = path.join(localDir, ""dev_bundle"");
    var devBundleStat = statOrNull(devBundleLink);
    if (devBundleStat && devBundleStat.isDirectory()) {
      links.makeLink(devBundleLink, devBundleLink);
      return Promise.resolve(devBundleLink);
    }
    var release = fs.readFileSync(releaseFile).toString();
    var parts = release.split(""@"");
    var track = parts[0];
    var version = parts.slice(1).join(""@"");
    var packageMetadataDir = find(function (dir) {
      return dir && dir.isDirectory();
    });
    if (!packageMetadataDir) {
      return defaultDevBundlePromise;
    }
    return getDevBundleForRelease(release);
  } catch (error) {
    console.error(""Error getting dev bundle directory:"", error);
    return Promise.reject(error);
  }
}","const fs = require(""fs"");

const path = require(""path"");

const links = require(""./dev-bundle-links.js"");

const rootDir = path.resolve(__dirname, "".."", "".."");



const DEFAULT_DEV_BUNDLE_DIR = path.join(rootDir, ""dev_bundle"");



async function getDevBundleDir() {

  const releaseFile = find(

    return DEFAULT_DEV_BUNDLE_DIR;

  const localDir = path.join(path.dirname(releaseFile), ""local"");

      return DEFAULT_DEV_BUNDLE_DIR;

  const devBundleLink = path.join(localDir, ""dev_bundle"");

  const devBundleStat = statOrNull(devBundleLink);

  const release = fs.readFileSync(

    return DEFAULT_DEV_BUNDLE_DIR;

  const devBundleDir = await getDevBundleForRelease(release);

  if (devBundleDir) {

    links.makeLink(devBundleDir, devBundleLink);

    return devBundleDir;

  }



  return DEFAULT_DEV_BUNDLE_DIR;

  const parts = release.split(""@"");

  const track = parts[0];

  const version = parts.slice(1).join(""@"");

  const packageMetadataDir = find(
",753
4f975fc69603bc961e2db281929b4f0975047be1,"async function publishCursor() {
      try {
        const res = await self._publishCursorPromise();
        // mark subscription as ready
        self.ready();
      } catch (e) {
        self.error(e);
      }
    }","      try {

        await res._publishCursor(self);

      } catch (e) {

        self.error(e);

        return;

      }

      // _publishCursor only returns after the initial added callbacks have run.

      // mark subscription as ready.

      self.ready();
",190
4f975fc69603bc961e2db281929b4f0975047be1,"async function publishCursor() {
  try {
    const res = await Promise.all(
      this._publishCursorPromise.map((c) => c._publishCursor(self))
    );
    self.ready();
  } catch (e) {
    self.error(e);
  }
}","      try {

        for (const cur of res) {

          await cur._publishCursor(self);

        }

      } catch (e) {

        self.error(e);

        return;

      }

      self.ready();
",148
78abdfbbe1c5376ab6b566836ebd2d3e986e06c0,"async function() {

    try {

       const res = await object[methodName](...args);

     } catch (err) {

       reject(err);

     }

   }

  }","      (async () => {

        try {

          return await object[methodName](...args);

        } catch (e) {

          throw e;

        }

      })(),
",55
e4ab9e4360fc8cd559a6550f329340986fb00135,"private async _doValidate(resource: Uri): Promise<void> {
  try {
    const worker = await this._worker(resource);

    if (!monaco.editor.getModel(resource)) {
      return null;
    }

    const promises = [];

    const { noSyntaxValidation, noSemanticValidation, noSuggestionDiagnostics } = this._defaults.getDiagnosticsOptions();

    if (!noSyntaxValidation) {
      promises.push(worker.getSyntacticDiagnostics(resource.toString()));
    }

    if (!noSemanticValidation) {
      promises.push(worker.getSemanticDiagnostics(resource.toString()));
    }

    if (!noSuggestionDiagnostics) {
      promises.push(worker.getSuggestionDiagnostics(resource.toString()));
    }

    const diagnostics = await Promise.all(promises);

    if (diagnostics && monaco.editor.getModel(resource)) {
      const markers = diagnostics
        .reduce((p, c) => c.concat(p), [])
        .filter(d => (this._defaults.getDiagnosticsOptions().diagnosticCodesToIgnore || []).indexOf(d.code) === -1)
        .map(d => this._convertDiagnostics(resource, d));
      monaco.editor.setModelMarkers(monaco.editor.getModel(resource), this._selector, markers);
    } else {
      console.error(err);
    }
  } catch (err) {
    console.error(err);
  }
}

private _convertDiagnostics(resource: Uri, diag: ts.Diagnostic): monaco.editor.IMarkerData {
  const { lineNumber: startLineNumber, column: startColumn } = this._offsetToPosition(resource, diag.start);
  const { lineNumber: endLineNumber, column: endColumn } = this._offsetToPosition(resource, diag.start + diag.length);
  return {
    severity: monaco.MarkerSeverity.Error,
    startLineNumber,
    startColumn,
    endLineNumber,
    endColumn,
    message: diag.messageText,
  };
}","	private async _doValidate(model: monaco.editor.ITextModel): Promise<void> {

		const worker = await this._worker(model.uri);



		if (model.isDisposed()) {

			// model was disposed in the meantime

			return;

		}



		const promises: Promise<ts.Diagnostic[]>[] = [];

		const { noSyntaxValidation, noSemanticValidation, noSuggestionDiagnostics } = this._defaults.getDiagnosticsOptions();

		if (!noSyntaxValidation) {

			promises.push(worker.getSyntacticDiagnostics(model.uri.toString()));

		}

		if (!noSemanticValidation) {

			promises.push(worker.getSemanticDiagnostics(model.uri.toString()));

		}

		if (!noSuggestionDiagnostics) {

			promises.push(worker.getSuggestionDiagnostics(model.uri.toString()));

		}



		const diagnostics = await Promise.all(promises);



		if (!diagnostics || model.isDisposed()) {

			// model was disposed in the meantime

			return;

		}



		const markers = diagnostics

			.reduce((p, c) => c.concat(p), [])

			.filter(d => (this._defaults.getDiagnosticsOptions().diagnosticCodesToIgnore || []).indexOf(d.code) === -1)

			.map(d => this._convertDiagnostics(model, d));



		monaco.editor.setModelMarkers(model, this._selector, markers);

	private _convertDiagnostics(model: monaco.editor.ITextModel, diag: ts.Diagnostic): monaco.editor.IMarkerData {

		const diagStart = diag.start || 0;

		const diagLength = diag.length || 1;

		const { lineNumber: startLineNumber, column: startColumn } = model.getPositionAt(diagStart);

		const { lineNumber: endLineNumber, column: endColumn } = model.getPositionAt(diagStart + diagLength);
",731
e4ab9e4360fc8cd559a6550f329340986fb00135,"provideCompletionItems(model: monaco.editor.IReadOnlyModel, position: Position, _context: monaco.languages.CompletionContext, token: CancellationToken): Thenable<monaco.languages.CompletionList> {
  const offset = this._positionToOffset(resource, position);
  
  return async function() {
    try {
      const worker = await this._worker(resource);
      
      const info = await worker.getCompletionsAtPosition(resource.toString(), offset);
      
      if (!info) {
        return;
      }
      
      let suggestions: MyCompletionItem[] = info.entries.map(entry => {
        let range = wordRange;
        
        if (entry.replacementSpan) {
          const p1 = model.getPositionAt(entry.replacementSpan.start);
          
          const p2 = model.getPositionAt(entry.replacementSpan.start + entry.replacementSpan.length);
          
          range = new Range(p1.lineNumber, p1.column, p2.lineNumber, p2.column);
        }
        
        return {
          uri: resource,
          position: position,
          range: range,
          label: entry.name,
          insertText: entry.name,
          sortText: entry.sortText,
          kind: SuggestAdapter.convertKind(entry.kind)
        };
      });
      
      return suggestions;
    } catch (error) {
      console.log('Error occurred while getting completion items', error);
      return [];
    }
  };
}","	public async provideCompletionItems(model: monaco.editor.ITextModel, position: Position, _context: monaco.languages.CompletionContext, token: CancellationToken): Promise<monaco.languages.CompletionList | undefined> {

		const offset = model.getOffsetAt(position);

		const worker = await this._worker(resource);

		const info = await worker.getCompletionsAtPosition(resource.toString(), offset);

		if (!info || model.isDisposed()) {

			return;

		}



		const suggestions: MyCompletionItem[] = info.entries.map(entry => {

			let range = wordRange;

			if (entry.replacementSpan) {

				const p1 = model.getPositionAt(entry.replacementSpan.start);

				const p2 = model.getPositionAt(entry.replacementSpan.start + entry.replacementSpan.length);

				range = new Range(p1.lineNumber, p1.column, p2.lineNumber, p2.column);

			}

				uri: resource,

				position: position,

				range: range,

				label: entry.name,

				insertText: entry.name,

				sortText: entry.sortText,

				kind: SuggestAdapter.convertKind(entry.kind)



		return {

			suggestions

		};

	public async resolveCompletionItem(model: monaco.editor.ITextModel, _position: Position, item: monaco.languages.CompletionItem, token: CancellationToken): Promise<monaco.languages.CompletionItem> {

		const myItem = <MyCompletionItem>item;

		const offset = model.getOffsetAt(position);

		const worker = await this._worker(resource);

		const details = await worker.getCompletionEntryDetails(resource.toString(), offset, myItem.label);

		if (!details || model.isDisposed()) {

			return myItem;

		}

		return <MyCompletionItem>{

			uri: resource,

			position: position,

			label: details.name,

			kind: SuggestAdapter.convertKind(details.kind),

			detail: displayPartsToString(details.displayParts),

			documentation: {

				value: displayPartsToString(details.documentation)

		};
",1083
e4ab9e4360fc8cd559a6550f329340986fb00135,"async function provideSignatureHelp(model: monaco.editor.IReadOnlyModel, position: Position, token: CancellationToken): Promise<monaco.languages.SignatureHelpResult> {
  let resource = model.uri;

  try {
    const worker = await this._worker(resource);
    const info = await worker.getSignatureHelpItems(resource.toString(), this._positionToOffset(resource, position));

    if (!info) {
      return;
    }

    let ret: monaco.languages.SignatureHelp = {
      activeSignature: info.selectedItemIndex,
      activeParameter: info.argumentIndex,
      signatures: []
    };

    info.items.forEach(item => {
      let signature: monaco.languages.SignatureInformation = {
        label: '',
        parameters: []
      };

      signature.documentation = displayPartsToString(item.documentation);

      signature.label += displayPartsToString(item.prefixDisplayParts);

      item.parameters.forEach((p, i, a) => {
        let label = displayPartsToString(p.displayParts);

        let parameter: monaco.languages.ParameterInformation = {
          label: label,
          documentation: displayPartsToString(p.documentation)
        };

        signature.label += label;

        signature.parameters.push(parameter);

        if (i < a.length - 1) {
          signature.label += displayPartsToString(item.separatorDisplayParts);
        }
      });

      signature.label += displayPartsToString(item.suffixDisplayParts);

      ret.signatures.push(signature);
    });

    return {
      value: ret,
      dispose() {}
    };
  } catch (err) {
    console.error(err);
  }
}","	public async provideSignatureHelp(model: monaco.editor.ITextModel, position: Position, token: CancellationToken): Promise<monaco.languages.SignatureHelpResult | undefined> {

		const resource = model.uri;

		const offset = model.getOffsetAt(position);

		const worker = await this._worker(resource);

		const info = await worker.getSignatureHelpItems(resource.toString(), offset);

		if (!info || model.isDisposed()) {

			return;

		}

		const ret: monaco.languages.SignatureHelp = {

			activeSignature: info.selectedItemIndex,

			activeParameter: info.argumentIndex,

			signatures: []

		};

		info.items.forEach(item => {

			const signature: monaco.languages.SignatureInformation = {

				label: '',

				parameters: []

			};

			signature.documentation = displayPartsToString(item.documentation);

			signature.label += displayPartsToString(item.prefixDisplayParts);

			item.parameters.forEach((p, i, a) => {

				const label = displayPartsToString(p.displayParts);

				const parameter: monaco.languages.ParameterInformation = {

					label: label,

					documentation: displayPartsToString(p.documentation)

				};

				signature.label += label;

				signature.parameters.push(parameter);

				if (i < a.length - 1) {

					signature.label += displayPartsToString(item.separatorDisplayParts);

				}

			signature.label += displayPartsToString(item.suffixDisplayParts);

			ret.signatures.push(signature);



		return {

			value: ret,

			dispose() { }

		};
",415
e4ab9e4360fc8cd559a6550f329340986fb00135,"\n',
      }, {
        value: documentation + (tags ? '\n\n' + tags : ''),
      }],
    };
  } catch (error) {
    console.log('Error in provideHover: ', error);
  }
}","	public async provideHover(model: monaco.editor.ITextModel, position: Position, token: CancellationToken): Promise<monaco.languages.Hover | undefined> {

		const resource = model.uri;

		const offset = model.getOffsetAt(position);

		const worker = await this._worker(resource);

		const info = await worker.getQuickInfoAtPosition(resource.toString(), offset);

		if (!info || model.isDisposed()) {

			return;

		}



		const documentation = displayPartsToString(info.documentation);

		const tags = info.tags ? info.tags.map(tag => {

			const label = `*@${tag.name}*`;

			if (!tag.text) {

				return label;

			return label + (tag.text.match(/\r\n|\n/g) ? ' \n' + tag.text : ` - ${tag.text}`);

		}).join('  \n\n') : '';

		const contents = displayPartsToString(info.displayParts);

		return {

			range: this._textSpanToRange(model, info.textSpan),

			contents: [{

				value: '```js\n' + contents + '\n```\n'

			}, {

				value: documentation + (tags ? '\n\n' + tags : '')

			}]

		};
",882
e4ab9e4360fc8cd559a6550f329340986fb00135,"async provideDocumentHighlights(model: monaco.editor.IReadOnlyModel, position: Position, token: CancellationToken) {
    const resource = this._worker(model);
    const entries = await worker.getOccurrencesAtPosition(resource.toString(), this._positionToOffset(resource, position));

    if (!entries) {
        return;
    }

    return entries.map((entry) => {
        return <monaco.languages.DocumentHighlight>{
            range: this._textSpanToRange(resource, entry.textSpan),
            kind: entry.isWriteAccess ? monaco.languages.DocumentHighlightKind.Write : monaco.languages.DocumentHighlightKind.Text,
        };
    });
}","	public async provideDocumentHighlights(model: monaco.editor.ITextModel, position: Position, token: CancellationToken): Promise<monaco.languages.DocumentHighlight[] | undefined> {

		const offset = model.getOffsetAt(position)

		const worker = await this._worker(resource);

		const entries = await worker.getOccurrencesAtPosition(resource.toString(), offset);

		if (!entries || model.isDisposed()) {

			return;

		}



		return entries.map(entry => {

			return <monaco.languages.DocumentHighlight>{

				range: this._textSpanToRange(model, entry.textSpan),

				kind: entry.isWriteAccess ? monaco.languages.DocumentHighlightKind.Write : monaco.languages.DocumentHighlightKind.Text

			};
",265
e4ab9e4360fc8cd559a6550f329340986fb00135,"public async provideDefinition(model: monaco.editor.IReadOnlyModel, position: Position, token: CancellationToken): Promise<monaco.languages.Definition> {
    try {
        const worker = await this._worker(resource);
        const entries = await worker.getDefinitionAtPosition(resource.toString(), this._positionToOffset(resource, position));
        if (!entries) {
            return;
        }
        const result: monaco.languages.Location[] = [];
        for (let entry of entries) {
            const uri = Uri.parse(entry.fileName);
            if (monaco.editor.getModel(uri)) {
                result.push({
                    uri: uri,
                    range: this._textSpanToRange(uri, entry.textSpan),
                });
            }
        }
        return result;
    } catch (error) {
        console.log(error);
    }
}","	public async provideDefinition(model: monaco.editor.ITextModel, position: Position, token: CancellationToken): Promise<monaco.languages.Definition | undefined> {

		const offset = model.getOffsetAt(position);

		const worker = await this._worker(resource);

		const entries = await worker.getDefinitionAtPosition(resource.toString(), offset);

		if (!entries || model.isDisposed()) {

			return;

		}



		const result: monaco.languages.Location[] = [];

		for (let entry of entries) {

			const uri = Uri.parse(entry.fileName);

			const refModel = monaco.editor.getModel(uri);

			if (refModel) {

				result.push({

					uri: uri,

					range: this._textSpanToRange(refModel, entry.textSpan)

				});

		}

		return result;
",371
e4ab9e4360fc8cd559a6550f329340986fb00135,"provideReferences(model: monaco.editor.IReadOnlyModel, position: Position, context: monaco.languages.ReferenceContext, token: CancellationToken): async Task<monaco.languages.Location[]> {

	try {

		const worker = await this._worker(resource);

		const entries = await worker.getReferencesAtPosition(resource.toString(), this._positionToOffset(resource, position));

		if (!entries) {

			return;

		}

		const result: monaco.languages.Location[] = [];

		for (let entry of entries) {

			const uri = Uri.parse(entry.fileName);

			if (monaco.editor.getModel(uri)) {

				result.push({

					uri: uri,

					range: this._textSpanToRange(uri, entry.textSpan)

				});

			}

		return result;

	} catch (error) {

		console.error(error);

	}

};","	public async provideReferences(model: monaco.editor.ITextModel, position: Position, context: monaco.languages.ReferenceContext, token: CancellationToken): Promise<monaco.languages.Location[] | undefined> {

		const offset = model.getOffsetAt(position);

		const worker = await this._worker(resource);

		const entries = await worker.getReferencesAtPosition(resource.toString(), offset);

		if (!entries || model.isDisposed()) {

			return;

		}



		const result: monaco.languages.Location[] = [];

		for (let entry of entries) {

			const uri = Uri.parse(entry.fileName);

			const refModel = monaco.editor.getModel(uri);

			if (refModel) {

				result.push({

					uri: uri,

					range: this._textSpanToRange(refModel, entry.textSpan)

				});

		}

		return result;
",229
e4ab9e4360fc8cd559a6550f329340986fb00135,"async function provideDocumentSymbols(model: monaco.editor.IReadOnlyModel, token: CancellationToken): Promise<monaco.languages.DocumentSymbol[]> {
	const worker = await this._worker(resource);
	try {
		const items = await worker.getNavigationBarItems(resource.toString());
		if (!items) return;

		const result: monaco.languages.DocumentSymbol[] = [];
		items.forEach((item) => convert(result, item));
		return result;
	} catch (err) {
		console.error(""Error getting navigation bar items:"", err);
	}
}","	public async provideDocumentSymbols(model: monaco.editor.ITextModel, token: CancellationToken): Promise<monaco.languages.DocumentSymbol[] | undefined> {

		const worker = await this._worker(resource);

		const items = await worker.getNavigationBarItems(resource.toString());

		if (!items || model.isDisposed()) {

			return;

		}

		const convert = (bucket: monaco.languages.DocumentSymbol[], item: ts.NavigationBarItem, containerLabel?: string): void => {

			let result: monaco.languages.DocumentSymbol = {

				name: item.text,

				detail: '',

				kind: <monaco.languages.SymbolKind>(outlineTypeTable[item.kind] || monaco.languages.SymbolKind.Variable),

				range: this._textSpanToRange(model, item.spans[0]),

				selectionRange: this._textSpanToRange(model, item.spans[0]),

				tags: [],

				containerName: containerLabel

			};

			if (item.childItems && item.childItems.length > 0) {

				for (let child of item.childItems) {

					convert(bucket, child, result.name);

			bucket.push(result);

		}



		let result: monaco.languages.DocumentSymbol[] = [];

		items.forEach(item => convert(result, item));

		return result;
",736
e4ab9e4360fc8cd559a6550f329340986fb00135,"protected async _convertTextChanges(uri: Uri, change: ts.TextChange): Promise<monaco.editor.ISingleEditOperation> {
	try {
		const edits = await this._worker(resource).then((worker) => {
			return worker.getFormattingEditsForRange(
				resource.toString(),
				this._positionToOffset(resource, { lineNumber: range.startLineNumber, column: range.startColumn }),
				this._positionToOffset(resource, { lineNumber: range.endLineNumber, column: range.endColumn }),
				FormatHelper._convertOptions(options)
			);
		});
		if (edits) {
			return edits.map((edit) => this._convertTextChanges(resource, edit));
		}
	} catch (error) {}
}","	protected _convertTextChanges(model: monaco.editor.ITextModel, change: ts.TextChange): monaco.languages.TextEdit {

		return {

			range: this._textSpanToRange(model, change.span)

	public async provideDocumentRangeFormattingEdits(model: monaco.editor.ITextModel, range: Range, options: monaco.languages.FormattingOptions, token: CancellationToken): Promise<monaco.languages.TextEdit[] | undefined> {

		const startOffset = model.getOffsetAt({ lineNumber: range.startLineNumber, column: range.startColumn });

		const endOffset = model.getOffsetAt({ lineNumber: range.endLineNumber, column: range.endColumn });

		const worker = await this._worker(resource);

		const edits = await worker.getFormattingEditsForRange(resource.toString(), startOffset, endOffset, FormatHelper._convertOptions(options));

		if (!edits || model.isDisposed()) {

			return;

		}



		return edits.map(edit => this._convertTextChanges(model, edit));
",579
e4ab9e4360fc8cd559a6550f329340986fb00135,"async function provideOnTypeFormattingEdits(model: monaco.editor.IReadOnlyModel, position: Position, ch: string, options: monaco.languages.FormattingOptions, token: CancellationToken): Promise<monaco.editor.ISingleEditOperation[]> {
	const worker = await this._worker(resource);
	const edits = await worker.getFormattingEditsAfterKeystroke(resource.toString(), this._positionToOffset(resource, position), ch, FormatHelper._convertOptions(options));
	if (edits) {
		return edits.map(edit => this._convertTextChanges(resource, edit));
	}
}","	public async provideOnTypeFormattingEdits(model: monaco.editor.ITextModel, position: Position, ch: string, options: monaco.languages.FormattingOptions, token: CancellationToken): Promise<monaco.languages.TextEdit[] | undefined> {

		const offset = model.getOffsetAt(position);

		const worker = await this._worker(resource);

		const edits = await worker.getFormattingEditsAfterKeystroke(resource.toString(), offset, ch, FormatHelper._convertOptions(options));

		if (!edits || model.isDisposed()) {

			return;

		}



		return edits.map(edit => this._convertTextChanges(model, edit));
",185
e4ab9e4360fc8cd559a6550f329340986fb00135,"public provideCodeActions(model: monaco.editor.ITextModel, range: Range, context: monaco.languages.CodeActionContext, token: CancellationToken): Promise<monaco.languages.CodeActionList> {
  return async (async () => {
    const worker = await this._worker(resource);
    const start = this._positionToOffset(resource, { lineNumber: range.startLineNumber, column: range.startColumn });
    const end = this._positionToOffset(resource, { lineNumber: range.endLineNumber, column: range.endColumn });
    const formatOptions = FormatHelper._convertOptions(model.getOptions());
    const errorCodes = context.markers.filter(m => m.code).map(m => m.code).map(Number);
    const codeFixes = await worker.getCodeFixesAtPosition(resource.toString(), start, end, errorCodes, formatOptions);
    const filteredCodeFixes = codeFixes.filter(fix => {
      return fix.changes.filter(change => change.isNewFile).length === 0;
    });
    const actions = filteredCodeFixes.map(fix => this._tsCodeFixActionToMonacoCodeAction(model, context, fix));
    return {
      actions: actions,
      dispose: () => {}
    };
  })();
}","	public async provideCodeActions(model: monaco.editor.ITextModel, range: Range, context: monaco.languages.CodeActionContext, token: CancellationToken): Promise<monaco.languages.CodeActionList | undefined> {

		const start = model.getOffsetAt({ lineNumber: range.startLineNumber, column: range.startColumn });

		const end = model.getOffsetAt({ lineNumber: range.endLineNumber, column: range.endColumn });

		const formatOptions = FormatHelper._convertOptions(model.getOptions());

		const errorCodes = context.markers.filter(m => m.code).map(m => m.code).map(Number);

		const worker = await this._worker(resource);

		const codeFixes = await worker.getCodeFixesAtPosition(resource.toString(), start, end, errorCodes, formatOptions);

		if (!codeFixes || model.isDisposed()) {

			return;

		}

		const actions = codeFixes.filter(fix => {

			// Removes any 'make a new file'-type code fix

			return fix.changes.filter(change => change.isNewFile).length === 0;

		}).map(fix => {

			return this._tsCodeFixActionToMonacoCodeAction(model, context, fix);



		return {

			actions: actions,

			dispose: () => { }

		};
",388
28d4512f33c7a661a0e95d38058047f8c334ec9d,"const jsonService = require('monaco-editor');

class PromiseAdapter<T> implements jsonService.Thenable<T> {
  private wrapped: Promise<T>;

  constructor(executor: (resolve: (value?: T | jsonService.Thenable<T>) => void, reject: (reason?: any) => void) => void) {
    this.wrapped = new Promise<T>(executor);
  }

  public then<TResult>(onfulfilled?: (value: T) => TResult | jsonService.Thenable<TResult>, onrejected?: (reason: any) => void): jsonService.Thenable<TResult> {
    let thenable: jsonService.Thenable<T> = this.wrapped;
    return thenable.then(onfulfilled, onrejected);
  }

  public getWrapped(): monaco.Thenable<T> {
    return this.wrapped;
  }

  public static resolve<T>(v: T | Thenable<T>): jsonService.Thenable<T> {
    return <monaco.Thenable<T>>Promise.resolve(v);
  }

  public static reject<T>(v: T): jsonService.Thenable<T> {
    return Promise.reject(<any>v);
  }

  public static all<T>(values: jsonService.Thenable<T>[]): jsonService.Thenable<T[]> {
    return Promise.all(values);
  }
}","import type { worker } from './fillers/monaco-editor-core'

	private _ctx: worker.IWorkerContext;

	constructor(ctx: worker.IWorkerContext, createData: ICreateData) {

			schemaRequestService: createData.enableSchemaRequest && defaultSchemaRequestService

	async doValidation(uri: string): Promise<jsonService.Diagnostic[]> {
",837
3e32a8c0206dfa2cbdcc38268e7035296caa1731,"async function setupModes() {
	try {
		await languages.onLanguage(htmlLanguageId, async () => {
			const mode = await getMode();
			mode.setupMode(htmlDefaults);
		});

		await languages.onLanguage(handlebarsLanguageId, async () => {
			const mode = await getMode();
			mode.setupMode(handlebarDefaults);
		});

		await languages.onLanguage(razorLanguageId, async () => {
			const mode = await getMode();
			mode.setupMode(razorDefaults);
		});
	} catch (error) {
		// Error handling
	}
}","export interface LanguageServiceRegistration extends IDisposable {

	readonly defaults: LanguageServiceDefaults;

}



/**

 * Registers a new HTML language service for the languageId.

 * Note: 'html', 'handlebar' and 'razor' are registered by default.

 *

 * Use this method to register additional language ids with a HTML service.

 * The language server has to be registered before an editor model is opened.

 */

export function registerHTMLLanguageService(

	languageId: string,

	options: Options,

	modeConfiguration: ModeConfiguration

): LanguageServiceRegistration {

	const defaults = new LanguageServiceDefaultsImpl(languageId, options, modeConfiguration);

	let mode: IDisposable | undefined;



	// delay the initalization of the mode until the language is accessed the first time

	const onLanguageListener = languages.onLanguage(languageId, async () => {

		mode = (await getMode()).setupMode(defaults);

	});

	return {

		defaults,

		dispose() {

			onLanguageListener.dispose();

			mode?.dispose();

			mode = undefined;

		}

	};

}
",792
c75289c39d5a4a025ddba8a1eb1e186b5432e0a2,"async function test(mainLanguage + ' tokenization', (t: test.Test) => {

	await Promise.all(languages.map((l) => loadLanguage(l)));

	// clean stack

	setTimeout(() => {

		runTests(t, mainLanguage, tests);

		t.end();

	});
})","	test(mainLanguage + ' tokenization', async (t: test.Test) => {

		await Promise.all(languages.map((l) => loadLanguage(l)));

		await timeout(0);

		runTests(t, mainLanguage, tests);
",66
3a58c2a6ba2ffa1f3f34ed52204bc53c8b522afc,"async function migrate(languageId) {
  try {
    const mod = await lazyLanguageLoader.whenLoaded();
    languages.setMonarchTokensProvider(languageId, mod.language);
  } catch (err) {
    console.error(err);
  }
}","	languages.registerTokensProviderFactory(languageId, {

		create: async (): Promise<languages.IMonarchLanguage> => {

			const mod = await lazyLanguageLoader.load();

			return mod.language;

		}

	});

	languages.onLanguage(languageId, async () => {

		const mod = await lazyLanguageLoader.load();

		languages.setLanguageConfiguration(languageId, mod.conf);
",250
4c5552d6a5580b50b17f51157dd45299a84f609e,"Code to be migrated:
			this._worker = editor.createWebWorker<TypeScriptWorker>({

				// module that exports the create() method and returns a `TypeScriptWorker` instance

				moduleId: 'vs/language/typescript/tsWorker',



				label: this._modeId,

				keepIdleModels: true,



				// passed in to the create() method

				createData: {

					compilerOptions: this._defaults.getCompilerOptions(),

					extraLibs: this._defaults.getExtraLibs(),

					customWorkerPath: this._defaults.workerOptions.customWorkerPath,

					inlayHintsOptions: this._defaults.inlayHintsOptions

				}

			});

			let p = <Promise<TypeScriptWorker>>this._worker.getProxy();

			if (this._defaults.getEagerModelSync()) {

				p = p.then((worker) => {

					if (this._worker) {

						return this._worker.withSyncedResources(

							editor

								.getModels()

								.filter((model) => model.getLanguageId() === this._modeId)

								.map((model) => model.uri)

					);

					return worker;

			}

			this._client = p;

async getLanguageServiceWorker(...resources: Uri[]): Promise<TypeScriptWorker> {

	let _client: TypeScriptWorker;

	await this._getClient()

		.then((client) => {

			_client = client;

		})

		.then((_) => {

			if (this._worker) {

				return this._worker.withSyncedResources(resources);

			}

		})

		.then((_) => _client);","			this._client = (async () => {

				this._worker = editor.createWebWorker<TypeScriptWorker>({

					// module that exports the create() method and returns a `TypeScriptWorker` instance

					moduleId: 'vs/language/typescript/tsWorker',

					label: this._modeId,

					keepIdleModels: true,

					// passed in to the create() method

					createData: {

						compilerOptions: this._defaults.getCompilerOptions(),

						extraLibs: this._defaults.getExtraLibs(),

						customWorkerPath: this._defaults.workerOptions.customWorkerPath,

						inlayHintsOptions: this._defaults.inlayHintsOptions

				if (this._defaults.getEagerModelSync()) {

					return await this._worker.withSyncedResources(

						editor

							.getModels()

							.filter((model) => model.getLanguageId() === this._modeId)

							.map((model) => model.uri)

					);

				}



				return await this._worker.getProxy();

			})();

	async getLanguageServiceWorker(...resources: Uri[]): Promise<TypeScriptWorker> {

		const client = await this._getClient();

		if (this._worker) {

			await this._worker.withSyncedResources(resources);

		}

		return client;
",352
9de7aa3c86626278479518e70c6d9784bf702aad,"const self = this;

async function save(options) {
  try {
    const subDocs = self.$__getAllSubdocs();
    const promises = subDocs.map((d) => d.save());
    await Promise.all(promises);
    self.$__handleSave(options);
    self.$__reset();
    self.$__storeShard();
    let numAffected;
    if (result) {
      if (Array.isArray(result)) {
        numAffected = result.length;
      } else if (result.result && result.result.n !== undefined) {
        numAffected = result.result.n;
      } else if (result.result && result.result.nModified !== undefined) {
        numAffected = result.result.nModified;
      } else {
        numAffected = result;
      }
    }
    // was this an update that required a version bump?
    if (self.$__.version && !self.$__.inserting) {
      const doIncrement = VERSION_INC === (VERSION_INC & self.$__.version);
      self.$__.version = undefined;
      if (numAffected <= 0) {
        // the update failed. pass an error back
        return Promise.reject(new VersionError());
      }
      // increment version if was successful
      if (doIncrement) {
        const key = self.schema.options.versionKey;
        const version = self.getValue(key) | 0;
        self.setValue(key, version + 1);
      }
    }
    self.emit('save', self, numAffected);
    return Promise.resolve(self, numAffected);
  } catch (err) {
    // If the initial insert fails provide a second chance.
    // (If we did this all the time we would break updates)
    if (self.$__.inserting) {
      self.isNew = true;
      self.emit('isNew', true);
    }
    return Promise.reject(err);
  }
}","  var _this = this;

  var promise = new Promise.ES6(function(resolve, reject) {

    async.each(

      _this.$__getAllSubdocs(),

      function(subdoc, cb) {

        subdoc.save(cb);

      },

      function(error) {

        if (error) {

          reject(error);

          return;

        resolve();

      });

  });

  return promise.

    then(this.$__handleSave.bind(this, options)).

    then(

      function(result) {

        _this.$__reset();

        _this.$__storeShard();



        var numAffected = 0;

        if (result) {

          if (Array.isArray(result)) {

            numAffected = result.length;

          } else if (result.result && result.result.n !== undefined) {

            numAffected = result.result.n;

          } else if (result.result && result.result.nModified !== undefined) {

            numAffected = result.result.nModified;

          } else {

            numAffected = result;

          }

        return new Promise.ES6(function(resolve, reject) {

          // was this an update that required a version bump?

          if (_this.$__.version && !_this.$__.inserting) {

            var doIncrement = VERSION_INC === (VERSION_INC & _this.$__.version);

            _this.$__.version = undefined;



            if (numAffected <= 0) {

              // the update failed. pass an error back

              var err = new VersionError();

              fn && fn(err);

              reject(err);

              return;

            }

            // increment version if was successful

            if (doIncrement) {

              var key = _this.schema.options.versionKey;

              var version = _this.getValue(key) | 0;

              _this.setValue(key, version + 1);

            }

          }

          _this.emit('save', _this, numAffected);

          fn && fn(null, _this, numAffected);

          resolve(_this, numAffected);

        });

      },

      function(err) {

        fn && fn(err);

        return new Promise.ES6(function(resolve, reject) {

          reject(err);

        });

      });
",934
9bff7817f4a410b076590a4549e5c58624885160,"async function saveProduct() {
    try {
        const product = await Product.save();
        // Handle product
    } catch (err) {
        // Handle error
    }
}"," *     product = await product.save();

 * If save is successful, the returned promise will fulfill with the document

 * saved.

 *

 *     const newProduct = await product.save();

 *     newProduct === product; // true

 * @param {Session} [options.session=null] the [session](https://docs.mongodb.com/manual/reference/server-sessions/) associated with this save operation. If not specified, defaults to the [document's associated session](api.html#document_Document-$session).
",372
da39639a9490c47615974f7c118757963bea4f36,"async function saveProduct() {
   try {
      const product = await product.save();
      return product;
   } catch (err) {
      // handle error
   }
}"," *     product = await product.save();

 * If save is successful, the returned promise will fulfill with the document

 * saved.

 *

 *     const newProduct = await product.save();

 *     newProduct === product; // true

 * @param {Session} [options.session=null] the [session](https://docs.mongodb.com/manual/reference/server-sessions/) associated with this save operation. If not specified, defaults to the [document's associated session](api.html#document_Document-$session).
",372
fd1a6513acadc40b778a60b7444423ffd4fd94ea,"async function saveProduct(product) {
  try {
    const savedProduct = await product.save();
    // ...
  } catch (err) {
    // ...
  }
}"," *     product = await product.save();

 * If save is successful, the returned promise will fulfill with the document

 * saved.

 *

 *     const newProduct = await product.save();

 *     newProduct === product; // true

 * @param {Session} [options.session=null] the [session](https://docs.mongodb.com/manual/reference/server-sessions/) associated with this save operation. If not specified, defaults to the [document's associated session](api.html#document_Document-$session).

 * @param {Object} [options.safe] (DEPRECATED) overrides [schema's safe option](http://mongoosejs.com//docs/guide.html#safe). Use the `w` option instead.

 * @param {Number|String} [options.w] set the [write concern](https://docs.mongodb.com/manual/reference/write-concern/#w-option). Overrides the [schema-level `writeConcern` option](/docs/guide.html#writeConcern)

 * @param {Boolean} [options.j] set to true for MongoDB to wait until this `save()` has been [journaled before resolving the returned promise](https://docs.mongodb.com/manual/reference/write-concern/#j-option). Overrides the [schema-level `writeConcern` option](/docs/guide.html#writeConcern)

 * @param {Number} [options.wtimeout] sets a [timeout for the write concern](https://docs.mongodb.com/manual/reference/write-concern/#wtimeout). Overrides the [schema-level `writeConcern` option](/docs/guide.html#writeConcern).

 * @param {Boolean} [options.checkKeys=true] the MongoDB driver prevents you from saving keys that start with '$' or contain '.' by default. Set this option to `false` to skip that check. See [restrictions on field names](https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names)

 * @param {Boolean} [options.timestamps=true] if `false` and [timestamps](./guide.html#timestamps) are enabled, skip timestamps for this `save()`.

 * @throws {DocumentNotFoundError} if this [save updates an existing document](api.html#document_Document-isNew) but the document doesn't exist in the database. For example, you will get this error if the document is [deleted between when you retrieved the document and when you saved it](documents.html#updating).
",2017
14a4fb843ea0b914f3e34ab6bc316c292b60b73c,"// populates a single object
async function populateUser(id) {
  try {
    const user = await User.findById(id);
    const opts = [
      { path: 'company', match: { x: 1 }, select: 'name' },
      { path: 'notes', options: { limit: 10 }, model: 'override' }
    ];
    const populatedUser = await User.populate(user, opts);
    console.log(populatedUser);
  } catch (err) {
    console.error(err);
  }
}

// populates an array of objects
async function populateUsers() {
  try {
    const match = {};
    const users = await User.find(match);
    const opts = [{ path: 'company', match: { x: 1 }, select: 'name' }];
    const populatedUsers = await User.populate(users, opts);
    return populatedUsers;
  } catch (err) {
    console.error(err);
  }
}

// imagine a Weapon model exists with two saved documents:
//   { _id: 389, name: 'whip' }
//   { _id: 8921, name: 'boomerang' }
// and this schema:
// new Schema({
//   name: String,
//   weapon: { type: ObjectId, ref: 'Weapon' }
// });

async function populateUserWithWeapon(user) {
  try {
    const populatedUser = await Weapon.populate(user, { path: 'weapon', model: 'Weapon' });
    console.log(populatedUser.weapon.name); // whip
    return populatedUser;
  } catch (err) {
    console.error(err);
  }
}

async function populateUsersWithWeapons() {
  try {
    const users = [{ name: 'Indiana Jones', weapon: 389 }];
    const opts = [{ path: 'weapon' }];
    const populatedUsers = await Weapon.populate(users, opts);
    populatedUsers.forEach(user => console.log(`${user.name} uses a ${user.weapon.name}`));
    return populatedUsers;
  } catch (err) {
    console.error(err);
  }
}"," * - strictPopulate: optional boolean, set to `false` to allow populating paths that aren't in the schema.

 *     const Dog = mongoose.model('Dog', new Schema({ name: String, breed: String }));

 *     const Person = mongoose.model('Person', new Schema({

 *       name: String,

 *       pet: { type: mongoose.ObjectId, ref: 'Dog' }

 *     }));

 *     const pets = await Pet.create([

 *       { name: 'Daisy', breed: 'Beagle' },

 *       { name: 'Einstein', breed: 'Catalan Sheepdog' }

 *     ]);

 *     const users = [

 *       { name: 'John Wick', dog: pets[0]._id },

 *       { name: 'Doc Brown', dog: pets[1]._id }

 *     ];

 *     await User.populate(users, { path: 'dog', select: 'name' });

 *     users[0].dog.name; // 'Daisy'

 *     users[0].dog.breed; // undefined because of `select`
",1264
ffdfe887abe213fd15ecce102016cb91db675c78,"module.exports = {

    create: async (docs, callback) => {

        if (!Array.isArray(docs)) {
            return Promise.reject(new Error('The first argument to the Candy create method must be an array of documents'));
        }

        try {
            const result = await Candy.create(docs);
            if (callback) {
                callback(null, result[0]);
            }
            return result[0];
        } catch (error) {
            if (callback) {
                callback(error);
            } else {
                throw error;
            }
        }
    },
};"," *     // Insert one new `Character` document

 *     await Character.create({ name: 'Jean-Luc Picard' });

 * 

 *     // Insert multiple new `Character` documents

 *     await Character.create([{ name: 'Will Riker' }, { name: 'Geordi LaForge' }]);

 * 

 *     // Create a new character within a transaction. Note that you **must**

 *     // pass an array as the first parameter to `create()` if you want to

 *     // specify options.

 *     await Character.create([{ name: 'Jean-Luc Picard' }], { session });
",452
0fffe252c00a3239ee757d8e7b52312165ed68c1,"async function deleteOneCharacter() {
  try {
    const result = await Character.deleteOne({ name: 'Eddard Stark' });
    return result;
  } catch (error) {
    console.log(error);
  }
}"," * This function triggers `deleteOne` middleware.

 *     await Character.deleteOne({ name: 'Eddard Stark' });

 *

 *     // Using callbacks:
",105
0fffe252c00a3239ee757d8e7b52312165ed68c1,"// Wrapped in an async function to enable await usage
async function deleteManyCharacters() {
  try {
    // Replace .then() with await assignment
    const result = await Character.deleteMany({ name: /Stark/, age: { $gte: 18 } });
    console.log(result);
  } catch (error) {
    console.error(error);
  } finally {
    next(); // callback
  }
}"," * This function triggers `deleteMany` middleware.

 *     await Character.deleteMany({ name: /Stark/, age: { $gte: 18 } });

 *

 *     // Using callbacks:

 *     Character.deleteMany({ name: /Stark/, age: { $gte: 18 } }, callback);
",216
308934210593f11b950528350c8fe82560224d48,"it('eachAsync() with parallel > numDocs (gh-8422)', async function() {

  await Movie.deleteMany({});

  await Movie.create([

    { name: 'Kickboxer' },

    { name: 'Ip Man' },

    { name: 'Enter the Dragon' }

  ]);

  let numDone = 0;

  const test = async () => {

    await new Promise((resolve) => setTimeout(resolve, 100));

    ++numDone;

  };

  await Movie.find().cursor().eachAsync(test, { parallel: 4 });

  assert.equal(numDone, 3);

});

it('eachAsync() with sort, parallel, and sync function (gh-8557)', async function() {

  await User.create([{ order: 1 }, { order: 2 }, { order: 3 }]);

  const cursor = User.aggregate([{ $sort: { order: 1 } }]).

    cursor();

  const docs = [];

  await cursor.eachAsync((doc) => docs.push(doc), { parallel: 3 });

  assert.deepEqual(docs.map(d => d.order), [1, 2, 3]);

});","  it('eachAsync() with parallel > numDocs (gh-8422)', async function() {

    await Movie.deleteMany({});

    await Movie.create([

      { name: 'Kickboxer' },

      { name: 'Ip Man' },

      { name: 'Enter the Dragon' }

    ]);

    let numDone = 0;

    await delay(100);

    ++numDone;

    await Movie.find().cursor().eachAsync(test, { parallel: 4 });

    assert.equal(numDone, 3);

  it('eachAsync() with sort, parallel, and sync function (gh-8557)', async function() {

    await User.create([{ order: 1 }, { order: 2 }, { order: 3 }]);

    const cursor = User.aggregate([{ $sort: { order: 1 } }]).

      cursor();

    const docs = [];

    await cursor.eachAsync((doc) => docs.push(doc), { parallel: 3 });

    assert.deepEqual(docs.map(d => d.order), [1, 2, 3]);
",116
bb7c0210775c845acb9498ea10f39e6d0a39e89a,"async function updateMovie() {
    const query = { name: 'The Terminator' };
    const update = { $set: { genre: 'Action' } };
    const options = { new: true };
  
    try {
      const doc = await Movie.findOneAndUpdate(query, update, options);
      assert.equal(doc.title, 'The Terminator');
      assert.equal(doc.genre, 'Action');
      return doc;
    } catch (error) {
      console.log('Error occurred while updating movie', error);
    }
  }","    let doc = await Movie.findOneAndUpdate(query, update, options).lean();

    doc.genre; // 'Action', Mongoose set a default value.

    // acquit:ignore:start

    assert.equal(doc.title, 'The Terminator');

    assert.equal(doc.genre, 'Action');

    // acquit:ignore:end



    await Movie.deleteMany({});



    doc = await Movie.findOneAndUpdate(query, update, { ...options, setDefaultsOnInsert: false }).lean();

    doc.genre; // undefined, Mongoose did not set a default value

    // acquit:ignore:start

    assert.equal(doc.title, 'The Terminator');

    assert.equal(doc.genre, void 0);

    // acquit:ignore:end
",440
e205858f88a3ee36dd477949f639fac0b19d4e0f,"async function before() {
  try {
    const db = await db.asPromise();
    if (db.client.topology.constructor.name !== 'ReplSet' && !db.client.topology.s.description.type.includes('ReplicaSet')) {
      _skipped = true;
      this.skip();
      throw new Error('skip');
    }
    const version = await new Promise((resolve, reject) => {
      start.mongodVersion(function (err, version) {
        if (err) {
          return reject(err);
        }
        resolve(version);
      });
    })
    if (version[0] < 4) {
      _skipped = true;
      this.skip();
    }
  } catch (error) {}
}","  before(async function() {

    try {

      await db.asPromise();

      // Skip if not a repl set

      const isNotAReplicaSet = db.client.topology.constructor.name !== 'ReplSet' &&

                               !db.client.topology.s.description.type.includes('ReplicaSet');

      if (isNotAReplicaSet) {

        _skipped = true;

        this.skip();

        throw new Error('Skip');

      }

      const version = await start.promisifiedMongodVersion();

      if (version[0] < 4) {

      }

    } catch (err) {

      _skipped = true;

      this.skip();

    }
",343
9030c12037c2294a6ec17c94b23a7139b60b169c,"before(async function() {



    await db.asPromise();


      // Skip if not a repl set

      const topology = db.client.topology;

      if (topology.constructor.name !== 'ReplSet' && !topology.s.description.type.includes('ReplicaSet')) {

        _skipped = true;

        this.skip();

        throw new Error('skip');

      }


    await new Promise((resolve, reject) => {

      start.mongodVersion(function(err, version) {

        if (err) {

          return reject(err);

        }

        resolve(version);

      });

    });

    const version = await new Promise((resolve, reject) => {

      start.mongodVersion(function(err, version) {

        if (err) {

          return reject(err);

        }

        resolve(version);

      });

    });


    if (version[0] < 4) {

      _skipped = true;

      this.skip();

    }



  })","  before(async function() {

    try {

      await db.asPromise();

      // Skip if not a repl set

      if (db.client.topology.constructor.name !== 'ReplSet' &&

      !db.client.topology.s.description.type.includes('ReplicaSet')) {

        _skipped = true;

        this.skip();

        throw new Error('skip');

      }



      const version = await start.promisifiedMongodVersion();



      if (version[0] < 4) {

      }

    } catch (err) {

      _skipped = true;

      this.skip();

    }
",442
15b57ec7d6a022961629e350313af5b258140bce,"async function bootMongo() {
     let conn;
     try {
       conn = await mongo.connect();
       assert.equal(conn, conn);
      } catch (err) {
        console.error(""Error connecting to MongoDB"", err);
        return;
      } finally {
        // Clean up resources here
      }
      done();
    }","      const _conn = await bootMongo.promise;

      assert.equal(_conn, conn);
",244
13a75af96e3c311bbda0925d7afb1d245374ced1,"async function mapReduce(o) {
  try {
    const results = await MR.mapReduce(o);
    assert.equal(typeof stats, 'undefined');
  } catch (err) {
    console.error(err);
  } finally {
    done();
  }
}","    const { stats } = await MR.mapReduce(o);

    assert.equal(typeof stats, 'undefined');
",118
8b6d9adbd8fa9d06ea6c1f8331df14bba444c4d5,"it('when return promise', async () => {
  const res = await A.aggregate([group, project]);
  assert.ok(res);
  assert.equal(1, res.length);
  assert.ok('maxAge' in res[0]);
  assert.equal(maxAge, res[0].maxAge);
});

it('with arrays', async () => {
  const [err, res] = await A.aggregate([group, project], (err, res) => ({ err, res }));
  assert.ifError(err);
  assert.ok(res);
  assert.equal(res.length, 1);
  assert.ok('maxAge' in res[0]);
  assert.equal(res[0].maxAge, maxAge);
});

it('with Aggregate syntax', async () => {
  const [err, res] = await A.aggregate().exec((err, res) => ({ err, res }));
  assert.ifError(err);
  assert.ok(res);
  assert.equal(res.length, 1);
  assert.ok('maxAge' in res[0]);
  assert.equal(res[0].maxAge, maxAge);
});

it('with Aggregate syntax if callback not provided', async () => {
  const res = await promise;
  assert.ok(promise instanceof mongoose.Promise);
  assert.ok(res);
  assert.equal(res.length, 1);
  assert.ok('maxAge' in res[0]);
  assert.equal(maxAge, res[0].maxAge);
});","    it('when return promise', async function() {

      const res = await A.aggregate([group, project]);



      assert.ok(res);

      assert.equal(1, res.length);

      assert.ok('maxAge' in res[0]);

      assert.equal(maxAge, res[0].maxAge);

    it('with arrays', async function() {

      const res = await A.aggregate([group, project]);



      assert.ok(res);

      assert.equal(res.length, 1);

      assert.ok('maxAge' in res[0]);

      assert.equal(res[0].maxAge, maxAge);

    it('with Aggregate syntax', async function() {

      const res = await A.aggregate()

        .exec();



      assert.ok(res);

      assert.equal(res.length, 1);

      assert.ok('maxAge' in res[0]);

      assert.equal(res[0].maxAge, maxAge);

    it('with Aggregate syntax if callback not provided', async function() {

      const res = await promise;



      assert.ok(promise instanceof mongoose.Promise);

      assert.ok(res);

      assert.equal(res.length, 1);

      assert.ok('maxAge' in res[0]);

      assert.equal(maxAge, res[0].maxAge);
",272
997f9f598651d31f273e1215d7e303445b0c254b,"async function test() {
    const indexes = await Promise.all([]).then(() => Base.listIndexes());
    const otherIndex = indexes.find((i) => i.key.other);
  
    assert.deepEqual(otherIndex.key, { other: 1 });
    assert.deepEqual(otherIndex.partialFilterExpression, { kind: 'Device' });
  }
  test();","      await Promise.all([

      ]);

      const indexes = await Base.listIndexes();

      const index = indexes.find(i => i.key.other);

      assert.deepEqual(index.key, { other: 1 });

      assert.deepEqual(index.partialFilterExpression, { kind: 'Device' });
",102
a92a4d2b62ba77a8125f464098fcae44accec0bc,"import { createConnection, Schema, Connection } from 'mongoose';

async function connect() {
  try {
    const conn = await createConnection('mongodb://localhost:27017/test').asPromise();
    console.log('Connected!');
    return conn;
  } catch (error) {
    console.error(error);
  }
}

async function retrieveDoc() {
  try {
    const doc = await conn.db.collection('Test').findOne({ name: String }).asPromise();
    console.log(doc);
    return doc;
  } catch (error) {
    console.error(error);
  }
}

async function syncIndexes() {
  try {
    const result = await conn.syncIndexes({ continueOnError: true }).asPromise();
    if (result['User'].includes('name')) {
      console.log('Indexes synced successfully');
    } else {
      console.error(result);
    }
  } catch (error) {
    console.error(error);
  }
}

connect();
retrieveDoc();
syncIndexes();","import { createConnection, Schema, Collection, Connection, ConnectionSyncIndexesResult, Model } from 'mongoose';

import * as mongodb from 'mongodb';

import { expectError, expectType } from 'tsd';



expectType<Connection>(createConnection());

expectType<Connection>(createConnection('mongodb://localhost:27017/test'));

expectType<Connection>(createConnection('mongodb://localhost:27017/test', { appName: 'mongoose' }));

expectType<void>(createConnection('mongodb://localhost:27017/test', { appName: 'mongoose' }, (err, res) => (expectType<Connection>(res))));

expectType<Model<{ name: string }, any, any, any>>(conn.model('Test', new Schema<{ name: string }>({ name: { type: String } })));

expectType<Model<{ name: string }>>(conn.model<{ name: string }>('Test', new Schema({ name: { type: String } })));



expectType<Promise<Connection>>(conn.openUri('mongodb://localhost:27017/test'));

expectType<Promise<Connection>>(conn.openUri('mongodb://localhost:27017/test', { bufferCommands: true }));

expectType<Connection>(conn.openUri('mongodb://localhost:27017/test', { bufferCommands: true }, (err, value) => { expectType<Connection>(value); }));



conn.readyState === 0;

conn.readyState === 99;



expectError(conn.readyState = 0);



expectType<Connection>(new Connection());

expectType<Promise<Connection>>(new Connection().asPromise());



expectType<Promise<mongodb.Collection<{ [key: string]: any }>>>(conn.createCollection('some'));

expectType<void>(conn.createCollection('some', (err, res) => {

  expectType<mongodb.Collection<{ [key: string]: any }>>(res);

}));



expectType<Promise<void>>(conn.dropCollection('some'));

expectType<void>(conn.dropCollection('some', () => {

  // do nothing

}));



expectError(conn.deleteModel());

expectType<Connection>(conn.deleteModel('something'));



expectType<Array<string>>(conn.modelNames());



expectType<Promise<void>>(createConnection('mongodb://localhost:27017/test').close());

expectType<Promise<void>>(createConnection('mongodb://localhost:27017/test').close(true));

expectType<void>(createConnection('mongodb://localhost:27017/test').close(() => {

  // do nothing.

}));

expectType<void>(createConnection('mongodb://localhost:27017/test').close(true, () => {

  // do nothing.

}));

expectType<void>(createConnection('mongodb://localhost:27017/test').close(false, () => {

  // do nothing.

}));



expectType<mongodb.Db>(conn.db);



expectType<mongodb.MongoClient>(conn.getClient());

expectType<Connection>(conn.setClient(new mongodb.MongoClient('mongodb://localhost:27017/test')));



expectType<Promise<string>>(conn.transaction<string>(async(res) => {

  expectType<mongodb.ClientSession>(res);

  return 'a';

}));



expectError(conn.user = 'invalid');

expectError(conn.pass = 'invalid');

expectError(conn.host = 'invalid');

expectError(conn.port = 'invalid');



expectType<Collection>(conn.collection('test'));

expectType<mongodb.Collection>(conn.db.collection('test'));

expectType<Promise<mongodb.ClientSession>>(conn.startSession());

expectType<Promise<mongodb.ClientSession>>(conn.startSession({ causalConsistency: true }));

expectType<void>(conn.startSession((err, res) => { expectType<mongodb.ClientSession>(res); }));

expectType<void>(conn.startSession(undefined, (err, res) => { expectType<mongodb.ClientSession>(res); }));

expectType<void>(conn.startSession(null, (err, res) => { expectType<mongodb.ClientSession>(res); }));

expectType<void>(conn.startSession({}, (err, res) => { expectType<mongodb.ClientSession>(res); }));

expectType<Promise<ConnectionSyncIndexesResult>>(conn.syncIndexes());

expectType<Promise<ConnectionSyncIndexesResult>>(conn.syncIndexes({ continueOnError: true }));

expectType<Promise<ConnectionSyncIndexesResult>>(conn.syncIndexes({ background: true }));

expectType<void>(conn.syncIndexes(undefined, (err, value) => { expectType<ConnectionSyncIndexesResult>(value); }));

expectType<void>(conn.syncIndexes(null, (err, value) => { expectType<ConnectionSyncIndexesResult>(value); }));

expectType<void>(conn.syncIndexes({ continueOnError: true }, (err, value) => { expectType<ConnectionSyncIndexesResult>(value); }));

expectType<void>(conn.syncIndexes({ background: true }, (err, value) => { expectType<ConnectionSyncIndexesResult>(value); }));

expectType<Connection>(conn.useDb('test'));

expectType<Connection>(conn.useDb('test', {}));

expectType<Connection>(conn.useDb('test', { noListener: true }));

expectType<Connection>(conn.useDb('test', { useCache: true }));
",3873
3dd7b52211ab7066fe845e689143ee728e735335,"async function removeProduct() {
  try {
    const product = await Product.remove();
    return product;
  } catch (err) {
    handleError(err);
  }
}

module.exports = removeProduct;"," *     const product = await product.remove().catch(function (err) {

 *        assert.ok(err);

 *     });

 *     const foundProduct = await Product.findById(product._id);

 *     console.log(foundProduct) // null
",169
437b03a81c12fb804a366ff3d50b5084fc504c3e,`const promise = await aggregate.exec();`," *     const result = await aggregate.exec();

 * @return {Promise} Returns a Promise if no ""callback"" is given.
",81
9b51f98aed00de9c244062d645721ef3ac7dbca9,"async function getMongoDbVersion(module) {

const db = module.exports();

db.on('error', reject);

try {

 const admin = await db.db.admin();

 await admin.serverStatus((err, info) => {

if (err) {

return reject(err);

}

const version = info.version.split('.').map(n => parseInt(n, 10));

await db.close();

resolve(version);

});

 } catch (err) {

reject(err);

 }

}","  const db = await module.exports();



  const admin = db.client.db().admin();



  const info = await admin.serverStatus();

  const version = info.version.split('.').map(function(n) {

    return parseInt(n, 10);

  await db.close();

  return version;
",222
f0c55f3278fd4aa3633baecfdf2b3776ca6cec4a,"async function openUri(uri, options, callback) {
  if (typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!['string', 'number'].includes(typeof options)) {
    throw new MongooseError('Mongoose 5.x no longer supports `mongoose.connect(host, dbname, port)` or `mongoose.createConnection(host, dbname, port)`. See https://mongoosejs.com/docs/connections.html for supported connection syntax');
  }
  if (callback != null && typeof callback !== 'function') {
    throw new MongooseError('3rd parameter to `mongoose.connect()` or `mongoose.createConnection()` must be a function, got ""' + typeof callback + '""');
  }
  if (this._destroyCalled) {
    const error = 'Connection has been closed and destroyed, and cannot be used for re-opening the connection. Please create a new connection with `mongoose.createConnection()` or `mongoose.connect()`.';
    if (typeof callback === 'function') {
      return callback(error);
    } else {
      throw new MongooseError(error);
    }
  }
  this._connectionString = uri;
  this.readyState = STATES.connecting;
  this._closeCalled = false;
  try {
    const result = await this.$initialConnection;
    return callback(null, this);
  } catch (error) {
    return callback(error);
  }
}","Connection.prototype.openUri = async function openUri(uri, options) {

  if (this.readyState === STATES.connecting || this.readyState === STATES.connected) {

    if (this._connectionString === uri) {

      return this;

    }

  this._closeCalled = false;



  // Internal option to skip `await this.$initialConnection` in

  // this function for `createConnection()`. Because otherwise

  // `createConnection()` would have an uncatchable error.

  let _fireAndForget = false;

  if (options && '_fireAndForget' in options) {

    _fireAndForget = options._fireAndForget;

    delete options._fireAndForget;

  const promise = _createMongoClient(this, uri, options);



  this.$initialConnection = promise.

    then(() => this).

    catch(err => {

      this.readyState = STATES.disconnected;

      if (this.listeners('error').length > 0) {

        immediate(() => this.emit('error', err));

      }

      throw err;

    });



  for (const model of Object.values(this.models)) {

    // Errors handled internally, so safe to ignore error

    model.init(function $modelInitNoop() {});

  }



  // `createConnection()` calls this `openUri()` function without

  // awaiting on the result, so we set this option to rely on

  // `asPromise()` to handle any errors.

  if (_fireAndForget) {

    return this;

  }



  try {

    await this.$initialConnection;

  } catch (err) {

    throw _handleConnectionErrors(err);

  }



  return this;

};



/*!

 * ignore

 */



function _handleConnectionErrors(err) {

  if (err?.name === 'MongoServerSelectionError') {

    const originalError = err;

    err = new ServerSelectionError();

    err.assimilateError(originalError);

  }



  return err;

}



/*!

 * ignore

 */



async function _createMongoClient(conn, uri, options) {

  if (conn._destroyCalled) {

    throw new MongooseError(

      'Connection has been closed and destroyed, and cannot be used for re-opening the connection. ' +

      'Please create a new connection with `mongoose.createConnection()` or `mongoose.connect()`.'

    );

  if (conn.readyState === STATES.connecting || conn.readyState === STATES.connected) {

    if (conn._connectionString !== uri) {
",1644
f0c55f3278fd4aa3633baecfdf2b3776ca6cec4a,"const promise = new Promise((resolve, reject) => {
  let client;
  try {
    client = new mongodb.MongoClient(uri, options);
  } catch (error) {
    _this.readyState = STATES.disconnected;
    return reject(error);
  }
  _this.client = client;
  client.setMaxListeners(0);
  client.connect().then(() => {
    _setClient(_this, client, options, dbName);
    for (const db of this.otherDbs) {
      _setClient(db, client, {}, db.name);
    }
    resolve(_this);
  }).catch(reject);
});","  conn.readyState = STATES.connecting;

  conn._connectionString = uri;

  let client;

  try {

    client = new mongodb.MongoClient(uri, options);

  } catch (error) {

    conn.readyState = STATES.disconnected;

    throw error;

  }

  conn.client = client;

  client.setMaxListeners(0);

  await client.connect();

  _setClient(conn, client, options, dbName);

  for (const db of conn.otherDbs) {

    _setClient(db, client, {}, db.name);

  return conn;

}
",162
f0c55f3278fd4aa3633baecfdf2b3776ca6cec4a,"it('should buffer commands until connection is established', async () => {
  let connected = false;
  let insertedId;
  let pending = 2;

  function finish() {
    if (--pending) {
      return;
    }
    assert.ok(connected);
    assert.ok(insertedId !== undefined);
    const doc = await collection.findOne({ _id: insertedId });
    assert.strictEqual(doc.foo, 'bar');
    db.close();
    done();
  }
  try {
    await collection.insertOne({ foo: 'bar' }, {});
    insertedId = (await result).insertedId;
    finish();
  } catch (err) {
    console.log(err);
  }
  try {
    connected = !(await db.openUri(process.env.MONGOOSE_TEST_URI || uri));
    finish();
  } catch (err) {
    console.log(err);
  }
});
it('returns a promise if buffering and no callback (gh-7676)', async () => {
  let pending = 2;
  function finish() {
    if (--pending) {
      return;
    }
    assert.ok(connected);
    const doc = await collection.findOne({ _id: insertedId });
    assert.strictEqual(doc.foo, 'bar');
    db.close();
    done();
  }
  try {
    await collection.insertOne({ foo: 'bar' }, {});
    insertedId = (await result).insertedId;
    finish();
  } catch (err) {
    console.log(err);
  }
  try {
    connected = !(await db.openUri(process.env.MONGOOSE_TEST_URI || uri));
    finish();
  } catch (err) {
    console.log(err);
  }
});","  it('should buffer commands until connection is established', async function() {

    const op = collection.insertOne({ foo: 'bar' }, {});

    await db.openUri(process.env.MONGOOSE_TEST_URI || uri);



    const res = await op;

    assert.ok(res.insertedId);

    const doc = await collection.findOne({ _id: res.insertedId });

    assert.strictEqual(doc.foo, 'bar');

    await db.close();

  it('returns a promise if buffering and no callback (gh-7676)', async function() {
",943
f0c55f3278fd4aa3633baecfdf2b3776ca6cec4a,"async function openUri(uri) {
  try {
    const result = await db.openUri(uri);
    return result;
  } catch (error) {
    throw error;
  }
}","    await db.openUri(start.uri);



    await promise;
",106
f0c55f3278fd4aa3633baecfdf2b3776ca6cec4a,"it('throws a MongooseServerSelectionError on server selection timeout (gh-8451)', async function() {

  try {
    await mongoose.createConnection(uri, opts);
    assert.ok(false);
  } catch (err) {
    assert.equal(err.name, 'MongooseServerSelectionError');
  }
});","  it('throws a MongooseServerSelectionError on server selection timeout (gh-8451)', async function() {

    const err = await mongoose.createConnection(uri, opts).

      asPromise().

      then(() => null, err => err);

    assert.ok(err);

    assert.equal(err.name, 'MongooseServerSelectionError');
",75
38e98f97e3ac07aa50a0a66fe444ce7e7d3c8a2e,"const cb = async (err, docs) => {

    if (err) {

      return callback(err);

    }

    if (docs.length === 0) {

      return callback(null, docs);

    }

    if (this.options.explain) {

      return callback(null, docs);

    }

    if (!mongooseOptions.populate) {

      const versionKey = _this.schema.options.versionKey;

      if (mongooseOptions.lean && mongooseOptions.lean.versionKey === false && versionKey) {

        docs.forEach((doc) => {

          if (versionKey in doc) {

            delete doc[versionKey];

          }

        });

      }

      return mongooseOptions.lean ?

        // call _completeManyLean here?

        _completeManyLean(_this.model.schema, docs, null, completeManyOptions, callback) :

        // callback(null, docs) :

        completeMany(_this.model, docs, fields, userProvidedFields, completeManyOptions, callback);

    }

    const pop = helpers.preparePopulationOptionsMQ(_this, mongooseOptions);

    if (mongooseOptions.lean) {

      return _this.model.populate(docs, pop, callback);

  };

  const options = this._optionsForExec();

  options.projection = this._fieldsForExec();

  const filter = this._conditions;

  try {

    const cursor = await this._collection.collection.find(filter, options);

    if (options.explain) {

      return cursor.explain().then(res => cb(null, res), err => cb(err));

    }

    const docs = await cursor.toArray();

    return cb(null, docs);

  } catch (err) {

    return cb(err);

  }

};","  const options = this._optionsForExec();

  options.projection = this._fieldsForExec();

  const filter = this._conditions;

  const cursor = await this._collection.collection.find(filter, options);

  if (options.explain) {

    return cursor.explain();

  }

  let docs = await cursor.toArray();

  if (docs.length === 0) {

    return docs;

  }

  if (!mongooseOptions.populate) {

    const versionKey = _this.schema.options.versionKey;

    if (mongooseOptions.lean && mongooseOptions.lean.versionKey === false && versionKey) {

      docs.forEach((doc) => {

        if (versionKey in doc) {

          delete doc[versionKey];

        }

      });

    return mongooseOptions.lean ?

      _completeManyLean(_this.model.schema, docs, null, completeManyOptions) :

      completeMany(_this.model, docs, fields, userProvidedFields, completeManyOptions);

  }

  const pop = helpers.preparePopulationOptionsMQ(_this, mongooseOptions);

  if (mongooseOptions.lean) {

    return _this.model.populate(docs, pop);

  }

  docs = await completeMany(_this.model, docs, fields, userProvidedFields, completeManyOptions);

  await this.model.populate(docs, pop);

  return docs;

};
",740
15febec1ee28201d1694a460a4907d5518adc880,"Query.prototype._deleteOne = async function(callback) {
  if (!callback) {
    return Query.base.deleteOne.call(this);
  }
  this.exec.call(this, callback);
  try {
    const res = await this._collection.collection.deleteOne(this._conditions, options);
    callback(null, res);
  } catch (err) {
    callback(err);
  }
}","  Query.base.deleteOne.call(this);

 *

Query.prototype._deleteOne = async function _deleteOne() {

    throw this.error();

  return this._collection.collection.deleteOne(this._conditions, options);

};
",199
15febec1ee28201d1694a460a4907d5518adc880,"Query.prototype._deleteMany = async function(callback) {
    callback = _wrapThunkCallback(this, callback);
    this._collection.collection.deleteMany(this._conditions, options).then(
        res => { await callback(null, res); },
        err => { await callback(err); }
    );
}","Query.prototype._deleteMany = async function _deleteMany() {

    throw this.error();

  return this._collection.collection.deleteMany(this._conditions, options);

};
",154
7b68d494652f9c2eda7806595ce8ea66a9a50718,"// Define an async function to wrap the logic
async function run() {
  // Create a new Temp document
  const p1 = await Temp.create({ nested: { nums: [1, 2, 3, 4, 5] } });

  // Use await to assign the resolved value of the promise to a variable
  let t = await p1;

  // Modify the nested.nums array by pulling elements 1 and 2
  t.nested.nums.pull(1);
  t.nested.nums.pull(2);

  // Assert that the activePaths has been modified correctly
  assert.equal(t.$__.activePaths.paths['nested.nums'], 'modify');
}
// Call the async function and handle any errors that may occur
run().catch(err => console.error(err));","    const t = await Temp.create({ nested: { nums: [1, 2, 3, 4, 5] } });

    t.nested.nums.pull(1);

    t.nested.nums.pull(2);

    assert.equal(t.$__.activePaths.paths['nested.nums'], 'modify');

  it('$pull should affect what you see in an array before a save', async function() {
",400
3ae89172dd14aee576d97fb6c47b54e7d76640c0,"// Tests for asynchronous queries
describe('Asynchronous Queries', () => {
  it('updateOne()', async function() {
    const created = await BlogPost.create({ title: 'interoperable update as promise' });
    const query = BlogPost.updateOne({ title: 'interoperable update as promise' }, { title: 'interoperable update as promise delta' });
    const res = await query.exec();
    assert.equal(res.matchedCount, 1);
    assert.equal(res.modifiedCount, 1);
    const count = await BlogPost.count({ title: 'interoperable update as promise delta' });
    assert.equal(count, 1);
  });

  it('findOne()', async function() {
    const created = await BlogPost.create({ title: 'interoperable findOne as promise' });
    const query = BlogPost.findOne({ title: 'interoperable findOne as promise' });
    const found = await query.exec();
    assert.equal(found.id, created.id);
  });

  it('find()', async function() {
    const createdOne = await BlogPost.create({ title: 'interoperable find as promise' });
    const createdTwo = await BlogPost.create({ title: 'interoperable find as promise' });
    const query = BlogPost.find({ title: 'interoperable find as promise' }).sort('_id');
    const found = await query.exec();
    assert.equal(found.length, 2);
    const ids = {};
    ids[String(found[0]._id)] = 1;
    ids[String(found[1]._id)] = 1;
    assert.ok(String(createdOne._id) in ids);
    assert.ok(String(createdTwo._id) in ids);
  });

  it('op can be changed', async function() {
    const created = await BlogPost.create({ title: 'interoperable count as promise 2' });
    const query = BlogPost.count({ title: 'interoperable count as promise 2' });
    const count = await query.exec();
    assert.equal(count, 1);
  });
});","    it('updateOne()', async function() {

      await BlogPost.create({ title: 'interoperable update as promise' });

      const query = BlogPost.updateOne({ title: 'interoperable update as promise' }, { title: 'interoperable update as promise delta' });

      const res = await query.exec();

      assert.equal(res.matchedCount, 1);

      assert.equal(res.modifiedCount, 1);

      const count = await BlogPost.countDocuments({ title: 'interoperable update as promise delta' });

      assert.equal(count, 1);

    it('findOne()', async function() {

      const created = await BlogPost.create({ title: 'interoperable findOne as promise' });

      const query = BlogPost.findOne({ title: 'interoperable findOne as promise' });

      const found = await query.exec();

      assert.equal(found.id, created.id);

    it('find()', async function() {

      const [createdOne, createdTwo] = await BlogPost.create([

        { title: 'interoperable find as promise' }

      ]);



      const query = BlogPost.find({ title: 'interoperable find as promise' }).sort('_id');

      const found = await query.exec();

      assert.equal(found.length, 2);

      const ids = {};

      ids[String(found[0]._id)] = 1;

      ids[String(found[1]._id)] = 1;

      assert.ok(String(createdOne._id) in ids);

      assert.ok(String(createdTwo._id) in ids);

    it('op can be changed', async function() {

      const created = await BlogPost.create({ title: title });

      const query = BlogPost.count({ title: title });

      const found = await query.exec('findOne');

      assert.equal(found.id, created.id);
",371
3ae89172dd14aee576d97fb6c47b54e7d76640c0,"const { Schema } = require('mongoose');
  const BlogPost = new Schema({ title: String });
  
  it('find()', async () => {
    try {
      await BlogPost.create(
        { title: 'interoperable find as promise 2' },
        function (err, createdOne, createdTwo) {
          assert.ifError(err);
    
          const query = BlogPost.find({ title: 'interoperable find as promise 2' }).sort('_id');
    
          await query.exec().then((found) => {
            assert.ifError(err);
            assert.equal(found.length, 2);
            assert.equal(found[0].id, createdOne.id);
            assert.equal(found[1].id, createdTwo.id);
          });
        }
      );
    } catch (error) {
      done(new Error(error));
    }
  });
  
  it.skip('remove()', async () => {
    try {
      await BlogPost.create({ title: 'interoperable remove as promise 2' }).then(() => {
        return BlogPost.remove({ title: 'interoperable remove as promise 2' });
      }).then(() => {
        return BlogPost.count({ title: 'interoperable remove as promise 2' });
      }).then((count) => {
        assert.equal(count, 0);
      });
    } catch (error) {
      done(new Error(error));
    }
  });
  
  it('are thenable', async () => {
    try {
      const peopleSchema = new Schema({ name: String, likes: ['ObjectId'] });
      const P = db.model('Test', peopleSchema);
    
      await BlogPost.create(
        { title: 'then promise 1' },
        { title: 'then promise 2' },
        { title: 'then promise 3' },
        function (err, d1, d2, d3) {
          assert.ifError(err);
    
          await P.create(
            { name: 'brandon', likes: [d1] },
            { name: 'ben', likes: [d2] },
            { name: 'bernie', likes: [d3] }
          );
        }
      );
    
      const promise = BlogPost.find({ title: /^then promise/ }).select('_id').exec();
    
      await promise.then((blogs) => {
        const ids = blogs.map(function (m) {
          return m._id;
        });
    
        return P.where('likes').in(ids).exec();
      }).then((people) => {
        assert.equal(people.length, 3);
        return people;
      }).then(() => {
        done();
      }, (err) => {
        done(new Error(err));
      });
    } catch (error) {
      done(new Error(error));
    }
  });
  
  it('hides private props', async () => {
    try {
      const promise = BlogPost.find({ title: /^then promise/ }).select('_id').exec();
    
      await promise.then((blogs) => {
        const ids = blogs.map(function (m) {
          return m._id;
        });
    
        return P.where('likes').in(ids).exec();
      }).then((people) => {
        assert.equal(people.length, 3);
        return people;
      }).then(() => {
        done();
      }, (err) => {
        done(new Error(err));
      });
    } catch (error) {
      done(new Error(error));
    }
  });","      it('find()', async function() {

        const [createdOne, createdTwo] = await BlogPost.create(

          { title: 'interoperable find as promise 2' }

        );

        const query = BlogPost.find({ title: 'interoperable find as promise 2' }).sort('_id');

        const found = await query.exec();

        assert.equal(found.length, 2);

        assert.equal(found[0].id, createdOne.id);

        assert.equal(found[1].id, createdTwo.id);

    it('hides private props', function() {
",2435
3ae89172dd14aee576d97fb6c47b54e7d76640c0,"savePromise.then(() => {
  assert.ok(!doc.$__.$versionError);
  assert.ok(!doc.$__.saveOptions);
  done();
}).catch(done);

it('should overwrite arrays when directly set (gh-1126)', async () => {
  const b = await BlogPost.create({ title: 'gh-1126', numbers: [1, 2] });
  assert.deepEqual([1, 2].join(), b.numbers.join());
  b.numbers = [];
  b.numbers.push(3);
  const d = b.$__delta()[1];
  assert.ok('$set' in d, 'invalid delta ' + JSON.stringify(d));
  assert.ok(Array.isArray(d.$set.numbers));
  assert.equal(d.$set.numbers.length, 1);
  assert.equal(d.$set.numbers[0], 3);
  await b.save();
  const newB = await BlogPost.findById(b._id);
  assert.ok(Array.isArray(newB.numbers));
  assert.equal(newB.numbers.length, 1);
  assert.equal(newB.numbers[0], 3);
  done();
});

it('should use $set when subdoc changed before pulling (gh-1303)', async () => {
  const b = await BlogPost.create({ title: 'gh-1303', comments: [{ body: 'a' }, { body: 'b' }, { body: 'c' }] });
  b.comments[2].body = 'changed';
  b.comments.pull(b.comments[1]);
  assert.equal(b.comments.length, 2);
  assert.equal(b.comments[0].body, 'a');
  assert.equal(b.comments[1].body, 'changed');
  const d = b.$__delta()[1];
  assert.ok('$set' in d, 'invalid delta ' + JSON.stringify(d));
  assert.ok(Array.isArray(d.$set.comments));
  assert.equal(d.$set.comments.length, 2);
  await b.save();
  const newB = await BlogPost.findById(b._id);
  assert.ok(Array.isArray(newB.numbers));
  assert.equal(newB.comments.length, 2);
  assert.equal(newB.comments[0].body, 'a');
  assert.equal(newB.comments[1].body, 'changed');
  done();
});

it('with conflicted data in db', async () => {
  await m.save((err) => {
    assert.strictEqual(err, null);
    assert.strictEqual('GI', m.namey.first);
    assert.strictEqual('Joe', m.namey.last);
    done();
  });
});

it('with positional notation on path not existing in schema (gh-1048)', async () => {
  const b = await BlogPost.create({ title: 'gh-1048', numbers: [1, 2] });
  b.numbers.$[1].set(3);
  const d = b.$__delta()[1];
  assert.ok('$set' in d, 'invalid delta ' + JSON.stringify(d));
  await b.save();
  const newB = await BlogPost.findById(b._id);
  assert.ok(Array.isArray(newB.numbers));
  assert.equal(newB.numbers[1], 3);
  done();
});","      await savePromise;

      assert.ok(!doc.$__.$versionError);

      assert.ok(!doc.$__.saveOptions);

    it('should overwrite arrays when directly set (gh-1126)', async function() {

      let b = await BlogPost.create({ title: 'gh-1126', numbers: [1, 2] });

      b = await BlogPost.findById(b._id);

      assert.deepEqual([1, 2].join(), b.numbers.join());



      b.numbers = [];

      b.numbers.push(3);



      let d = b.$__delta()[1];

      assert.ok('$set' in d, 'invalid delta ' + JSON.stringify(d));

      assert.ok(Array.isArray(d.$set.numbers));

      assert.equal(d.$set.numbers.length, 1);

      assert.equal(d.$set.numbers[0], 3);



      await b.save();

      b = await BlogPost.findById(b._id);

      assert.ok(Array.isArray(b.numbers));

      assert.equal(b.numbers.length, 1);

      assert.equal(b.numbers[0], 3);



      b.numbers = [3];

      d = b.$__delta();

      assert.ok(!d);



      b.numbers = [4];

      b.numbers.push(5);

      await b.save();

      b = await BlogPost.findById(b._id);

      assert.ok(Array.isArray(b.numbers));

      assert.equal(b.numbers.length, 2);

      assert.equal(b.numbers[0], 4);

      assert.equal(b.numbers[1], 5);

    it('should use $set when subdoc changed before pulling (gh-1303)', async function() {

      let b = await B.create(

        { title: 'gh-1303', comments: [{ body: 'a' }, { body: 'b' }, { body: 'c' }] }

      );



      b = await B.findById(b._id);

      b.comments[2].body = 'changed';

      b.comments.pull(b.comments[1]);



      assert.equal(b.comments.length, 2);

      assert.equal(b.comments[0].body, 'a');

      assert.equal(b.comments[1].body, 'changed');



      const d = b.$__delta()[1];

      assert.ok('$set' in d, 'invalid delta ' + JSON.stringify(d));

      assert.ok(Array.isArray(d.$set.comments));

      assert.equal(d.$set.comments.length, 2);



      await b.save();

      b = await B.findById(b._id);

      assert.ok(Array.isArray(b.comments));

      assert.equal(b.comments.length, 2);

      assert.equal(b.comments[0].body, 'a');

      assert.equal(b.comments[1].body, 'changed');

    it('with conflicted data in db', async function() {

      await m.save();

      assert.strictEqual('GI', m.namey.first);

      assert.strictEqual('Joe', m.namey.last);

    it('with positional notation on path not existing in schema (gh-1048)', async function() {
",1176
3ae89172dd14aee576d97fb6c47b54e7d76640c0,"async function test() {
  const schema = new Schema({
    name: String,
  });
  const Movie = db.model('Movie', schema);

  const arr = [{ name: 'Star Wars' }, { name: 'The Empire Strikes Back' }];
  try {
    const docs = await Movie.insertMany(arr);
    assert.equal(docs.length, 2);
    assert.ok(!docs[0].isNew);
    assert.ok(!docs[1].isNew);
    const foundDocs = await Movie.find({});
    assert.equal(foundDocs.length, 2);
    done();
  } catch (error) {
    assert.ifError(error);
  }
}","      const docs = await Movie.insertMany(movies);

      assert.equal(docs.length, 1);

      const doc = await Movie.findOne({ name: 'Predator' });

      assert.equal(doc.leadActor.toHexString(), arnold._id.toHexString());
",364
1a32861360f8326ad3f8182eee9c45636e76240e,"it('should have fields when create', async function () {
  const doc = await cat.save();
  assert.ok(doc.createdAt);
  assert.ok(doc.updatedAt);
  assert.ok(doc.createdAt.getTime() === doc.updatedAt.getTime());
});

it('sets timestamps on findOneAndUpdate', async function () {
  const doc = await Cat.findOneAndUpdate({ name: 'notexistname' }, { $set: {} }, { upsert: true, new: true });
  assert.ok(doc.createdAt);
  assert.ok(doc.updatedAt);
  assert.ok(doc.createdAt.getTime() === doc.updatedAt.getTime());
});

it('sets timestamps on findOneAndReplace (gh-9951)', async function () {
  const doc = await Cat.findOneAndReplace({ name: 'notexistname' }, {}, { upsert: true, new: true });
  assert.ok(doc.createdAt);
  assert.ok(doc.updatedAt);
  assert.ok(doc.createdAt.getTime() === doc.updatedAt.getTime());
});

it('should change updatedAt when save', async function () {
  const old = await Cat.findOne({ name: 'newcat' }, function (err, doc) {
    doc.hobby = 'coding';
    return doc.save();
  });
  assert.ok(doc.updatedAt.getTime() > old.getTime());
});

it('should not change updatedAt when save with no modifications', async function () {
  const old = await Cat.findOne({ name: 'newcat' }, function (err, doc) {
    return doc.save();
  });
  assert.ok(doc.updatedAt.getTime() === old.getTime());
});","    it('should have fields when create', async function() {

      const doc = await cat.save();

      assert.ok(doc.createdAt);

      assert.ok(doc.updatedAt);

      assert.ok(doc.createdAt.getTime() === doc.updatedAt.getTime());

    it('sets timestamps on findOneAndUpdate', async function() {

      const doc = await Cat.findOneAndUpdate({ name: 'notexistname' }, { $set: {} }, { upsert: true, new: true });

      assert.ok(doc.createdAt);

      assert.ok(doc.updatedAt);

      assert.ok(doc.createdAt.getTime() === doc.updatedAt.getTime());

    it('sets timestamps on findOneAndReplace (gh-9951)', async function() {

      const doc = await Cat.findOneAndReplace({ name: 'notexistname' }, {}, { upsert: true, new: true });

      assert.ok(doc.createdAt);

      assert.ok(doc.updatedAt);

      assert.ok(doc.createdAt.getTime() === doc.updatedAt.getTime());

    it('should change updatedAt when save', async function() {

      const doc = await Cat.findOne({ name: 'newcat' });

      const old = doc.updatedAt;

      doc.hobby = 'coding';

      await doc.save();

      assert.ok(doc.updatedAt.getTime() > old.getTime());

    it('should not change updatedAt when save with no modifications', async function() {

      const doc = await Cat.findOne({ name: 'newcat' });

      const old = doc.updatedAt;

      await doc.save();

      assert.ok(doc.updatedAt.getTime() === old.getTime());
",193
81620f354d4fd7cabf6eb8a49a0a3ad50d813f42,"async function () {
  try {
    await instance.save();
    const query = { _id: instance._id };
    const update = { $set: { name: value } };
    await Model.updateOne(query, update);
    done();
  } catch (error) {
    assert.ifError(error);
  }
}","      await instance.save();



      const query = { _id: instance._id };

      const update = { $set: { name: value } };



      return Model.updateOne(query, update);

    it('versioning with setDefaultsOnInsert (gh-2593)', async function() {
",106
81620f354d4fd7cabf6eb8a49a0a3ad50d813f42,"Model.updateOne(q, u, o).then(async () => {
  await done();
});","      await Model.updateOne(q, u, o);
",49
55c53d0c813f88d9e7a1d45e95a2b62b3dd7fdf9,"async function test(id) {
  try {
    const doc = await Parent.findById(id).populate('children.toy.value');
    assert.equal(doc.children[0].toy.value.name, 'model-A');
    assert.equal(doc.children[1].toy.value, null);
    assert.equal(doc.children[2].toy.value.name, 'model-B');
  } catch (error) {
    done();
  }
}","      const toyA = await ModelA.create({ name: 'model-A' });

      const toyB = await ModelB.create({ name: 'model-B' });

      let doc = await Parent.create({

        children: [

          {

            name: 'Child 1',

            toy: { kind: 'Test1', value: toyA._id }

          },

          {

            name: 'Child 2'

          },

          {

            name: 'Child 3',

            toy: { kind: 'Test2', value: toyB._id }

          }

        ]



      doc = await Parent.findById(doc._id);

      await doc.populate('children.toy.value');

      assert.equal(doc.children[0].toy.value.name, 'model-A');

      assert.equal(doc.children[1].toy.value, null);

      assert.equal(doc.children[2].toy.value.name, 'model-B');


",510
1a28ba52366a2e58627ff6f5e0bd12e684d7ac88,"async function close(callback) {
  try {
    const result = await this.cursor.close();
    this.emit('close');
    return null;
  } catch (error) {
    cb(error);
    this.listeners('error').length > 0 && this.emit('error', error);
  }
}","QueryCursor.prototype.close = async function close() {

  if (typeof arguments[0] === 'function') {

    throw new MongooseError('QueryCursor.prototype.close() no longer accepts a callback');

  }

  try {

    await this.cursor.close();

    this.emit('close');

  } catch (error) {

    this.listeners('error').length > 0 && this.emit('error', error);

    throw error;

  }
",217
e2211846a666289476d8d9856476d6281b56cf2a,"callback = this.$handleCallbackError(callback);

return await this.db.base._promiseOrCallback(callback, async (cb) => {
  cb = this.$wrapCallback(cb);
  try {
    const collectionName = this.$__collection.collectionName;
    const options = {};
    const db = await this.db.createCollection(collectionName, options);
    if (db == null || db.code !== 48) {
      cb(err);
    }
  } catch (error) {
    console.error(error);
  }
});","  try {

    await this.db.createCollection(this.$__collection.collectionName, options);

  } catch (err) {

    if (err != null && (err.name !== 'MongoServerError' || err.code !== 48)) {

      throw err;

    }

  }

  return this.$__collection;
",295
87592672b7cd33510124d3bcc4c88a48b3419934,"async function initEvent() {
  try {
    const Event = await Event.init();
    console.log('Indexes are done building!');
  } catch (error) {
    console.error(error);
  }
}

initEvent();"," *     await Event.init();

 *     console.log('Indexes are done building!');
",118
e201f3b3edc3132ab475cd1c419e1e93fc0a0f7c,"async function migration() {
  
    try {
        const diff = await TestModel.diffIndexes();
        assert.deepEqual(diff, { toCreate: [{ age: 1, title: 'text', description: 'text' }], toDrop: [] });
        
        await TestModel.syncIndexes();
        
        const diff2 = await TestModel.diffIndexes();
        assert.deepEqual(diff2, { toCreate: [], toDrop: [] });
    } catch (error) {
        console.log(error);
    } finally {
        done();
    }
}","      await TestModel.init();

      const diff = await TestModel.diffIndexes();

      assert.deepEqual(diff, { toCreate: [{ age: 1, title: 'text', description: 'text' }], toDrop: [] });

      await TestModel.syncIndexes();



      const diff2 = await TestModel.diffIndexes();

      assert.deepEqual(diff2, { toCreate: [], toDrop: [] });
",150
32e4a2efef4fea3679530f20e28122f357adb352,"async function saveDoc() {
    try {
        await doc.save();
    } catch (e) {
        // handle error
    }
}","        await doc.save();
",86
9c7618113e4809d4a4934cb79e67496b79cb87b6,"it('should allow setting values to a given property gh-13510', async function() {

    await doc.save();

  });","      it('should allow setting values to a given property gh-13510', async function() {

        await m.connect('mongodb://127.0.0.1:27017/gh13510');

        await Test.deleteMany({});

        await doc.save();
",107
020a8f3a48990fd7d4588964755420b90844baef,"console.log(`Processing ~${files.length} files`);

  async function runAsync() {
    try {
      await pugifyAllFiles();
      await copyAllRequiredFiles();
      console.log(""Done Processing"");
    } catch (error) {
      // handle error here
    }
  }","  (async function main() {

    console.log(`Processing ~${files.length} files`);



    await deleteAllHtmlFiles();

    await pugifyAllFiles();

    await copyAllRequiredFiles();

    if (process.env.DOCS_DEPLOY) {

      await moveDocsToTemp();

    }



    console.log('Done Processing');

  })();
",162
467db46d2ca711ba4807eaf459e2c521628e8535,"async function populateData() {

const cache = {};
try {
   const res = await _populate(_this, docs, paths, cache);
   return res;
} catch (err) {
  console.error(err);
}
}","  await _populate(_this, docs, paths);

  return docs;
",120
d441d79c6ca3eb3c0f64bba1217375e6505401c0,"async function renderHtml() {
try{
 const html = await render(process.argv[2] || '/');
 console.log(html);
}catch(err){
 console.error(err)
 process.exit(1)
}
}","const debug = (label, ...args) => console.debug(`> ${label}:`, ...args)



async function main () {

  const url = process.argv[2] || '/'

  debug('URL', url)



  const { html, status, headers } = await render(url)



  debug('Status', status)

  for (const header in headers) {

    debug(header, headers[header])

  }



  console.log('\n', html)

}



main().catch((err) => {

  console.error(err)

  process.exit(1)

})
",295
d441d79c6ca3eb3c0f64bba1217375e6505401c0,"async function (req, res) {
  const start = process.hrtime()
  try {
    const html = await render(req.url)
    const end = process.hrtime(start)
    const time = ((end[0] * 1e9) + end[1]) / 1e6
    res.setHeader('X-Nuxt-Coldstart', global._coldstart + 'ms')
    res.setHeader('X-Nuxt-Responsetime', time + 'ms')
    return html
  } catch (err) {
    console.error(err)
    res.end('Error: ' + err)
  }
}","module.exports = async (req, res) => {

  try {

    const { html, status, headers } = await render(req.url, { req, res })

    for (const header in headers) {

      res.setHeadeer(header, headers[header])

    }

    res.status(status)

  } catch (error) {

    console.error(error)

    res.status(500)

    res.end('Internal Error: ' + error)

  }
",261
2db79adfb8a9db269c43042f1c3912a38c0621b3,"async function resolvePlugins(builder, app) {
  try {
    const plugins = await resolveFiles(builder, 'plugins/**/*.{js,ts}', app.dir);
    return plugins.map((src) => ({
      src,
      mode: getPluginMode(src),
    }));
  } catch (error) {
    console.error(error);
  }
}","const getPluginMode = (src: string) => {

  return mode as NuxtPlugin['mode']

export async function resolvePlugins (builder: Builder, app: NuxtApp) {

  const plugins = await resolveFiles(builder, 'plugins/**/*.{js,ts}', app.dir)



  return plugins.map(src => ({

    src,

    mode: getPluginMode(src)

  })

  )
",167
e45a780714c1ba44807ba6dbce3f2b5209ec0339,"import { CreateOptions } from '#app'

const entry = process.server
  ? (ctx?: CreateOptions['ssrContext']) => import('#app/bootstrap').then(m => m.default(ctx))
  : () => import('#app/bootstrap').then(m => m.default)

async function runEntry() {
  await entry()
}

export default async function entry() {
  try {
    const result = await runEntry()
  } catch (err) {
    // handle error
  }
}","import { createSSRApp, createApp, nextTick } from 'vue'

import { createNuxtApp, applyPlugins, normalizePlugins, CreateOptions } from '#app'

import '#build/css'

// @ts-ignore

import _plugins from '#build/plugins'

// @ts-ignore

import RootComponent from '#build/root-component.mjs'

// @ts-ignore

import AppComponent from '#build/app-component.mjs'

let entry: Function



const plugins = normalizePlugins(_plugins)



if (process.server) {

  entry = async function createNuxtAppServer (ssrContext: CreateOptions['ssrContext'] = {}) {

    const vueApp = createApp(RootComponent)

    vueApp.component('App', AppComponent)



    const nuxt = createNuxtApp({ vueApp, ssrContext })



    await applyPlugins(nuxt, plugins)



    await nuxt.hooks.callHook('app:created', vueApp)



    return vueApp

  }

}

  // TODO: temporary webpack 5 HMR fix

  // https://github.com/webpack-contrib/webpack-hot-middleware/issues/390

  // @ts-ignore

  if (process.dev && import.meta.webpackHot) {

    // @ts-ignore

    import.meta.webpackHot.accept()

  }



  entry = async function initApp () {

    const isSSR = Boolean(window.__NUXT__?.serverRendered)

    const vueApp = isSSR ? createSSRApp(RootComponent) : createApp(RootComponent)

    vueApp.component('App', AppComponent)



    const nuxt = createNuxtApp({ vueApp })



    await applyPlugins(nuxt, plugins)



    await nuxt.hooks.callHook('app:created', vueApp)

    await nuxt.hooks.callHook('app:beforeMount', vueApp)



    nuxt.hooks.hookOnce('app:suspense:resolve', () => {

      nuxt.isHydrating = false

    })



    vueApp.mount('#__nuxt')



    await nuxt.hooks.callHook('app:mounted', vueApp)

    await nextTick()

  }



  entry().catch((error) => {

    console.error('Error while mounting app:', error) // eslint-disable-line no-console

  })

export default (ctx?: CreateOptions['ssrContext']) => entry(ctx)
",1588
f73bb1de0a9b22714810cff4999f898c77eafa67,"async function handleRedirect(nuxtApp, isExternal, toPath, options) {
  const redirectLocation = isExternal ? toPath : joinURL(useRuntimeConfig().app.baseURL, fullPath);

  try {
    await nuxtApp.callHook('app:redirected');
    return sendRedirect(nuxtApp.ssrContext!.event, redirectLocation, options?.redirectCode || 302);
  } catch (error) {
    console.log(error);
  } finally {
    if (!inMiddleware) return false;
  }
}

router.beforeEach((final) => final.fullPath === fullPath ? handleRedirect() : undefined);","    if (nuxtApp.ssrContext) {

      const location = isExternal ? toPath : joinURL(useRuntimeConfig().app.baseURL, fullPath)



      async function redirect () {

        // TODO: consider deprecating in favour of `app:rendered` and removing

        await nuxtApp.callHook('app:redirected')

        const encodedLoc = location.replace(/""/g, '%22')

        nuxtApp.ssrContext!._renderResponse = {

          statusCode: sanitizeStatusCode(options?.redirectCode || 302, 302),

          body: `<!DOCTYPE html><html><head><meta http-equiv=""refresh"" content=""0; url=${encodedLoc}""></head></html>`,

          headers: { location }

        }

        return inMiddleware ? /* abort route navigation */ false : undefined

      }

      // We wait to perform the redirect last in case any other middleware will intercept the redirect

      // and redirect somewhere else instead.

        router.afterEach(final => (final.fullPath === fullPath) ? redirect() : undefined)
",651
099ed0885239f070f7c7e1d703b57cc64c3f634d,"this.fetchBuiltInCMap = async (name) => {
  try {
    const data = await this.handler.sendWithPromise('FetchBuiltInCMap', { name });
    if (data.compressionType !== CMapCompressionType.NONE) {
      // Given the size of uncompressed CMaps, only cache compressed ones.
      this.builtInCMapCache.set(name, data);
    }
    return data;
  } catch (error) {
    console.error(error);
  }
};","    this.fetchBuiltInCMap = async (name) => {

        return this.builtInCMapCache.get(name);

      const data = await this.handler.sendWithPromise('FetchBuiltInCMap',

                                                      { name, });

      if (data.compressionType !== CMapCompressionType.NONE) {

        // Given the size of uncompressed CMaps, only cache compressed ones.

        this.builtInCMapCache.set(name, data);

      }

      return data;
",172
099ed0885239f070f7c7e1d703b57cc64c3f634d,"async function XRef_fetchIfRefAsync(obj, suppressEncryption) {
    return Promise.resolve(obj);
}

async function XRef_fetchAsync(ref, suppressEncryption) {
    const streamManager = this.stream.manager;
    const xref = this;

    try {
        resolve(xref.fetch(ref, suppressEncryption));
    } catch (e) {
        if (e instanceof MissingDataException) {
            await streamManager.requestRange(e.begin, e.end);
            XRef_fetchAsync(ref, suppressEncryption);
        } else {
            reject(e);
        }
    }
}","    async fetchIfRefAsync(obj, suppressEncryption) {

        return obj;

    async fetchAsync(ref, suppressEncryption) {

      try {

        return this.fetch(ref, suppressEncryption);

      } catch (ex) {

        if (!(ex instanceof MissingDataException)) {

          throw ex;

        await this.pdfManager.requestRange(ex.begin, ex.end);

        return this.fetchAsync(ref, suppressEncryption);

      }
",235
099ed0885239f070f7c7e1d703b57cc64c3f634d,"ensure(obj, prop, args) {

    return new Promise(function(resolve) {

      const value = obj[prop];

      if (typeof value === 'function') {

        resolve(value.apply(obj, args));

      } else {

        resolve(value);

      }

    });","  async ensure(obj, prop, args) {

    const value = obj[prop];

    if (typeof value === 'function') {

      return value.apply(obj, args);

    }

    return value;
",102
099ed0885239f070f7c7e1d703b57cc64c3f634d,"async function ensure(obj, prop, args) {
    try {
        const value = obj[prop];
        let result;
        if (typeof value === 'function') {
            result = value.apply(obj, args);
        } else {
            result = value;
        }
        return result;
    } catch (ex) {
        if (!(ex instanceof MissingDataException)) {
            throw ex;
        }
        this.streamManager.requestRange(ex.begin, ex.end)
            .then(ensureHelper, reject);
    }
}","  async ensure(obj, prop, args) {

    try {

      const value = obj[prop];

      if (typeof value === 'function') {

        return value.apply(obj, args);

      }

      return value;

    } catch (ex) {

      if (!(ex instanceof MissingDataException)) {

        throw ex;

      }

      await this.requestRange(ex.begin, ex.end);

      return this.ensure(obj, prop, args);

    }
",151
099ed0885239f070f7c7e1d703b57cc64c3f634d,"async read() {
  try {
    const value = await this._headersCapability.promise;

    return await this._reader.read().then(({ value, done }) => {
      if (done) {
        return Promise.resolve({ value, done });
      }

      this._loaded += value.byteLength;

      if (this.onProgress) {
        this.onProgress({
          loaded: this._loaded,
          total: this._contentLength,
        });
      }

      const buffer = new Uint8Array(value).buffer;

      return Promise.resolve({ value: buffer, done: false });
    });
  } catch (error) {
    console.log(error);
  }
}","  async read() {

    await this._headersCapability.promise;

    const { value, done, } = await this._reader.read();

    if (done) {

      return { value, done, };

    }

    this._loaded += value.byteLength;

    if (this.onProgress) {

      this.onProgress({

        loaded: this._loaded,

        total: this._contentLength,

    }

    let buffer = new Uint8Array(value).buffer;

    return { value: buffer, done: false, };
",201
099ed0885239f070f7c7e1d703b57cc64c3f634d,"async read() {
  try {
    await this._readCapability.promise;
    let result = await this._reader.read();
    if (result.done) {
      return Promise.resolve({ value: result.value, done: true });
    } else {
      this._loaded += result.value.byteLength;
      if (this.onProgress) {
        this.onProgress({ loaded: this._loaded, });
      }
      let buffer = new Uint8Array(result.value).buffer;
      return Promise.resolve({ value: buffer, done: false });
    }
  } catch (err) {
    console.error(""Error reading file"", err);
  }
}","  async read() {

    await this._readCapability.promise;

    const { value, done, } = await this._reader.read();

    if (done) {

      return { value, done, };

    }

    this._loaded += value.byteLength;

    if (this.onProgress) {

      this.onProgress({ loaded: this._loaded, });

    }

    let buffer = new Uint8Array(value).buffer;

    return { value: buffer, done: false, };
",201
099ed0885239f070f7c7e1d703b57cc64c3f634d,"async read() {
  try {
    await this._readCapability.promise;
  } catch (error) {
    if (!this._done && !this._storedError) {
      return Promise.reject(error);
    } else {
      return Promise.resolve({ value: undefined, done: true });
    }
  }
  const chunk = this._readableStream.read();
  if (chunk === null) {
    this._readCapability = createPromiseCapability();
    return await this.read();
  }
  this._loaded += chunk.length;
  if (this.onProgress) {
    this.onProgress({
      loaded: this._loaded,
      total: this._contentLength,
    });
  }
  const buffer = new Uint8Array(chunk).buffer;
  return Promise.resolve({ value: buffer, done: false });
}","  async read() {

    await this._readCapability.promise;

    if (this._done) {

      return { value: undefined, done: true, };

    }

    if (this._storedError) {

      throw this._storedError;

    }

    let chunk = this._readableStream.read();

    if (chunk === null) {

      this._readCapability = createPromiseCapability();

      return this.read();

    }

    this._loaded += chunk.length;

    if (this.onProgress) {

      this.onProgress({

        loaded: this._loaded,

        total: this._contentLength,

      });

    }

    // Ensure that `read()` method returns ArrayBuffer.

    let buffer = new Uint8Array(chunk).buffer;

    return { value: buffer, done: false, };
",266
099ed0885239f070f7c7e1d703b57cc64c3f634d,"async read() {

    try {

      let capability = await this._readCapability;

      if (this._done) {

        return { value: undefined, done: true };

      }

      if (this._storedError) {

        throw this._storedError;

      }

      let chunk = this._readableStream.read();

      if (chunk === null) {

        this._readCapability = createPromiseCapability();

        return await this.read();

      }

      this._loaded += chunk.length;

      if (this.onProgress) {

        this.onProgress({ loaded: this._loaded });

      }

      // Ensure that `read()` method returns ArrayBuffer.

      let buffer = new Uint8Array(chunk).buffer;

      return { value: buffer, done: false };

    } catch (err) {

      return Promise.reject(err);

    }

  }","  async read() {

    await this._readCapability.promise;

    if (this._done) {

      return { value: undefined, done: true, };

    }

    if (this._storedError) {

      throw this._storedError;

    }

    let chunk = this._readableStream.read();

    if (chunk === null) {

      this._readCapability = createPromiseCapability();

      return this.read();

    }

    this._loaded += chunk.length;

    if (this.onProgress) {

      this.onProgress({ loaded: this._loaded, });

    }

    // Ensure that `read()` method returns ArrayBuffer.

    let buffer = new Uint8Array(chunk).buffer;

    return { value: buffer, done: false, };
",151
099ed0885239f070f7c7e1d703b57cc64c3f634d,"async function resolveCall(fn, args = [], thisArg = null) {
  return Promise.resolve(undefined);
}","async function resolveCall(fn, args, thisArg = null) {

    return;

  return fn.apply(thisArg, args);
",40
b0fa02e8456b6a27d6d3b242c4301a4e70937b17,"async getLanguage() {
  try {
    const l10n = await this._ready;
    return l10n.getLanguage();
  } catch (error) {
    // Handle error
  }
}

async getDirection() {
  try {
    const l10n = await this._ready;
    return l10n.getDirection();
  } catch (error) {
    // Handle error
  }
}

async get(property, args, fallback) {
  try {
    const l10n = await this._ready;
    return l10n.get(property, args, fallback);
  } catch (error) {
    // Handle error
  }
}

async translate(element) {
  try {
    const l10n = await this._ready;
    return l10n.translate(element);
  } catch (error) {
    // Handle error
  }
}","  async getLanguage() {

    const l10n = await this._ready;

    return l10n.getLanguage();

  async getDirection() {

    const l10n = await this._ready;

    return l10n.getDirection();

  async get(property, args, fallback) {

    const l10n = await this._ready;

    return l10n.get(property, args, fallback);

  async translate(element) {

    const l10n = await this._ready;

    return l10n.translate(element);
",211
64e70fc16ffb102524215d02b5b3ebabddbacc09,"register(name, element, callerCloseMethod = null, canForceClose = false) {

    return new Promise((resolve) => {

      let container;

      if (!name || !element || !(container = element.parentNode)) {

        throw new Error('Not enough parameters.');

      } else if (this._overlays[name]) {

        throw new Error('The overlay is already registered.');

      }

      this._overlays[name] = {

        element,

        container,

        callerCloseMethod,

        canForceClose,

      };

      resolve();

    });

  async function() {

    let container;

    if (!name || !element || !(container = element.parentNode)) {

      throw new Error('Not enough parameters.');

    } else if (this._overlays[name]) {

      throw new Error('The overlay is already registered.');

    }

    this._overlays[name] = {

      element,

      container,

      callerCloseMethod,

      canForceClose,

    };

    resolve();

  });

  ```

The migrated code uses `async/await` syntax instead of `Promise` chain. The first step is to identify the promise chains using `.then()` and `.catch()`, or `.finally()`. In this case, there are two promise chains: one for the `new Promise()` statement and another for the `throw new Error()` statements.

The next step is to replace the `.then()` callbacks with `await`. This involves assigning the resolved value of the promise to a variable using the `await` keyword. In this case, we assign the resolved value to the `container` variable.

After replacing the `.then()` and `.catch()` or `.finally()` calls with `await`, we wrap the logic in an `async function`. This allows us to use `await` within the function.

Finally, we implement error handling by replacing the `.catch()` method with a `try...catch` block. This enables us to handle potential errors and prevent them from propagating to the caller.","  async register(name, element, callerCloseMethod = null,

                 canForceClose = false) {

    let container;

    if (!name || !element || !(container = element.parentNode)) {

      throw new Error('Not enough parameters.');

    } else if (this._overlays[name]) {

      throw new Error('The overlay is already registered.');

    }

    this._overlays[name] = {

      element,

      container,

      callerCloseMethod,

      canForceClose,

    };
",1407
64e70fc16ffb102524215d02b5b3ebabddbacc09,"async function unregister(name) {
  try {
    if (!this._overlays[name]) {
      throw new Error('The overlay does not exist.');
    } else if (this._active === name) {
      throw new Error('The overlay cannot be removed while it is active.');
    }
    delete this._overlays[name];
  } catch (error) {
    console.log(error);
  } finally {
    return;
  }
}","  async unregister(name) {

    if (!this._overlays[name]) {

      throw new Error('The overlay does not exist.');

    } else if (this._active === name) {

      throw new Error('The overlay cannot be removed while it is active.');

    }

    delete this._overlays[name];
",98
64e70fc16ffb102524215d02b5b3ebabddbacc09,"async open(name) {

  if (!this._overlays[name]) {

    throw new Error('The overlay does not exist.');

  } else if (this._active) {

    if (this._overlays[name].canForceClose) {

      this._closeThroughCaller();

    } else if (this._active === name) {

      throw new Error('The overlay is already active.');

    } else {

      throw new Error('Another overlay is currently active.');

    }

  this._active = name;

  this._overlays[this._active].element.classList.remove('hidden');

  this._overlays[this._active].container.classList.remove('hidden');

  window.addEventListener('keydown', this._keyDownBound);

  return;

}","  async open(name) {

    if (!this._overlays[name]) {

      throw new Error('The overlay does not exist.');

    } else if (this._active) {

      if (this._overlays[name].canForceClose) {

        this._closeThroughCaller();

      } else if (this._active === name) {

        throw new Error('The overlay is already active.');

      } else {

        throw new Error('Another overlay is currently active.');

    }

    this._active = name;

    this._overlays[this._active].element.classList.remove('hidden');

    this._overlays[this._active].container.classList.remove('hidden');

    window.addEventListener('keydown', this._keyDownBound);
",41
64e70fc16ffb102524215d02b5b3ebabddbacc09,"async function close(name) {
  if (!this._overlays[name]) {
    throw new Error('The overlay does not exist.');
  } else if (!this._active) {
    throw new Error('The overlay is currently not active.');
  } else if (this._active !== name) {
    throw new Error('Another overlay is currently active.');
  }

  this._overlays[this._active].container.classList.add('hidden');
  this._overlays[this._active].element.classList.add('hidden');
  this._active = null;
  window.removeEventListener('keydown', this._keyDownBound);
}","  async close(name) {

    if (!this._overlays[name]) {

      throw new Error('The overlay does not exist.');

    } else if (!this._active) {

      throw new Error('The overlay is currently not active.');

    } else if (this._active !== name) {

      throw new Error('Another overlay is currently active.');

    }

    this._overlays[this._active].container.classList.add('hidden');

    this._overlays[this._active].element.classList.add('hidden');

    this._active = null;

    window.removeEventListener('keydown', this._keyDownBound);
",44
233b3274bf7973aa06a674dddef585f4313f3742,"async function writeToStorage(prefObj) {
    try {
        await localStorage.setItem('pdfjs.preferences', JSON.stringify(prefObj));
    } catch (error) {
        // Handle error
    }
}

async function readFromStorage() {
    let prefObj;
    try {
        prefObj = JSON.parse(localStorage.getItem('pdfjs.preferences'));
    } catch (error) {
        // Handle error
    }
    return prefObj;
}","  async _writeToStorage(prefObj) {

    localStorage.setItem('pdfjs.preferences', JSON.stringify(prefObj));

  async _readFromStorage(prefObj) {

    return JSON.parse(localStorage.getItem('pdfjs.preferences'));
",196
233b3274bf7973aa06a674dddef585f4313f3742,"async reset() {

     try {
       await this._initializedPromise;

       this.prefs = Object.assign(Object.create(null), this.defaults);

       return this._writeToStorage(this.defaults);

     } catch (error) {
       console.log('Error:', error.message);
     }
   }","  async reset() {

    await this._initializedPromise;

    this.prefs = Object.assign(Object.create(null), this.defaults);

    return this._writeToStorage(this.defaults);
",102
233b3274bf7973aa06a674dddef585f4313f3742,"async function set(name, value) {
    await this._initializedPromise;
    if (this.defaults[name] === undefined) {
      throw new Error(`Set preference: ""${name}"" is undefined.`);
    } else if (value === undefined) {
      throw new Error('Set preference: no value is specified.');
    }
    let valueType = typeof value;
    let defaultType = typeof this.defaults[name];
    if (valueType !== defaultType) {
      if (valueType === 'number' && defaultType === 'string') {
        value = value.toString();
      } else {
        throw new Error(
          `Set preference: ""${value}"" is a ${valueType}, expected a ${defaultType}.`
        );
      }
      if (valueType === 'number' && !Number.isInteger(value)) {
        throw new Error(`Set preference: ""${value}"" must be an integer.`);
      }
    }
    this.prefs[name] = value;
    return await this._writeToStorage(this.prefs);
  }
}","  async set(name, value) {

    await this._initializedPromise;

    let defaultValue = this.defaults[name];

    if (defaultValue === undefined) {

      throw new Error(`Set preference: ""${name}"" is undefined.`);

    } else if (value === undefined) {

      throw new Error('Set preference: no value is specified.');

    }

    let valueType = typeof value;

    let defaultType = typeof defaultValue;



    if (valueType !== defaultType) {

      if (valueType === 'number' && defaultType === 'string') {

        value = value.toString();

        throw new Error(`Set preference: ""${value}"" is a ${valueType}, ` +

                        `expected a ${defaultType}.`);

    } else {

      if (valueType === 'number' && !Number.isInteger(value)) {

        throw new Error(`Set preference: ""${value}"" must be an integer.`);

      }

    }

    this.prefs[name] = value;

    return this._writeToStorage(this.prefs);
",160
233b3274bf7973aa06a674dddef585f4313f3742,"get(name) {
  async function getPreference() {
    try {
      await this._initializedPromise;
      const defaultValue = this.defaults[name];
      if (defaultValue === undefined) {
        throw new Error(`Get preference: ""${name}"" is undefined.`);
      } else {
        const prefValue = this.prefs[name];
        return prefValue !== undefined ? prefValue : defaultValue;
      }
    } catch (err) {
      console.error(err);
      throw err;
    }
  }
  return getPreference();
}","  async get(name) {

    await this._initializedPromise;

    let defaultValue = this.defaults[name];

    if (defaultValue === undefined) {

      throw new Error(`Get preference: ""${name}"" is undefined.`);

    } else {

      let prefValue = this.prefs[name];

      if (prefValue !== undefined) {

        return prefValue;

    }

    return defaultValue;
",168
233b3274bf7973aa06a674dddef585f4313f3742,"getAll() {

  return this._initializedPromise.then(() => {
    return Object.assign(Object.create(null), this.defaults, this.prefs);
  });
}

async getAll() {

  try {
    await this._initializedPromise;
    const result = Object.assign(Object.create(null), this.defaults, this.prefs);
    return result;
  } catch (error) {
    console.log('Error in getAll:', error);
  }
}","  async getAll() {

    await this._initializedPromise;

    return Object.assign(Object.create(null), this.defaults, this.prefs);
",247
a60963f88224235ff6e8847a019dfd93da203738,"_writeToStorage() {

    return new Promise(async (resolve) => {

      let databaseStr = JSON.stringify(this.database);

      if (typeof PDFJSDev !== 'undefined' &&

          PDFJSDev.test('FIREFOX || MOZCENTRAL')) {

        sessionStorage.setItem('pdfjs.history', databaseStr);

      } else {

        localStorage.setItem('pdfjs.history', databaseStr);

      }

      resolve();

    });

  _readFromStorage() {

    return new Promise(async (resolve) => {

      if (typeof PDFJSDev !== 'undefined' &&

          PDFJSDev.test('FIREFOX || MOZCENTRAL')) {

        resolve(sessionStorage.getItem('pdfjs.history'));

      } else {

        resolve(localStorage.getItem('pdfjs.history'));

      }

    });

  set(name, val) {

    return this._initializedPromise.then(() => {

      this.file[name] = val;

      return this._writeToStorage();

    });

  setMultiple(properties) {

    return this._initializedPromise.then(() => {

      for (let name in properties) {

        this.file[name] = properties[name];

      }

      return this._writeToStorage();

    });

  get(name, defaultValue) {

    return this._initializedPromise.then(() => {

      let val = this.file[name];

      return val !== undefined ? val : defaultValue;

    });

  getMultiple(properties) {

    return this._initializedPromise.then(() => {

      let values = Object.create(null);

      for (let name in properties) {

        let val = this.file[name];

        values[name] = val !== undefined ? val : properties[name];

      }

      return values;

    });","  async _writeToStorage() {

    let databaseStr = JSON.stringify(this.database);

    if (typeof PDFJSDev !== 'undefined' &&

        PDFJSDev.test('FIREFOX || MOZCENTRAL')) {

      sessionStorage.setItem('pdfjs.history', databaseStr);

      return;

    }

    localStorage.setItem('pdfjs.history', databaseStr);

  async _readFromStorage() {

    if (typeof PDFJSDev !== 'undefined' &&

        PDFJSDev.test('FIREFOX || MOZCENTRAL')) {

      return sessionStorage.getItem('pdfjs.history');

    }

    return localStorage.getItem('pdfjs.history');

  async set(name, val) {

    await this._initializedPromise;

    this.file[name] = val;

    return this._writeToStorage();

  async setMultiple(properties) {

    await this._initializedPromise;

    for (let name in properties) {

      this.file[name] = properties[name];

    }

    return this._writeToStorage();

  async get(name, defaultValue) {

    await this._initializedPromise;

    let val = this.file[name];

    return val !== undefined ? val : defaultValue;

  async getMultiple(properties) {

    await this._initializedPromise;

    let values = Object.create(null);

    for (let name in properties) {

      let val = this.file[name];

      values[name] = val !== undefined ? val : properties[name];

    }

    return values;
",336
3eba7ea2673828865081d0f188477351803235f5,"async function _parseHashParameters() {
    try {
        const prefs = await this.preferences.getAll();
        if (typeof PDFJSDev !== 'undefined' && !PDFJSDev.test('PRODUCTION') && AppOptions.get('pdfBugEnabled')) {
            let hash = document.location.hash.substring(1);
            let hashParams = parseQueryString(hash);
            if ('disableworker' in hashParams && hashParams['disableworker'] === 'true') {
                await loadFakeWorker();
            }
            if ('disablerange' in hashParams) {
                AppOptions.set('disableRange', hashParams['disablerange'] === 'true');
            }
            if ('disablestream' in hashParams) {
                AppOptions.set('disableStream', hashParams['disablestream'] === 'true');
            }
            if ('disableautofetch' in hashParams) {
                AppOptions.set('disableAutoFetch', hashParams['disableautofetch'] === 'true');
            }
            if ('disablefontface' in hashParams) {
                AppOptions.set('disableFontFace', hashParams['disablefontface'] === 'true');
            }
            if ('disablehistory' in hashParams) {
                AppOptions.set('disableHistory', hashParams['disablehistory'] === 'true');
            }
            if ('webgl' in hashParams) {
                AppOptions.set('enableWebGL', hashParams['webgl'] === 'true');
            }
            if ('useonlycsszoom' in hashParams) {
                AppOptions.set('useOnlyCssZoom', hashParams['useonlycsszoom'] === 'true');
            }
            if ('verbosity' in hashParams) {
                AppOptions.set('verbosity', hashParams['verbosity'] | 0);
            }
            if ((typeof PDFJSDev !== 'undefined' || !PDFJSDev.test('PRODUCTION')) && hashParams['disablebcmaps'] === 'true') {
                AppOptions.set('cMapUrl', '../external/cmaps/');
                AppOptions.set('cMapPacked', false);
            }
            if ('textlayer' in hashParams) {
                switch (hashParams['textlayer']) {
                    case 'off':
                        AppOptions.set('textLayerMode', TextLayerMode.DISABLE);
                        break;
                    case 'visible':
                    case 'shadow':
                    case 'hover':
                        let viewer = this.appConfig.viewerContainer;
                        viewer.classList.add('textLayer-' + hashParams['textlayer']);
                        break;
                }
            }
            if ('pdfbug' in hashParams) {
                AppOptions.set('pdfBug', true);
                let enabled = hashParams['pdfbug'].split(',');
                await loadAndEnablePDFBug(enabled);
            }
            // It is not possible to change locale for the (various) extension builds.
        }
    } catch (e) {
        console.error('Error parsing hash parameters:', e);
    }
}","    try {

      const prefs = await this.preferences.getAll();

    } catch (reason) { }

  async _parseHashParameters() {

    if (typeof PDFJSDev !== 'undefined' && PDFJSDev.test('PRODUCTION') &&

        !AppOptions.get('pdfBugEnabled')) {

      return;

    }

    // Special debugging flags in the hash section of the URL.

    let hash = document.location.hash.substring(1);

    let hashParams = parseQueryString(hash);

    if ('disableworker' in hashParams &&

        hashParams['disableworker'] === 'true') {

      waitOn.push(loadFakeWorker());

    }

    if ('disablerange' in hashParams) {

      AppOptions.set('disableRange', hashParams['disablerange'] === 'true');

    }

    if ('disablestream' in hashParams) {

      AppOptions.set('disableStream', hashParams['disablestream'] === 'true');

    }

    if ('disableautofetch' in hashParams) {

      AppOptions.set('disableAutoFetch',

                     hashParams['disableautofetch'] === 'true');

    }

    if ('disablefontface' in hashParams) {

      AppOptions.set('disableFontFace',

                     hashParams['disablefontface'] === 'true');

    }

    if ('disablehistory' in hashParams) {

      AppOptions.set('disableHistory', hashParams['disablehistory'] === 'true');

    }

    if ('webgl' in hashParams) {

      AppOptions.set('enableWebGL', hashParams['webgl'] === 'true');

    }

    if ('useonlycsszoom' in hashParams) {

      AppOptions.set('useOnlyCssZoom', hashParams['useonlycsszoom'] === 'true');

    }

    if ('verbosity' in hashParams) {

      AppOptions.set('verbosity', hashParams['verbosity'] | 0);

    }

    if ((typeof PDFJSDev === 'undefined' || !PDFJSDev.test('PRODUCTION')) &&

        hashParams['disablebcmaps'] === 'true') {

      AppOptions.set('cMapUrl', '../external/cmaps/');

      AppOptions.set('cMapPacked', false);

    }

    if ('textlayer' in hashParams) {

      switch (hashParams['textlayer']) {

        case 'off':

          AppOptions.set('textLayerMode', TextLayerMode.DISABLE);

          break;

        case 'visible':

        case 'shadow':

        case 'hover':

          let viewer = this.appConfig.viewerContainer;

          viewer.classList.add('textLayer-' + hashParams['textlayer']);

          break;

    if ('pdfbug' in hashParams) {

      AppOptions.set('pdfBug', true);

      let enabled = hashParams['pdfbug'].split(',');

      waitOn.push(loadAndEnablePDFBug(enabled));

    }

    // It is not possible to change locale for the (various) extension builds.

    if ((typeof PDFJSDev === 'undefined' ||

         PDFJSDev.test('!PRODUCTION || GENERIC')) && 'locale' in hashParams) {

      AppOptions.set('locale', hashParams['locale']);

    }
",901
3eba7ea2673828865081d0f188477351803235f5,"_initializeL10n() {

return this.l10n.getDirection().then((dir) => {

document.getElementsByTagName('html')[0].dir = dir;

});

}

_initializeViewerComponents() {

let { appConfig, } = this;

return new Promise((resolve, reject) => {

this.overlayManager = new OverlayManager();

const dispatchToDOM = AppOptions.get('eventBusDispatchToDOM');

let eventBus = appConfig.eventBus || getGlobalEventBus(dispatchToDOM);

this.eventBus = eventBus;

let pdfRenderingQueue = new PDFRenderingQueue();

pdfRenderingQueue.onIdle = this.cleanup.bind(this);

this.pdfRenderingQueue = pdfRenderingQueue;

let pdfLinkService = new PDFLinkService({

eventBus,

externalLinkTarget: AppOptions.get('externalLinkTarget'),

externalLinkRel: AppOptions.get('externalLinkRel'),

});

this.pdfLinkService = pdfLinkService;

let downloadManager = this.externalServices.createDownloadManager({

disableCreateObjectURL: AppOptions.get('disableCreateObjectURL'),

});

this.downloadManager = downloadManager;

let container = appConfig.mainContainer;

let viewer = appConfig.viewerContainer;

this.pdfViewer = new PDFViewer({

container,

viewer,

eventBus,

renderingQueue: pdfRenderingQueue,

linkService: pdfLinkService,

downloadManager,

renderer: AppOptions.get('renderer'),

enableWebGL: AppOptions.get('enableWebGL'),

l10n: this.l10n,

textLayerMode: AppOptions.get('textLayerMode'),

imageResourcesPath: AppOptions.get('imageResourcesPath'),

renderInteractiveForms: AppOptions.get('renderInteractiveForms'),

enablePrintAutoRotate: AppOptions.get('enablePrintAutoRotate'),

useOnlyCssZoom: AppOptions.get('useOnlyCssZoom'),

maxCanvasPixels: AppOptions.get('maxCanvasPixels'),

});

pdfRenderingQueue.setViewer(this.pdfViewer);

pdfLinkService.setViewer(this.pdfViewer);

let thumbnailContainer = appConfig.sidebar.thumbnailView;

this.pdfThumbnailViewer = new PDFThumbnailViewer({

container: thumbnailContainer,

renderingQueue: pdfRenderingQueue,

linkService: pdfLinkService,

l10n: this.l10n,

});

pdfRenderingQueue.setThumbnailViewer(this.pdfThumbnailViewer);

let pdfHistory = new PDFHistory({

linkService: pdfLinkService,

eventBus,

});

pdfLinkService.setHistory(pdfHistory);

this.findController = new PDFFindController({

pdfViewer: this.pdfViewer,

eventBus,

});

this.findController.onUpdateResultsCount = (matchCount) => {

if (this.supportsIntegratedFind) {

return;

}

this.findBar.updateResultsCount(matchCount);

};

this.findController.onUpdateState = (state, previous, matchCount) => {

if (this.supportsIntegratedFind) {

this.externalServices.updateFindControlState({

result: state,

findPrevious: previous,

});

} else {

this.findBar.updateUIState(state, previous, matchCount);

}

};

this.pdfViewer.setFindController(this.findController);

// TODO: improve `PDFFindBar` constructor parameter passing

let findBarConfig = Object.create(appConfig.findBar);

findBarConfig.findController = this.findController;

findBarConfig.eventBus = eventBus;

this.findBar = new PDFFindBar(findBarConfig, this.l10n);

this.pdfDocumentProperties =

new PDFDocumentProperties(appConfig.documentProperties,

this.overlayManager, eventBus, this.l10n);

this.pdfCursorTools = new PDFCursorTools({

container,

eventBus,

cursorToolOnLoad: AppOptions.get('cursorToolOnLoad'),

});

this.toolbar = new Toolbar(appConfig.toolbar, container, eventBus, this.l10n);

this.secondaryToolbar =

new SecondaryToolbar(appConfig.secondaryToolbar, container, eventBus);

if (this.supportsFullscreen) {

this.pdfPresentationMode = new PDFPresentationMode({

container,

viewer,

pdfViewer: this.pdfViewer,

eventBus,

contextMenuItems: appConfig.fullscreen,

});

}

this.passwordPrompt = new PasswordPrompt(appConfig.passwordOverlay,

this.overlayManager, this.l10n);

this.pdfOutlineViewer = new PDFOutlineViewer({

container: appConfig.sidebar.outlineView,

linkService: pdfLinkService,

});

this.pdfAttachmentViewer = new PDFAttachmentViewer({

container: appConfig.sidebar.attachmentsView,

eventBus,

downloadManager,

});

// TODO: improve `PDFSidebar` constructor parameter passing

let sidebarConfig = Object.create(appConfig.sidebar);

sidebarConfig.pdfViewer = this.pdfViewer;

sidebarConfig.pdfThumbnailViewer = this.pdfThumbnailViewer;

sidebarConfig.pdfOutlineViewer = this.pdfOutlineViewer;

sidebarConfig.eventBus = eventBus;

this.pdfSidebar = new PDFSidebar(sidebarConfig, this.l10n);

this.pdfSidebar.onToggled = this.forceRendering.bind(this);

let pdfSidebarResizer = new PDFSidebarResizer(appConfig.sidebarResizer, eventBus, this.l10n);

resolve(undefined);

});

}","  async _initializeL10n() {

    const dir = await this.l10n.getDirection();

    document.getElementsByTagName('html')[0].dir = dir;

  async _initializeViewerComponents() {

    const appConfig = this.appConfig;

    this.overlayManager = new OverlayManager();

    const dispatchToDOM = AppOptions.get('eventBusDispatchToDOM');

    let eventBus = appConfig.eventBus || getGlobalEventBus(dispatchToDOM);

    this.eventBus = eventBus;

    let pdfRenderingQueue = new PDFRenderingQueue();

    pdfRenderingQueue.onIdle = this.cleanup.bind(this);

    this.pdfRenderingQueue = pdfRenderingQueue;

    let pdfLinkService = new PDFLinkService({

      eventBus,

      externalLinkTarget: AppOptions.get('externalLinkTarget'),

      externalLinkRel: AppOptions.get('externalLinkRel'),

    });

    this.pdfLinkService = pdfLinkService;

    let downloadManager = this.externalServices.createDownloadManager({

      disableCreateObjectURL: AppOptions.get('disableCreateObjectURL'),

    });

    this.downloadManager = downloadManager;



    let container = appConfig.mainContainer;

    let viewer = appConfig.viewerContainer;

    this.pdfViewer = new PDFViewer({

      container,

      viewer,

      eventBus,

      renderingQueue: pdfRenderingQueue,

      linkService: pdfLinkService,

      downloadManager,

      renderer: AppOptions.get('renderer'),

      enableWebGL: AppOptions.get('enableWebGL'),

      l10n: this.l10n,

      textLayerMode: AppOptions.get('textLayerMode'),

      imageResourcesPath: AppOptions.get('imageResourcesPath'),

      renderInteractiveForms: AppOptions.get('renderInteractiveForms'),

      enablePrintAutoRotate: AppOptions.get('enablePrintAutoRotate'),

      useOnlyCssZoom: AppOptions.get('useOnlyCssZoom'),

      maxCanvasPixels: AppOptions.get('maxCanvasPixels'),

    });

    pdfRenderingQueue.setViewer(this.pdfViewer);

    pdfLinkService.setViewer(this.pdfViewer);



    let thumbnailContainer = appConfig.sidebar.thumbnailView;

    this.pdfThumbnailViewer = new PDFThumbnailViewer({

      container: thumbnailContainer,

      renderingQueue: pdfRenderingQueue,

      linkService: pdfLinkService,

      l10n: this.l10n,

    });

    pdfRenderingQueue.setThumbnailViewer(this.pdfThumbnailViewer);

    this.pdfHistory = new PDFHistory({

      linkService: pdfLinkService,

      eventBus,

    });

    pdfLinkService.setHistory(this.pdfHistory);

    this.findController = new PDFFindController({

      pdfViewer: this.pdfViewer,

      eventBus,

    });

    this.findController.onUpdateResultsCount = (matchCount) => {

      if (this.supportsIntegratedFind) {

        return;

      }

      this.findBar.updateResultsCount(matchCount);

    };

    this.findController.onUpdateState = (state, previous, matchCount) => {

      if (this.supportsIntegratedFind) {

        this.externalServices.updateFindControlState({

          result: state,

          findPrevious: previous,

        });

      } else {

        this.findBar.updateUIState(state, previous, matchCount);

      }

    };

    this.pdfViewer.setFindController(this.findController);

    // TODO: improve `PDFFindBar` constructor parameter passing

    let findBarConfig = Object.create(appConfig.findBar);

    findBarConfig.findController = this.findController;

    findBarConfig.eventBus = eventBus;

    this.findBar = new PDFFindBar(findBarConfig, this.l10n);

    this.pdfDocumentProperties =

      new PDFDocumentProperties(appConfig.documentProperties,

                                this.overlayManager, eventBus, this.l10n);

    this.pdfCursorTools = new PDFCursorTools({

      container,

      eventBus,

      cursorToolOnLoad: AppOptions.get('cursorToolOnLoad'),

    });

    this.toolbar = new Toolbar(appConfig.toolbar, container, eventBus,

                               this.l10n);

    this.secondaryToolbar =

      new SecondaryToolbar(appConfig.secondaryToolbar, container, eventBus);

    if (this.supportsFullscreen) {

      this.pdfPresentationMode = new PDFPresentationMode({

        container,

        viewer,

        pdfViewer: this.pdfViewer,

        contextMenuItems: appConfig.fullscreen,

    }

    this.passwordPrompt = new PasswordPrompt(appConfig.passwordOverlay,

                                             this.overlayManager, this.l10n);



    this.pdfOutlineViewer = new PDFOutlineViewer({

      container: appConfig.sidebar.outlineView,

      eventBus,

      linkService: pdfLinkService,

    });

    this.pdfAttachmentViewer = new PDFAttachmentViewer({

      container: appConfig.sidebar.attachmentsView,

      eventBus,

      downloadManager,



    // TODO: improve `PDFSidebar` constructor parameter passing

    let sidebarConfig = Object.create(appConfig.sidebar);

    sidebarConfig.pdfViewer = this.pdfViewer;

    sidebarConfig.pdfThumbnailViewer = this.pdfThumbnailViewer;

    sidebarConfig.pdfOutlineViewer = this.pdfOutlineViewer;

    sidebarConfig.eventBus = eventBus;

    this.pdfSidebar = new PDFSidebar(sidebarConfig, this.l10n);

    this.pdfSidebar.onToggled = this.forceRendering.bind(this);



    this.pdfSidebarResizer = new PDFSidebarResizer(appConfig.sidebarResizer,

                                                   eventBus, this.l10n);
",902
3eba7ea2673828865081d0f188477351803235f5,"async open(file, args) {
    try {
      await this.close();
      return this.open(file, args);
    } catch (error) {
      // handle error
    }
  }","  async open(file, args) {

      await this.close();
",100
1bdfdd07b822827856bff4cea9f779010c510b7f,"async () => {
  const { hash, rotation, sidebarView, scrollMode, spreadMode } = await Promise.resolve({
    hash: undefined,
    rotation: undefined,
    sidebarView: undefined,
    scrollMode: undefined,
    spreadMode: undefined,
  }).then(({ hash, rotation, sidebarView, scrollMode, spreadMode }) => {
    const initialParams = {
      bookmark: this.initialBookmark,
      hash: hash,
    };

    return Promise.race([initialParams.bookmark, initialParams.hash]).then(() => {
      if (!initialParams.bookmark && !initialParams.hash) {
        this.initialBookmark = initialParams.bookmark;
        this.setInitialView(initialParams.hash);
      }
    });
  });

  return { hash, rotation, sidebarView, scrollMode, spreadMode };
}","        // For documents with different page sizes, once all pages are resolved,

        // ensure that the correct location becomes visible on load.

        // (To reduce the risk, in very large and/or slow loading documents,

        //  that the location changes *after* the user has started interacting

        //  with the viewer, wait for either `pagesPromise` or a timeout.)

        await Promise.race([

        if (!initialBookmark && !hash) {

        this.initialBookmark = initialBookmark;

        // Re-apply the initial document location.

        this.setInitialView(hash);
",501
2c003a82d57b5ad778fbf221a86f1d1408c02952,"async function renderPDF(filename) {
  try {
    const pdf = await getDocument(filename);
    pdfDocuments.push(pdf);
    const page = await pdf.getPage(1);
    const viewport = page.getViewport(1.2);
    const canvasAndCtx = CanvasFactory.create(viewport.width, viewport.height);
    await page.render({
      canvasContext: canvasAndCtx.context,
      viewport,
    });
    const data = canvasAndCtx.canvas.toDataURL();
    CanvasFactory.destroy(canvasAndCtx);
    return data;
  } catch (error) {
    console.log('Error:', error);
  }
}","    async function renderPDF(filename) {

      const loadingTask = getDocument(filename);

      const pdf = await loadingTask.promise;

      pdfDocuments.push(pdf);

      const page = await pdf.getPage(1);

      const viewport = page.getViewport(1.2);

      const canvasAndCtx = CanvasFactory.create(viewport.width,

                                                viewport.height);

      const renderTask = page.render({

        canvasContext: canvasAndCtx.context,

        viewport,

      });

      await renderTask.promise;

      const data = canvasAndCtx.canvas.toDataURL();

      CanvasFactory.destroy(canvasAndCtx);

      return data;
",258
02e77a39ec68247c619a6f67d9b8432ad40a50bc,"async function InternalRenderTask__scheduleNext() {
  if (this.useRequestAnimationFrame && typeof window !== 'undefined') {
    // Add await here to wait for the promise to resolve
    const result = await new Promise(() => {
      if (this.cancelled) return;
      this.operatorListIdx = this.gfx.executeOperatorList(this.operatorList, this.operatorListIdx, this._continueBound, this.stepper);
      if (this.operatorListIdx === this.operatorList.argsArray.length) {
        this.running = false;
        if (this.operatorList.lastChunk) {
          this.gfx.endDrawing();
          if (this._canvas) {
            canvasInRendering.delete(this._canvas);
          }
          this.callback();
      });
    };
  }
}","    }

    _scheduleNext() {

      if (this._useRequestAnimationFrame) {

    }

    async _next() {

      if (this.cancelled) {

        return;

      }

      this.operatorListIdx = this.gfx.executeOperatorList(this.operatorList,

                                                          this.operatorListIdx,

                                                          this._continueBound,

                                                          this.stepper);

      if (this.operatorListIdx === this.operatorList.argsArray.length) {

        this.running = false;

        if (this.operatorList.lastChunk) {

          this.gfx.endDrawing();

          if (this._canvas) {

            canvasInRendering.delete(this._canvas);

          this.callback();

      }

    }

  }
",358
60bcce184ee74dc56d682a4c75ccdea69cd0670e,"async function loadDocument(recoveryMode) {
    
    var loadDocumentCapability = createPromiseCapability();
    
    try {
        
        const parseSuccess = async () => {
            await Promise.all([
                pdfManager.ensureDoc('numPages'),
                pdfManager.ensureDoc('fingerprint')
            ]);
            
            loadDocumentCapability.resolve({
                numPages,
                fingerprint
            });
        };
        
        const parseFailure = async (e) => {
            loadDocumentCapability.reject(e);
        };
    
        await pdfManager.ensureDoc('checkHeader', []);
        await pdfManager.ensureDoc('parseStartXRef', []);
        await pdfManager.ensureDoc('parse', [recoveryMode]).then(parseSuccess, parseFailure);
    } catch (e) {
        loadDocumentCapability.reject(e);
    }
    
    return loadDocumentCapability.promise;
}","    async function loadDocument(recoveryMode) {

      await pdfManager.ensureDoc('checkHeader');

      await pdfManager.ensureDoc('parseStartXRef');

      await pdfManager.ensureDoc('parse', [recoveryMode]);



      if (!recoveryMode) {

        // Check that at least the first page can be successfully loaded,

        // since otherwise the XRef table is definitely not valid.

        await pdfManager.ensureDoc('checkFirstPage');

      }

      const [numPages, fingerprint] = await Promise.all([

        pdfManager.ensureDoc('numPages'),

        pdfManager.ensureDoc('fingerprint'),

      ]);

      return { numPages, fingerprint, };
",591
04497bcb3c8df5a04565ef60a37245d73a17b4e1,"async function(){

  this.xref.stream.manager.requestRanges(pendingRequests);

    try {

      let nodesToRevisit = await this.xref.stream.manager.requestRanges(pendingRequests);

      for (let i = 0, ii = nodesToRevisit.length; i < ii; i++) {

        let node = nodesToRevisit[i];

        // Remove any reference nodes from the current `RefSet` so they

        // aren't skipped when we revist them.

        if (node instanceof Ref) {

          this.refSet.remove(node);

        }

      this._walk(nodesToRevisit);

    } catch (error) {

      console.log(error);

    }

  return;

}","        await this.xref.stream.manager.requestRanges(pendingRequests);



        for (let i = 0, ii = nodesToRevisit.length; i < ii; i++) {

          let node = nodesToRevisit[i];

          // Remove any reference nodes from the current `RefSet` so they

          // aren't skipped when we revist them.

          if (node instanceof Ref) {

            this.refSet.remove(node);

        }

        return this._walk(nodesToRevisit);

      return undefined;
",187
0d89006bf16b7262fe6aceb35557a9b54e3ec396,"async function getPageDict(pageIndex) {

  const capability = createPromiseCapability();

  function next() {

    while (nodesToVisit.length) {

      const currentNode = nodesToVisit.pop();

      if (isRef(currentNode)) {

        count = pageKidsCountCache.get(currentNode);

        // Skip nodes where the page can't be.

        if (count > 0 && currentPageIndex + count < pageIndex) {

          currentPageIndex += count;

          continue;

        }

        try {

          const obj = await xref.fetchAsync(currentNode);

          if (isDict(obj, 'Page') || (isDict(obj) && !obj.has('Kids'))) {

            if (pageIndex === currentPageIndex) {

              // Cache the Page reference, since it can *greatly* improve

              // performance by reducing redundant lookups in long documents

              // where all nodes are found at *one* level of the tree.

              if (currentNode && !pageKidsCountCache.has(currentNode)) {

                pageKidsCountCache.put(currentNode, 1);

              }

              capability.resolve([obj, currentNode]);

            } else {

              currentPageIndex++;

              next();

            }

            return;

          nodesToVisit.push(obj);

          next();

        catch (e) {

          if (e instanceof FormatError && e.message.startsWith('Page dictionary kid reference points to wrong type of object.')) {

            capability.reject(new FormatError(

              'Page dictionary kid reference points to wrong type of object.'));

            return;

          }

          if (e instanceof Error && e.message.startsWith('Page index')) {

            capability.reject(new Error(`Page index ${pageIndex} not found.`));

            return;

        capability.reject(new FormatError(

          'Page dictionary kids object is not an array.'));

          return;

      capability.reject(new Error(`Page index ${pageIndex} not found.`));

    next();

    return capability.promise;

}","  async getPageDict(pageIndex) {

    while (nodesToVisit.length) {

      const currentNode = nodesToVisit.pop();

      if (isRef(currentNode)) {

        count = pageKidsCountCache.get(currentNode);

        // Skip nodes where the page can't be.

        if (count > 0 && currentPageIndex + count < pageIndex) {

          currentPageIndex += count;

          continue;

        }

        const obj = await xref.fetchAsync(currentNode);

        if (isDict(obj, 'Page') || (isDict(obj) && !obj.has('Kids'))) {

          if (pageIndex === currentPageIndex) {

            // Cache the Page reference, since it can *greatly* improve

            // performance by reducing redundant lookups in long documents

            // where all nodes are found at *one* level of the tree.

            if (currentNode && !pageKidsCountCache.has(currentNode)) {

              pageKidsCountCache.put(currentNode, 1);

            return [obj, currentNode];

          }

          currentPageIndex++;

          continue;

        nodesToVisit.push(obj);

        continue;

      }

      // Must be a child page dictionary.

      if (!isDict(currentNode)) {

        throw new FormatError(

          'Page dictionary kid reference points to wrong type of object.');

      }

      count = currentNode.get('Count');

      if (Number.isInteger(count) && count >= 0) {

        // Cache the Kids count, since it can reduce redundant lookups in

        // documents where all nodes are found at *one* level of the tree.

        const objId = currentNode.objId;

        if (objId && !pageKidsCountCache.has(objId)) {

          pageKidsCountCache.put(objId, count);

        // Skip nodes where the page can't be.

        if (currentPageIndex + count <= pageIndex) {

          currentPageIndex += count;

          continue;

        }

      }

      const kids = currentNode.get('Kids');

      if (!Array.isArray(kids)) {

        // Prevent errors in corrupt PDF documents that violate the

        // specification by *inlining* Page dicts directly in the Kids

        // array, rather than using indirect objects (fixes issue9540.pdf).

        if (isName(currentNode.get('Type'), 'Page') ||

            (!currentNode.has('Type') && currentNode.has('Contents'))) {

          if (currentPageIndex === pageIndex) {

            return [currentNode, null];

          currentPageIndex++;

          continue;

        throw new FormatError('Page dictionary kids object is not an array.');

      }

      // Always check all `Kids` nodes, to avoid getting stuck in an empty

      // node further down in the tree (see issue5644.pdf, issue8088.pdf),

      // and to ensure that we actually find the correct `Page` dict.

      for (let last = kids.length - 1; last >= 0; last--) {

        nodesToVisit.push(kids[last]);

    throw new Error(`Page index ${pageIndex} not found.`);
",1522
8519f87efb3a24b1a8a9f03e2e8d0728a7cd642d,"async function loadFakeWorker() {
  if (typeof SystemJS === 'object') {
    try {
      const worker = await SystemJS.import('pdfjs/core/worker');
      window.pdfjsWorker = worker;
    } catch (error) {
      throw new Error('SystemJS must be used to load fake worker.');
    }
  } else {
    throw new Error('SystemJS must be used to load fake worker.');
  }
}","async function loadFakeWorker() {

    if (typeof SystemJS !== 'object') {

      throw new Error('SystemJS must be used to load fake worker.');

    }

    window.pdfjsWorker = await SystemJS.import('pdfjs/core/worker');

    return undefined;
",210
b54c1fe39528c72281e9158d1920deec7c4ea285,"async _adjustScaleWidth() {
  const container = this.items.scaleSelectContainer;
  const select = this.items.scaleSelect;
  
  try {
    await animationStarted();
    
    // Adjust the width of the zoom box to fit the content.
    if (container.clientWidth === 0) {
      container.setAttribute(""style"", ""display: inherit;"");
    }
    
    if (container.clientWidth > 0) {
      select.setAttribute(""style"", ""min-width: inherit;"");
      
      const width = select.clientWidth + SCALE_SELECT_CONTAINER_PADDING;
      
      select.setAttribute(
        ""style"",
        `min-width: ${width + SCALE_SELECT_PADDING}px;`
      );
      
      container.setAttribute(
        ""style"",
        `min-width: ${width}px; max-width: ${width}px;`
      );
    }
  } catch (error) {
    // Handle errors here
  }
}","  /**

   * Increase the width of the zoom dropdown DOM element if, and only if, it's

   * too narrow to fit the *longest* of the localized strings.

   * @private

   */

  async _adjustScaleWidth() {

    const { items, l10n } = this;

    const predefinedValuesPromise = Promise.all([

      l10n.get(""page_scale_auto"", null, ""Automatic Zoom""),

      l10n.get(""page_scale_actual"", null, ""Actual Size""),

      l10n.get(""page_scale_fit"", null, ""Page Fit""),

      l10n.get(""page_scale_width"", null, ""Page Width""),

    ]);



    // The temporary canvas is used to measure text length in the DOM.

    let canvas = document.createElement(""canvas"");

    if (

      typeof PDFJSDev === ""undefined"" ||

      PDFJSDev.test(""MOZCENTRAL || GENERIC"")

    ) {

      canvas.mozOpaque = true;

    }

    let ctx = canvas.getContext(""2d"", { alpha: false });



    await animationStarted;

    const { fontSize, fontFamily } = getComputedStyle(items.scaleSelect);

    ctx.font = `${fontSize} ${fontFamily}`;



    let maxWidth = 0;

    for (const predefinedValue of await predefinedValuesPromise) {

      const { width } = ctx.measureText(predefinedValue);

      if (width > maxWidth) {

        maxWidth = width;

    }

    const overflow = SCALE_SELECT_WIDTH - SCALE_SELECT_CONTAINER_WIDTH;

    maxWidth += 1.5 * overflow;



    if (maxWidth > SCALE_SELECT_CONTAINER_WIDTH) {

      items.scaleSelect.style.width = `${maxWidth + overflow}px`;

      items.scaleSelectContainer.style.width = `${maxWidth}px`;

    }

    // Zeroing the width and height cause Firefox to release graphics resources

    // immediately, which can greatly reduce memory consumption.

    canvas.width = 0;

    canvas.height = 0;

    canvas = ctx = null;
",1337
d07be1a89bed0b78dcd18f5134f6601caac0b9fb,"`
async function () {
const pdfDocument = this.docViewer.pdfDocument;
try {
const { info, metadata, contentDispositionFilename } = await pdfDocument.getMetadata();
this.documentInfo = info;
this.metadata = metadata;
this.contentDispositionFilename = contentDispositionFilename;
if (info) {
const infoTitle = info && info[""Title""];
let pdfTitle = infoTitle;
if (infoTitle) {
pdfTitle = infoTitle;
}
const metadataTitle = metadata && metadata.get(""dc:title"");
if (metadataTitle) {
// Ghostscript can produce invalid 'dc:title' Metadata entries:
//  - The title may be ""Untitled"" (fixes bug 1031612).
//  - The title may contain incorrectly encoded characters, which thus
//    looks broken, hence we ignore the Metadata entry when it
//    contains characters from the Specials Unicode block
//    (fixes bug 1605526).
if (metadataTitle !== ""Untitled"" && !/[\uFFF0-\uFFFF]/g.test(metadataTitle)) {
pdfTitle = metadataTitle;
}
}
if (pdfTitle) {
this.setTitle(`${pdfTitle} - ${contentDispositionFilename || document.title}`);
} else if (contentDispositionFilename) {
this.setTitle(contentDispositionFilename);
}
if (info.IsAcroFormPresent) {
console.warn(""Warning: AcroForm/XFA is not supported"");
this.fallback(UNSUPPORTED_FEATURES.forms);
}
if (typeof PDFJSDev === ""undefined"" || PDFJSDev.test(""MOZCENTRAL || GENERIC"")) {
// Telemetry labels must be C++ variable friendly.
let versionId = ""other"";
// Keep these in sync with mozilla central's Histograms.json.
const KNOWN_VERSIONS = [
""1.0"",
""1.1"",
""1.2"",
""1.3"",
""1.4"",
""1.5"",
""1.6"",
""1.7"",
""1.8"",
""1.9"",
""2.0"",
""2.1"",
""2.2"",
""2.3"",
];
if (KNOWN_VERSIONS.includes(info.PDFFormatVersion)) {
versionId = `v${info.PDFFormatVersion.replace(""."", ""_"")}`;
}
let generatorId = ""other"";
// Keep these in sync with mozilla central's Histograms.json.
const KNOWN_GENERATORS = [
""acrobat distiller"",
""acrobat pdfwriter"",
""adobe livecycle"",
""adobe pdf library"",
""adobe photoshop"",
""ghostscript"",
""tcpdf"",
""cairo"",
""dvipdfm"",
""dvips"",
""pdftex"",
""pdfkit"",
""itext"",
""prince"",
""quarkxpress"",
""mac os x"",
""microsoft"",
""openoffice"",
""oracle"",
""luradocument"",
""pdf-xchange"",
""antenna house"",
""aspose.cells"",
""fpdf"",
];
if (info.Producer) {
const producer = info.Producer.toLowerCase();
KNOWN_GENERATORS.some(function(generator) {
if (!producer.includes(generator)) {
return false;
}
generatorId = generator.replace(/[ .\-]/g, ""_"");
return true;
});
}
let formType = null;
if (info.IsAcroFormPresent) {
formType = info.IsXFAPresent ? ""xfa"" : ""acroform"";
this.externalServices.reportTelemetry({
type: ""documentInfo"",
version: versionId,
generator: generatorId,
formType,
});
}
}
} catch (err) {
console.error(err);
}
}","    this._initializeMetadata(pdfDocument);

  },

  /**

   * @private

   */

  async _initializeMetadata(pdfDocument) {

    const {

      info,

      metadata,

      contentDispositionFilename,

    } = await pdfDocument.getMetadata();

    if (pdfDocument !== this.pdfDocument) {

      return; // The document was closed while the metadata resolved.

    }

    this.documentInfo = info;

    this.metadata = metadata;

    this.contentDispositionFilename = contentDispositionFilename;



    // Provides some basic debug information

    console.log(

      ""PDF "" +

        pdfDocument.fingerprint +

        "" ["" +

        info.PDFFormatVersion +

        "" "" +

        (info.Producer || ""-"").trim() +

        "" / "" +

        (info.Creator || ""-"").trim() +

        ""]"" +

        "" (PDF.js: "" +

        (version || ""-"") +

        (AppOptions.get(""enableWebGL"") ? "" [WebGL]"" : """") +

        "")""

    );

    let pdfTitle;

    const infoTitle = info && info[""Title""];

    if (infoTitle) {

      pdfTitle = infoTitle;

    }

    const metadataTitle = metadata && metadata.get(""dc:title"");

    if (metadataTitle) {

      // Ghostscript can produce invalid 'dc:title' Metadata entries:

      //  - The title may be ""Untitled"" (fixes bug 1031612).

      //  - The title may contain incorrectly encoded characters, which thus

      //    looks broken, hence we ignore the Metadata entry when it

      //    contains characters from the Specials Unicode block

      //    (fixes bug 1605526).

      if (

        metadataTitle !== ""Untitled"" &&

        !/[\uFFF0-\uFFFF]/g.test(metadataTitle)

      ) {

        pdfTitle = metadataTitle;

      }

    }

    if (pdfTitle) {

      this.setTitle(

        `${pdfTitle} - ${contentDispositionFilename || document.title}`

      );

    } else if (contentDispositionFilename) {

      this.setTitle(contentDispositionFilename);

    }

    if (info.IsAcroFormPresent) {

      console.warn(""Warning: AcroForm/XFA is not supported"");

      this.fallback(UNSUPPORTED_FEATURES.forms);

    }

    if (

      typeof PDFJSDev === ""undefined"" ||

      PDFJSDev.test(""MOZCENTRAL || GENERIC"")

    ) {

      // Telemetry labels must be C++ variable friendly.

      let versionId = ""other"";

      // Keep these in sync with mozilla central's Histograms.json.

      const KNOWN_VERSIONS = [

        ""1.0"",

        ""1.1"",

        ""1.2"",

        ""1.3"",

        ""1.4"",

        ""1.5"",

        ""1.6"",

        ""1.7"",

        ""1.8"",

        ""1.9"",

        ""2.0"",

        ""2.1"",

        ""2.2"",

        ""2.3"",

      ];

      if (KNOWN_VERSIONS.includes(info.PDFFormatVersion)) {

        versionId = `v${info.PDFFormatVersion.replace(""."", ""_"")}`;

      }

      let generatorId = ""other"";

      // Keep these in sync with mozilla central's Histograms.json.

      const KNOWN_GENERATORS = [

        ""acrobat distiller"",

        ""acrobat pdfwriter"",

        ""adobe livecycle"",

        ""adobe pdf library"",

        ""adobe photoshop"",

        ""ghostscript"",

        ""tcpdf"",

        ""cairo"",

        ""dvipdfm"",

        ""dvips"",

        ""pdftex"",

        ""pdfkit"",

        ""itext"",

        ""prince"",

        ""quarkxpress"",

        ""mac os x"",

        ""microsoft"",

        ""openoffice"",

        ""oracle"",

        ""luradocument"",

        ""pdf-xchange"",

        ""antenna house"",

        ""aspose.cells"",

        ""fpdf"",

      ];

      if (info.Producer) {

        const producer = info.Producer.toLowerCase();

        KNOWN_GENERATORS.some(function(generator) {

          if (!producer.includes(generator)) {

            return false;

          generatorId = generator.replace(/[ .\-]/g, ""_"");

          return true;

        });

      }



      let formType = null;

      if (info.IsAcroFormPresent) {

        formType = info.IsXFAPresent ? ""xfa"" : ""acroform"";

      }

      this.externalServices.reportTelemetry({

        type: ""documentInfo"",

        version: versionId,

        generator: generatorId,

        formType,

    }
",1539
6967b9dd96638bbfa88ae169ab5302278ce72a44,"async function initializePDFJS() {
  try {
    const modules = await Promise.all([
      SystemJS.import(""pdfjs/core/fonts.js""),
      SystemJS.import(""pdfjs/core/stream.js""),
      SystemJS.import(""pdfjs/core/primitives.js""),
      SystemJS.import(""pdfjs/core/cmap.js""),
    ]);

    const fonts = modules[0],
      stream = modules[1],
      primitives = modules[2],
      cmap = modules[3];

    // Expose some of the PDFJS members to global scope for tests.

    window.Font = fonts.Font;
    window.ToUnicodeMap = fonts.ToUnicodeMap;
    window.Stream = stream.Stream;
    window.Name = primitives.Name;
    window.CMapFactory = cmap.CMapFactory;
  } catch (error) {
    // Handle potential errors with the `async/await` syntax.
    console.error(error);
  } finally {
    // Ensure that the callback is executed no matter what.
    const callback = () => {};
  }
}","async function initializePDFJS(callback) {

  await Promise.all(

    [

      ""pdfjs-test/font/font_core_spec.js"",

      ""pdfjs-test/font/font_os2_spec.js"",

      ""pdfjs-test/font/font_post_spec.js"",

      ""pdfjs-test/font/font_fpgm_spec.js"",

    ].map(function (moduleName) {

      return SystemJS.import(moduleName);

    })

  );



  callback();
",651
a49b3e04d5b3cd89175f51040a64038569b0446a,"async function createSandbox(data) {
    let result;
    try {
      result = await FirefoxCom.request(""createSandbox"", data);
    } catch (e) {
      throw new Error(""Cannot create sandbox."");
    }
    if (!result) {
      throw new Error(""Cannot create sandbox."");
    }
  }","    const success = await FirefoxCom.requestAsync(""createSandbox"", data);

    if (!success) {

      throw new Error(""Cannot create sandbox."");

    }
",152
6dae2677d5fabe3116065c6ada5e50aec451dcba,"`async () => {
  try {
    const response = await testSearch({});
    done(null, response);
  } catch (error) {
    done(error);
  }
}`","    });

  it(""performs a normal search and finds the previous result"", async function () {

    const { eventBus, pdfFindController } = await initPdfFindController();



    await testSearch({

      eventBus,

      pdfFindController,
",182
6dae2677d5fabe3116065c6ada5e50aec451dcba,"async function () => {
  try {
    const done = await testSearch({});
    return done;
  } catch (error) {
    console.log(error);
  }
}","    });

  it(""performs a case sensitive search"", async function () {

    const { eventBus, pdfFindController } = await initPdfFindController();



    await testSearch({

      eventBus,

      pdfFindController,
",161
6dae2677d5fabe3116065c6ada5e50aec451dcba,"async function performEntireWordSearch() {
  try {
    const result = await testSearch({
      ...
    });
    done(result);
  } catch (error) {
    console.log(error);
  }
}","    });

  it(""performs an entire word search"", async function () {

    const { eventBus, pdfFindController } = await initPdfFindController();



    await testSearch({

      eventBus,

      pdfFindController,
",148
6dae2677d5fabe3116065c6ada5e50aec451dcba,"async function testSearch() {
  try {
    const done = await search({
      type: 'terms',
      terms: ['cats', 'dogs'],
      size: 10,
    });
  } catch (error) {
    console.log(error);
  }
}","    });

  it(""performs a multiple term (no phrase) search"", async function () {

    const { eventBus, pdfFindController } = await initPdfFindController();



    await testSearch({

      eventBus,

      pdfFindController,
",184
6dae2677d5fabe3116065c6ada5e50aec451dcba,"async function done() {
  //...code
}

async function run() {
  //...logic
}

run().then(done).catch((error) => {
  console.log(error);
});","    });

  });



  it(""performs a normal search, where the text is normalized"", async function () {

    const { eventBus, pdfFindController } = await initPdfFindController(

      ""fraction-highlight.pdf""

    );



    await testSearch({

      eventBus,

      pdfFindController,

      parameters: {

        query: ""fraction"",

        caseSensitive: false,

        entireWord: false,

        phraseSearch: true,

        findPrevious: false,

      },

      matchesPerPage: [3],

      selectedMatch: {

        pageIndex: 0,

        matchIndex: 0,

      },

      pageMatches: [[19, 48, 66]],

      pageMatchesLength: [[8, 8, 8]],

    });
",578
ccef734ebb80e50b0ed15ddc0f4c26cc1619f1ad,"it(""should print a date according to a format"", async () => {

  const value = await myeval(`util.printd(0, ${date})`);

  expect(value).toEqual(""D:20070415031415"");

  value = await myeval(`util.printd(1, ${date})`);

  expect(value).toEqual(""2007.04.15 03:14:15"");

  value = await myeval(`util.printd(2, ${date})`);

  expect(value).toEqual(""4/15/07 3:14:15 am"");

  value = await myeval(`util.printd(""mmmm mmm mm m"", ${date})`);

  expect(value).toEqual(""April Apr 04 4"");

  value = await myeval(`util.printd(""dddd ddd dd d"", ${date})`);

  expect(value).toEqual(""Sunday Sun 15 15"");

});

it(""should parse a date according to a format"", async () => {

  const value = await myeval(`util.scand(0, ""D:20070415031415"").toString()`);

  expect(new Date(value)).toEqual(date);

  value = await myeval(`util.scand(1, ""2007.04.15 03:14:15"").toString()`);

  expect(new Date(value)).toEqual(date);

  value = await myeval(`util.scand(2, ""4/15/07 3:14:15 am"").toString()`);

  expect(new Date(value)).toEqual(date);

});

it(""should print some data according to a format"", async () => {

  const value = await myeval(`util.printf(""Integer numbers: %d, %d,..."", 1.234, 56.789)`);

  expect(value).toEqual(""Integer numbers: 1, 56,..."");

  value = await myeval(`util.printf(""Hex numbers: %x, %x,..."", 1234, 56789)`);

  expect(value).toEqual(""Hex numbers: 4D2, DDD5,..."");

  value = await myeval(`util.printf(""Hex numbers with 0x: %#x, %#x,..."", 1234, 56789)`);

  expect(value).toEqual(""Hex numbers with 0x: 0x4D2, 0xDDD5,..."");

  value = await myeval(`util.printf(""Decimal number: %,0+.3f"", 1234567.89123)`);

  expect(value).toEqual(""Decimal number: +1,234,567.891"");

  value = await myeval(`util.printf(""Decimal number: %,0+8.3f"", 1.234567)`);

  expect(value).toEqual(""Decimal number: +  1.235"");

  value = await myeval(`util.printf(""Decimal number: %,0.2f"", -12.34567)`);

  expect(value).toEqual(""Decimal number: -12.35"");

});

it(""should print a string with no argument"", async () => {

  const value = await myeval(`util.printf(""hello world"")`);

  expect(value).toEqual(""hello world"");

});

it(""print a string with a percent"", async () => {

  const value = await myeval(`util.printf(""%%s"")`);

  expect(value).toEqual(""%%s"");

});

it(""should print some data according to a format"", async () => {

  const value = await myeval(`util.printx(""9 (999) 999-9999"", ""aaa1415969748zzz"")`);

  expect(value).toEqual(""1 (415) 969-7489"");

});

it(""should trigger an event and modify the source"", async () => {


});","      it(""should print a date according to a format"", async () => {

        let value = await myeval(`util.printd(0, ${date})`);

        expect(value).toEqual(""D:20070415031415"");



        value = await myeval(`util.printd(1, ${date})`);

        expect(value).toEqual(""2007.04.15 03:14:15"");



        value = await myeval(`util.printd(2, ${date})`);

        expect(value).toEqual(""4/15/07 3:14:15 am"");



        value = await myeval(`util.printd(""mmmm mmm mm m"", ${date})`);

        expect(value).toEqual(""April Apr 04 4"");



        value = await myeval(`util.printd(""dddd ddd dd d"", ${date})`);

        expect(value).toEqual(""Sunday Sun 15 15"");

      it(""should parse a date according to a format"", async () => {

        let value = await myeval(

          `util.scand(0, ""D:20070415031415"").toString()`

        );

        expect(new Date(value)).toEqual(date);



        value = await myeval(`util.scand(1, ""2007.04.15 03:14:15"").toString()`);

        expect(new Date(value)).toEqual(date);



        value = await myeval(`util.scand(2, ""4/15/07 3:14:15 am"").toString()`);

        expect(new Date(value)).toEqual(date);

      it(""should print some data according to a format"", async () => {

        let value = await myeval(

          `util.printf(""Integer numbers: %d, %d,..."", 1.234, 56.789)`

        );

        expect(value).toEqual(""Integer numbers: 1, 56,..."");



        value = await myeval(

          `util.printf(""Hex numbers: %x, %x,..."", 1234, 56789)`

        );

        expect(value).toEqual(""Hex numbers: 4D2, DDD5,..."");



        value = await myeval(

          `util.printf(""Hex numbers with 0x: %#x, %#x,..."", 1234, 56789)`

        );

        expect(value).toEqual(""Hex numbers with 0x: 0x4D2, 0xDDD5,..."");



        value = await myeval(

          `util.printf(""Decimal number: %,0+.3f"", 1234567.89123)`

        );

        expect(value).toEqual(""Decimal number: +1,234,567.891"");



        value = await myeval(

          `util.printf(""Decimal number: %,0+8.3f"", 1.234567)`

        );

        expect(value).toEqual(""Decimal number: +  1.235"");



        value = await myeval(

          `util.printf(""Decimal number: %,0.2f"", -12.34567)`

        );

        expect(value).toEqual(""Decimal number: -12.35"");

      it(""should print a string with no argument"", async () => {

        const value = await myeval(`util.printf(""hello world"")`);

        expect(value).toEqual(""hello world"");

      it(""print a string with a percent"", async () => {

        const value = await myeval(`util.printf(""%%s"")`);

        expect(value).toEqual(""%%s"");

      it(""should print some data according to a format"", async () => {

        const value = await myeval(

          `util.printx(""9 (999) 999-9999"", ""aaa14159697489zzz"")`

        );

        expect(value).toEqual(""1 (415) 969-7489"");

    it(""should trigger an event and modify the source"", async () => {
",455
ccef734ebb80e50b0ed15ddc0f4c26cc1619f1ad,"sandbox
      .dispatchEventInSandbox({
        id: refId,
        value: """",
        name: ""test"",
        willCommit: true,
      })
      .then(async () => {
        expect(send_queue.has(refId)).toEqual(true);
        const sendQueueValue = await send_queue.get(refId);
        expect(sendQueueValue).toEqual({
          id: refId,
          value: ""123"",
        });
      })
      .catch((error) => {
        done.fail(error);
      });","

      await sandbox.dispatchEventInSandbox({

        id: refId,

        value: """",

        name: ""test"",

        willCommit: true,

      });



      expect(send_queue.has(refId)).toEqual(true);

      expect(send_queue.get(refId)).toEqual({

        id: refId,

        value: ""123"",

      });

    it(""should trigger a Keystroke event and invalidate it"", async () => {
",180
ccef734ebb80e50b0ed15ddc0f4c26cc1619f1ad,"sandbox
  .dispatchEventInSandbox({
    id: refId,
    value: ""hell"",
    name: ""Keystroke"",
    willCommit: false,
    change: ""o"",
    selStart: 4,
    selEnd: 4,
  })
  .then(() => {
    expect(send_queue.has(refId)).toEqual(true);
    expect(send_queue.get(refId)).toEqual({
      id: refId,
      value: ""hell"",
      selRange: [4, 4],
    });
    done();
  })
  .catch(done.fail);","      await sandbox.dispatchEventInSandbox({

        id: refId,

        value: ""hell"",

        name: ""Keystroke"",

        willCommit: false,

        change: ""o"",

        selStart: 4,

        selEnd: 4,

      });



      expect(send_queue.has(refId)).toEqual(true);

      expect(send_queue.get(refId)).toEqual({

        id: refId,

        value: ""hell"",

        selRange: [4, 4],

      });

    it(""should trigger a Keystroke event and change it"", async () => {
",139
ccef734ebb80e50b0ed15ddc0f4c26cc1619f1ad,"async function testKeystrokeEvent() {
  const sandbox = new Sandbox();
  const refId = ""my-ref"";

  try {
    await sandbox.dispatchEventInSandbox({
      id: refId,
      value: ""hell"",
      name: ""Keystroke"",
      willCommit: false,
      change: ""o"",
      selStart: 4,
      selEnd: 4,
    });

    expect(send_queue.has(refId)).toEqual(true);
    expect(send_queue.get(refId)).toEqual({
      id: refId,
      value: ""hella"",
    });
  } catch (error) {
    done.fail(error);
  } finally {
    done();
  }
}","      await sandbox.dispatchEventInSandbox({

        id: refId,

        value: ""hell"",

        name: ""Keystroke"",

        willCommit: false,

        change: ""o"",

        selStart: 4,

        selEnd: 4,

      });



      expect(send_queue.has(refId)).toEqual(true);

      expect(send_queue.get(refId)).toEqual({

        id: refId,

        value: ""hella"",

      });

    it(""should trigger an invalid commit Keystroke event"", async () => {
",205
ccef734ebb80e50b0ed15ddc0f4c26cc1619f1ad,"async function test() {
  try {
    await sandbox.dispatchEventInSandbox({
      id: refId,
      value: """",
      name: ""test"",
      willCommit: true,
    });
    expect(send_queue.has(refId)).toEqual(false);
    done();
  } catch (err) {
    done.fail(err);
  }
}","      await sandbox.dispatchEventInSandbox({

        id: refId,

        value: """",

        name: ""test"",

        willCommit: true,

      });

      expect(send_queue.has(refId)).toEqual(false);

    it(""should trigger a valid commit Keystroke event"", async () => {
",104
ccef734ebb80e50b0ed15ddc0f4c26cc1619f1ad,"async () => {
    const refId1 = sandbox.dispatchEventInSandbox({
      id: refId1,
      value: ""hello"",
      name: ""Keystroke"",
      willCommit: true,
    });

    try {
      expect(send_queue.has(refId1)).toEqual(true);
      expect(send_queue.get(refId1)).toEqual({
        id: refId1,
        value: ""world"",
        valueAsString: ""world"",
      });
    } catch (error) {
      done.fail(error);
    } finally {
      done();
    }
  };","      await sandbox.dispatchEventInSandbox({

        id: refId1,

        value: ""hello"",

        name: ""Keystroke"",

        willCommit: true,

      });



      expect(send_queue.has(refId1)).toEqual(true);

      expect(send_queue.get(refId1)).toEqual({

        id: refId1,

        value: ""world"",

        valueAsString: ""world"",

      });
",138
ccef734ebb80e50b0ed15ddc0f4c26cc1619f1ad,"async function myeval() {
  // Identify Promise Chains
  const promises = [
    color.convert([""RGB"", 0.1, 0.2, 0.3], ""T"").then((value) => {
      expect(round(value)).toEqual([""T""]);
    }),
    color.convert([""RGB"", 0.1, 0.2, 0.3], ""G"").then((value) => {
      expect(round(value)).toEqual([""G"", 0.181]);
    }),
    color.convert([""RGB"", 0.1, 0.2, 0.3], ""RGB"").then((value) => {
      expect(round(value)).toEqual([""RGB"", 0.1, 0.2, 0.3]);
    }),
    color.convert([""RGB"", 0.1, 0.2, 0.3], ""CMYK"").then((value) => {
      expect(round(value)).toEqual([""CMYK"", 0.9, 0.8, 0.7, 0.7]);
    }),
  ];

  // Use await to replace .then() callbacks
  for (const promise of promises) {
    try {
      const value = await promise;
      expect(round(value)).toEqual([""T""]);
    } catch (err) {
      console.error(err);
    }
  }
}","    it(""should convert RGB color for different color spaces"", async () => {

      let value = await myeval(`color.convert([""RGB"", 0.1, 0.2, 0.3], ""T"")`);

      expect(round(value)).toEqual([""T""]);



      value = await myeval(`color.convert([""RGB"", 0.1, 0.2, 0.3], ""G"")`);

      expect(round(value)).toEqual([""G"", 0.181]);



      value = await myeval(`color.convert([""RGB"", 0.1, 0.2, 0.3], ""RGB"")`);

      expect(round(value)).toEqual([""RGB"", 0.1, 0.2, 0.3]);



      value = await myeval(`color.convert([""RGB"", 0.1, 0.2, 0.3], ""CMYK"")`);

      expect(round(value)).toEqual([""CMYK"", 0.9, 0.8, 0.7, 0.7]);

    it(""should convert CMYK color for different color spaces"", async () => {

      let value = await myeval(

        `color.convert([""CMYK"", 0.1, 0.2, 0.3, 0.4], ""T"")`

      );

      expect(round(value)).toEqual([""T""]);



      value = await myeval(`color.convert([""CMYK"", 0.1, 0.2, 0.3, 0.4], ""G"")`);

      expect(round(value)).toEqual([""G"", 0.371]);



      value = await myeval(

        `color.convert([""CMYK"", 0.1, 0.2, 0.3, 0.4], ""RGB"")`

      );

      expect(round(value)).toEqual([""RGB"", 0.5, 0.3, 0.4]);



      value = await myeval(

        `color.convert([""CMYK"", 0.1, 0.2, 0.3, 0.4], ""CMYK"")`

      );

      expect(round(value)).toEqual([""CMYK"", 0.1, 0.2, 0.3, 0.4]);

    it(""should convert Gray color for different color spaces"", async () => {

      let value = await myeval(`color.convert([""G"", 0.1], ""T"")`);

      expect(round(value)).toEqual([""T""]);



      value = await myeval(`color.convert([""G"", 0.1], ""G"")`);

      expect(round(value)).toEqual([""G"", 0.1]);



      value = await myeval(`color.convert([""G"", 0.1], ""RGB"")`);

      expect(round(value)).toEqual([""RGB"", 0.1, 0.1, 0.1]);



      value = await myeval(`color.convert([""G"", 0.1], ""CMYK"")`);

      expect(round(value)).toEqual([""CMYK"", 0, 0, 0, 0.9]);

    it(""should convert Transparent color for different color spaces"", async () => {

      let value = await myeval(`color.convert([""T""], ""T"")`);

      expect(round(value)).toEqual([""T""]);



      value = await myeval(`color.convert([""T""], ""G"")`);

      expect(round(value)).toEqual([""G"", 0]);



      value = await myeval(`color.convert([""T""], ""RGB"")`);

      expect(round(value)).toEqual([""RGB"", 0, 0, 0]);



      value = await myeval(`color.convert([""T""], ""CMYK"")`);

      expect(round(value)).toEqual([""CMYK"", 0, 0, 0, 1]);
",1754
ccef734ebb80e50b0ed15ddc0f4c26cc1619f1ad,"async function testLanguage() {
  try {
    const value = await myeval('app.language');
    expect(value).toEqual('ENU');
  } catch (error) {
    console.log(error);
  }
}

async function testPlatform() {
  try {
    const value = await myeval('app.platform');
    expect(value).toEqual('UNIX');
  } catch (error) {
    console.log(error);
  }
}","    it(""should test language"", async () => {

      let value = await myeval(`app.language`);

      expect(value).toEqual(""ENU"");



      value = await myeval(`app.language = ""hello""`);

      expect(value).toEqual(""app.language is read-only"");

    it(""should test platform"", async () => {

      let value = await myeval(`app.platform`);

      expect(value).toEqual(""UNIX"");



      value = await myeval(`app.platform = ""hello""`);

      expect(value).toEqual(""app.platform is read-only"");
",264
05de20071a43f7dac9903835f479d57e863521f7,"async function processBinaryCMap(data, cMap, extend) {
    try {
        let result = await new Promise(function (resolve, reject) {
            // ...
        });
        return result;
    } catch (err) {
        console.error(""Error while processing binary CMap:"", err);
        return null;
    }
}","    }

  }

  // eslint-disable-next-line no-shadow

  class BinaryCMapReader {

    async process(data, cMap, extend) {
",241
05de20071a43f7dac9903835f479d57e863521f7,"async function createBuiltInCMap(name, fetchBuiltInCMap) {
  try {
    let data = await fetchBuiltInCMap(name);
    let cMapData = data.cMapData;
    let compressionType = data.compressionType;
    if (compressionType === CMapCompressionType.BINARY) {
      return new BinaryCMapReader().process(
        cMapData,
        function (useCMap) {
          return extendCMap(cMap, fetchBuiltInCMap, useCMap);
        }
      );
    } else if (compressionType === CMapCompressionType.NONE) {
      let lexer = new Lexer(new Stream(cMapData));
      return parseCMap(lexer, fetchBuiltInCMap, null);
    } else {
      throw new Error(`TODO: Only BINARY/NONE CMap compression is currently supported.`);
    }
  } catch (error) {
    throw new Error(`Error parsing built-in CMap '${name}': ${error}`);
  }
}","    return cMap;

  async function extendCMap(cMap, fetchBuiltInCMap, useCMap) {

    cMap.useCMap = await createBuiltInCMap(useCMap, fetchBuiltInCMap);

    // If there aren't any code space ranges defined clone all the parent ones

    // into this cMap.

    if (cMap.numCodespaceRanges === 0) {

      var useCodespaceRanges = cMap.useCMap.codespaceRanges;

      for (var i = 0; i < useCodespaceRanges.length; i++) {

        cMap.codespaceRanges[i] = useCodespaceRanges[i].slice();

      }

      cMap.numCodespaceRanges = cMap.useCMap.numCodespaceRanges;

    }

    // Merge the map into the current one, making sure not to override

    // any previously defined entries.

    cMap.useCMap.forEach(function (key, value) {

      if (!cMap.contains(key)) {

        cMap.mapOne(key, cMap.useCMap.lookup(key));



    return cMap;

  async function createBuiltInCMap(name, fetchBuiltInCMap) {

      return new IdentityCMap(false, 2);

      return new IdentityCMap(true, 2);

      throw new Error(""Unknown CMap name: "" + name);

      throw new Error(""Built-in CMap parameters are not provided."");

    const { cMapData, compressionType } = await fetchBuiltInCMap(name);

    var cMap = new CMap(true);



    if (compressionType === CMapCompressionType.BINARY) {

      return new BinaryCMapReader().process(cMapData, cMap, useCMap => {

        return extendCMap(cMap, fetchBuiltInCMap, useCMap);

      });

    }

    if (compressionType === CMapCompressionType.NONE) {

      var lexer = new Lexer(new Stream(cMapData));

      return parseCMap(cMap, lexer, fetchBuiltInCMap, null);

    }

    throw new Error(

      ""TODO: Only BINARY/NONE CMap compression is currently supported.""

    );
",1221
05de20071a43f7dac9903835f479d57e863521f7,"async function parseCMap(cMap, lexer, fetchBuiltInCMap, useCMap) {
  try {
    const parsedCMap = await parseCMap(cMap, lexer, fetchBuiltInCMap, useCMap);
    if (parsedCMap.isIdentityCMap) {
      return createBuiltInCMap(parsedCMap.name, fetchBuiltInCMap);
    }
    return parsedCMap;
  } catch (err) {
    // Handle potential errors
    console.error(err);
  }
}","        const parsedCMap = await parseCMap(

          /* cMap = */ new CMap(),

          /* lexer = */ new Lexer(encoding),

          fetchBuiltInCMap,

          useCMap

        );



        if (parsedCMap.isIdentityCMap) {

          return createBuiltInCMap(parsedCMap.name, fetchBuiltInCMap);

        }

        return parsedCMap;
",218
038668bf8cbf73490e06a70b4d24364499ab484e,"open() {

async () => {

try {

await this.overlayManager.open(this.overlayName);

if (

!this._isViewerEmbedded ||

this.reason === PasswordResponses.INCORRECT_PASSWORD

) {

this.input.focus();

}

let promptString;

if (this.reason === PasswordResponses.INCORRECT_PASSWORD) {

promptString = this.l10n.get(

""password_invalid"",

null,

""Invalid password. Please try again.""

);

} else {

promptString = this.l10n.get(

""password_label"",

null,

""Enter the password to open this PDF file.""

);

}

await promptString.then(msg => {

this.label.textContent = msg;

});

} catch (error) {

console.error(error);

}

}

};","  async open() {

    await this.overlayManager.open(this.overlayName);

    const passwordIncorrect =

      this.reason === PasswordResponses.INCORRECT_PASSWORD;

    if (!this._isViewerEmbedded || passwordIncorrect) {

      this.input.focus();

    }

    this.label.textContent = await this.l10n.get(

      `password_${passwordIncorrect ? ""invalid"" : ""label""}`

    );
",405
038668bf8cbf73490e06a70b4d24364499ab484e,"async function getPageSizeDimension(isPortrait) {
  const rawName = this._pageSize.name;
  let pageName;

  if (rawName) {
    pageName = this.l10n.get(
      ""document_properties_page_size_name_"" + rawName.toLowerCase(),
      null,
      rawName
    );
  }

  const unit = this._isNonMetricLocale ? ""inches"" : ""millimeters"";
  const name = this._isNonMetricLocale ? ""in"" : ""mm"";

  try {
    const [width, height] = await Promise.all([
      ""document_properties_page_size_unit_"" + (this._isNonMetricLocale ? ""inches"" : ""millimeters""),
      null,
      this._isNonMetricLocale ? ""in"" : ""mm"",
    ]);
    return this.l10n.get(
      ""document_properties_page_size_dimension_"" + (name ? ""name_"" : """") + ""string"",
      {
        width: width.toLocaleString(),
        height: height.toLocaleString(),
        unit,
        name,
        orientation: isPortrait ? ""portrait"" : ""landscape"",
      },
      ""{{width}} × {{height}} {{unit}} ("" + (name ? ""{{name}}, "" : """") + ""{{orientation}})"");
  } catch (error) {
    console.log(error);
  }
}","    const [{ width, height }, unit, name, orientation] = await Promise.all([

        `document_properties_page_size_unit_${

          this._isNonMetricLocale ? ""inches"" : ""millimeters""

        }`

      rawName &&

        this.l10n.get(

          `document_properties_page_size_name_${rawName.toLowerCase()}`

        ),

        `document_properties_page_size_orientation_${

          isPortrait ? ""portrait"" : ""landscape""

        }`

    ]);



    return this.l10n.get(

      `document_properties_page_size_dimension_${name ? ""name_"" : """"}string`,

      {

        width: width.toLocaleString(),

        height: height.toLocaleString(),

        unit,

        name,

        orientation,

      }

    );
",605
d92b77e87f9ffb1fc9916ca18be7e6f36f2009ad,"async function () {
  try {
    await this._pdfViewer.pagesPromise;
    this._eventBus.dispatch(""print"", { source: this });
  } catch (error) {
    console.log(error);
  }
}","          await this._pdfViewer.pagesPromise;

          this._eventBus.dispatch(""print"", { source: this });
",78
a2bc6481a081a1093fad8b638c30d5bb8d099584,"async startCleanup() {

  const promise = this.messageHandler.sendWithPromise(""Cleanup"", null);

  try {

    await promise;

    for (let i = 0, ii = this.pageCache.length; i < ii; i++) {

      const page = this.pageCache[i];

      if (page) {

        const cleanupSuccessful = page.cleanup();

        if (!cleanupSuccessful) {

          throw new Error(

            `startCleanup: Page ${i + 1} is currently rendering.`

          );

        }

      }

    this.commonObjs.clear();

    this._hasJSActionsPromise = null;

  } catch (error) {

    console.log(""startCleanup: Error while cleaning up."", error);

  }

}","  async startCleanup(keepLoadedFonts = false) {

    await this.messageHandler.sendWithPromise(""Cleanup"", null);

    if (this.destroyed) {

      return; // No need to manually clean-up when destruction has started.

    }

    for (let i = 0, ii = this.pageCache.length; i < ii; i++) {

      const page = this.pageCache[i];

      if (!page) {

        continue;

      const cleanupSuccessful = page.cleanup();



      if (!cleanupSuccessful) {

        throw new Error(`startCleanup: Page ${i + 1} is currently rendering.`);

      }

    }

    this.commonObjs.clear();

    if (!keepLoadedFonts) {

    }

    this._hasJSActionsPromise = null;
",273
232fbd28e1c23039bea3e2651ef4c76ae8420be4,"async function testCleanupDocumentResources() {
  try {
    const result = await pdfDocument.cleanup();
    expect(true).toEqual(true);
    done();
  } catch (error) {
    done.fail();
  }
}","    it(""cleans up document resources"", async function () {

      await pdfDocument.cleanup();



      expect(true).toEqual(true);
",108
232fbd28e1c23039bea3e2651ef4c76ae8420be4,"it(""cleans up document resources after rendering of page"", async function () {

  let canvasAndCtx;

  try {

    const pdfDoc = await loadingTask.promise;

    const pdfPage = await pdfDoc.getPage(1);

    const viewport = pdfPage.getViewport({ scale: 1 });

    canvasAndCtx = CanvasFactory.create(
      viewport.width,
      viewport.height
    );

    const renderTask = await pdfPage.render({
      canvasContext: canvasAndCtx.context,
      canvasFactory: CanvasFactory,
      viewport,
    });

    await renderTask.promise;

    return await pdfDoc.cleanup();

  } catch (error) {

    throw new Error(""shall fail cleanup"");

  } finally {

    expect(true).toEqual(true);

    CanvasFactory.destroy(canvasAndCtx);

    loadingTask.destroy().then(done);

  }

});","    it(""cleans up document resources after rendering of page"", async function () {

      const pdfDoc = await loadingTask.promise;

      const pdfPage = await pdfDoc.getPage(1);

      const viewport = pdfPage.getViewport({ scale: 1 });

      const canvasAndCtx = CanvasFactory.create(

        viewport.width,

        viewport.height

      );

      const renderTask = pdfPage.render({

        canvasContext: canvasAndCtx.context,

        canvasFactory: CanvasFactory,

        viewport,

      });

      await renderTask.promise;

      await pdfDoc.cleanup();



      expect(true).toEqual(true);



      CanvasFactory.destroy(canvasAndCtx);

      await loadingTask.destroy();

    it(""cleans up document resources during rendering of page"", async function () {

      const pdfDoc = await loadingTask.promise;

      const pdfPage = await pdfDoc.getPage(1);

      const viewport = pdfPage.getViewport({ scale: 1 });

      const canvasAndCtx = CanvasFactory.create(

        viewport.width,

        viewport.height

      );

      const renderTask = pdfPage.render({

        canvasContext: canvasAndCtx.context,

        canvasFactory: CanvasFactory,

        viewport,

      });

      // Ensure that clean-up runs during rendering.

      renderTask.onContinue = function (cont) {

        waitSome(cont);

      };

      try {

        await pdfDoc.cleanup();

        throw new Error(""shall fail cleanup"");

      } catch (reason) {

        expect(reason instanceof Error).toEqual(true);

        expect(reason.message).toEqual(

          ""startCleanup: Page 1 is currently rendering.""

        );

      }

      await renderTask.promise;



      CanvasFactory.destroy(canvasAndCtx);

      await loadingTask.destroy();
",1077
2b2234fd5a789c059c334fda44573a52ee6fbb23,"return shadow(

  this,

  ""hasJSActions"",

  async () => {

    try {

      const fieldObjects = await this.fieldObjects;

      return (

        (fieldObjects !== null &&

          Object.values(fieldObjects).some(fieldObject =>

            fieldObject.some(object => object.actions !== null)

          )) ||

        !!this.catalog.jsActions

      );

    } catch (error) {

      console.log(""Error"", error);

    }

  });","    const promise = this.pdfManager.ensure(this, ""_parseHasJSActions"");

    return shadow(this, ""hasJSActions"", promise);

  }



  /**

   * @private

   */

  async _parseHasJSActions() {

    const [catalogJsActions, fieldObjects] = await Promise.all([

      this.pdfManager.ensureCatalog(""jsActions""),

      this.pdfManager.ensure(this, ""fieldObjects""),

    ]);



    if (catalogJsActions) {

      return true;

    }

    if (fieldObjects) {

      return Object.values(fieldObjects).some(fieldObject =>

        fieldObject.some(object => object.actions !== null)

      );

    }

    return false;
",440
a2811e925dc064b5f7832ee45dbb44871111e4f3,"it(""should resolve with correct data"", async function () {

  let data = await promiseCapability.promise;

  expect(promiseCapability.settled).toEqual(true);

  expect(data).toEqual({ test: ""abc"" });

});

it(""should reject with correct reason"", async function () {

  let reason = await promiseCapability.promise.catch(function (reason) {

    expect(promiseCapability.settled).toEqual(true);

    return reason;

  });

});","    it(""should resolve with correct data"", async function () {

      const data = await promiseCapability.promise;

      expect(promiseCapability.settled).toEqual(true);

      expect(data).toEqual({ test: ""abc"" });

    it(""should reject with correct reason"", async function () {

      try {

        await promiseCapability.promise;

        // Shouldn't get here.

        expect(false).toEqual(true);

      } catch (reason) {

        expect(promiseCapability.settled).toEqual(true);

      }
",145
a56ffb92be63d35fdeb2b3da8f161d9fd4c48fd8,"function () {
  try {
    await Promise.resolve();
    expect(count).toEqual(1);
    document.removeEventListener(""test"", domEventListener);
    done();
  } catch (error) {
    console.log(""Error: "" + error);
  }
}","        // Shouldn't get here.

        expect(false).toEqual(true);

      await Promise.resolve();

      expect(count).toEqual(1);

      document.removeEventListener(""test"", domEventListener);
",141
a56ffb92be63d35fdeb2b3da8f161d9fd4c48fd8,"async function test() {
 try {
    const invalidTarget = Promise.reject(new Error(""Should reject invalid parameters.""))
    const invalidName = Promise.reject(new Error(""Should reject invalid parameters.""))
    const invalidDelay = Promise.reject(new Error(""Should reject invalid parameters.""))
    await Promise.all([invalidTarget, invalidName, invalidDelay])
 } catch (error) {
    done()
 } finally {
    done.fail()
  }
}","          // Shouldn't get here.

          expect(false).toEqual(true);

      await Promise.all([invalidTarget, invalidName, invalidDelay]);

    it(""should resolve on event, using the DOM"", async function () {

        pending(""Document is not supported in Node.js."");
",317
a56ffb92be63d35fdeb2b3da8f161d9fd4c48fd8,"async function buttonClicked() {
  try {
    const type = await expect(WaitOnType.EVENT);
    return type;
  } catch (err) {
    done.fail();
  } finally {
    done();
  }
}","      const type = await buttonClicked;

      expect(type).toEqual(WaitOnType.EVENT);

    it(""should resolve on timeout, using the DOM"", async function () {

        pending(""Document is not supported in Node.js."");
",150
a56ffb92be63d35fdeb2b3da8f161d9fd4c48fd8,"async function testAsync () {
  const type = await buttonClicked;
  expect(type).toEqual(WaitOnType.TIMEOUT);
}

it(""should resolve on event, using the EventBus"", async (done) => {
  try {
    await testAsync();
    done();
  } catch (e) {
    done.fail(e);
  }
});","      const type = await buttonClicked;

      expect(type).toEqual(WaitOnType.TIMEOUT);

    it(""should resolve on event, using the EventBus"", async function () {
",121
a56ffb92be63d35fdeb2b3da8f161d9fd4c48fd8,"pageRendered = async () => {
        try {
          const type = await WaitOnType.EVENT;
          expect(type).toEqual(WaitOnType.EVENT);
          done();
        } catch (error) {
          done.fail();
        }
      };

      it(""should resolve on timeout, using the EventBus"", async () => {

        const result = await pageRendered;
        expect(result).toEqual(WaitOnType.EVENT);
        done();
      });","      const type = await pageRendered;

      expect(type).toEqual(WaitOnType.EVENT);

    it(""should resolve on timeout, using the EventBus"", async function () {
",270
a56ffb92be63d35fdeb2b3da8f161d9fd4c48fd8,"async function renderPage() {

  try {
    const type = await pageRendered;

    expect(type).toEqual(WaitOnType.TIMEOUT);
  } catch (e) {
    done();
  }
}","      const type = await pageRendered;

      expect(type).toEqual(WaitOnType.TIMEOUT);
",72
99dc0d6b65ea956b6201ea0569134ab411286e3a,"it(""should asynchronously fetch unknown keys"", async () => {
  const values = await Promise.all(keyPromises);
  expect(values[0]).toBeUndefined();
  expect(values[1]).toBeUndefined();
});

it(""should asynchronously fetch correct values for multiple stored keys"", async () => {
  const values = await Promise.all(keyPromises);
  expect(values[0]).toEqual(testFontFile3);
  expect(values[1]).toEqual(testFontFile2);
  expect(values[2]).toEqual(testFontFile);
});","    it(""should asynchronously fetch unknown keys"", async function () {

      const values = await Promise.all(keyPromises);

      expect(values[0]).toBeUndefined();

      expect(values[1]).toBeUndefined();

    it(""should asynchronously fetch correct values for multiple stored keys"", async function () {

      const values = await Promise.all(keyPromises);

      expect(values[0]).toEqual(testFontFile3);

      expect(values[1]).toEqual(testFontFile2);

      expect(values[2]).toEqual(testFontFile);
",67
99dc0d6b65ea956b6201ea0569134ab411286e3a,"async function myFunction() {
    const value = await fontDict.getAsync(""FontFile"", ""FontFile2"", ""FontFile3"");
    expect(value).toEqual(testFontFile);
}","      const value = await fontDict.getAsync(

        ""FontFile"",

        ""FontFile2"",

        ""FontFile3""

      );

      expect(value).toEqual(testFontFile);
",68
fcf4d02fca301705419b8b3a94319fc899d6c230,"async function testReadCustomRanges() {
  try {
    const readPromise = Promise.all([read1(), read2(), promise1, promise2]);
    const result = await readPromise;
    expect(isStreamingSupported1).toEqual(false);
    expect(isRangeSupported1).toEqual(false);
    expect(isStreamingSupported2).toEqual(false);
    expect(isRangeSupported2).toEqual(false);
    expect(len1).toEqual(pdfLength);
    expect(len1).toEqual(len2);
    done();
  } catch (reason) {
    done.fail(reason);
  }
}","    await Promise.all([read1(), read2(), promise1, promise2]);



    expect(isStreamingSupported1).toEqual(false);

    expect(isRangeSupported1).toEqual(false);

    expect(isStreamingSupported2).toEqual(false);

    expect(isRangeSupported2).toEqual(false);

    expect(len1).toEqual(pdfLength);

    expect(len1).toEqual(len2);

  it(""read custom ranges for both http(s) and filesystem urls"", async function () {
",175
5607484402adc89d9c8f3d8a7697c86089676f80,"const readPromise = Promise.all([read(), promise]);

async function testReadCustomRanges() {
  try {
    const page = await readPromise;
    expect(len).toEqual(pdf1Length);
    expect(count).toEqual(1);
    expect(isStreamingSupported).toEqual(false);
    expect(isRangeSupported).toEqual(false);
    done();
  } catch (reason) {
    done.fail(reason);
  }
}","    await Promise.all([read(), promise]);



    expect(len).toEqual(pdf1Length);

    expect(count).toEqual(1);

    expect(isStreamingSupported).toEqual(false);

    expect(isRangeSupported).toEqual(false);

  it(""read custom ranges"", async function () {
",146
5607484402adc89d9c8f3d8a7697c86089676f80,"async function testRead() {

  try {

    const result1 = await readPromises;

    expect(result1.value).toEqual(rangeSize);

    const result2 = await readPromises;

    expect(result2.value).toEqual(tailSize);

    expect(isStreamingSupported).toEqual(false);

    expect(isRangeSupported).toEqual(true);

    expect(fullReaderCancelled).toEqual(true);

  } catch (reason) {

    done.fail(reason);

  } finally {

    await readPromises;

  }

}","    await Promise.all([

    expect(result1.value).toEqual(rangeSize);

    expect(result2.value).toEqual(tailSize);

    expect(isStreamingSupported).toEqual(false);

    expect(isRangeSupported).toEqual(true);

    expect(fullReaderCancelled).toEqual(true);
",198
a1c1e1b9f8695617a67cbe209e237162f439d96e,"const readPromise = Promise.all([read(), promise]);

async function() {
  try {
    const resolvedValue = await readPromise;
    expect(resolvedValue).toEqual(pdfLength);
    expect(isStreamingSupported).toEqual(true);
    expect(isRangeSupported).toEqual(false);
  } catch (error) {
    done.fail();
  }
}","    await Promise.all([read(), promise]);



    expect(len).toEqual(pdfLength);

    expect(isStreamingSupported).toEqual(true);

    expect(isRangeSupported).toEqual(false);

  it(""read ranges with streaming"", async function () {
",144
a1c1e1b9f8695617a67cbe209e237162f439d96e,"const readPromise = Promise.all([
    
        // Replace .then() callbacks by assigning the resolved value to a variable using the await keyword
        (async () => {
            try {
                let result1 = await isStreamingSupported();
                let result2 = await isRangeSupported();
                let fullReaderCancelled = await result1.value;
                expect(result1.value).toEqual(rangeSize);
                expect(result2.value).toEqual(tailSize);
                done();
            } catch (error) {
                done.fail(error);
            }
        })(),
    ]);","    await Promise.all([



    expect(isStreamingSupported).toEqual(true);

    expect(isRangeSupported).toEqual(true);

    expect(fullReaderCancelled).toEqual(true);

    expect(result1.value).toEqual(rangeSize);

    expect(result2.value).toEqual(tailSize);
",410
c1e9f6025f7c530a0e81458f34eb2532b3e49f22,"beforeAll(async () => {
  try {
    const doc = await loadingTask.promise;
    page = await doc.getPage(1);
    done();
  } catch (error) {
    done.fail(error);
  } finally {
    await loadingTask.destroy();
  }
});
afterAll(done => {
  loadingTask.destroy().then(done);
});
it(""renders to canvas with a default white background"", async () => {
  try {
    const doc = await loadingTask.promise;
    page = await doc.getPage(1);
    done();
  } catch (error) {
    done.fail(error);
  } finally {
    await loadingTask.destroy();
  }
});","  beforeAll(async function () {

    const doc = await loadingTask.promise;

    const data = await doc.getPage(1);

    page = data;

  afterAll(async function () {

    await loadingTask.destroy();

  it(""renders to canvas with a default white background"", async function () {
",328
c1e9f6025f7c530a0e81458f34eb2532b3e49f22,"renderTask.promise
  .then(async function () {
    const canvasAndCtx = getCanvas();
    const context = canvasAndCtx.context;
    await renderTask(context);
    expect(getTopLeftPixel(canvasAndCtx.context)).toEqual({
      r: 255,
      g: 255,
      b: 255,
      a: 255,
    });
    CanvasFactory.destroy(canvasAndCtx);
    done();
  })
  .catch(done.fail);","    await renderTask.promise;



    expect(getTopLeftPixel(canvasAndCtx.context)).toEqual({

      r: 255,

      g: 255,

      b: 255,

      a: 255,

    });

    CanvasFactory.destroy(canvasAndCtx);

  it(""renders to canvas with a custom background"", async function () {
",200
c1e9f6025f7c530a0e81458f34eb2532b3e49f22,"async function() {

  try{

    const canvasAndCtx = await renderTask.promise;

    expect(getTopLeftPixel(canvasAndCtx.context)).toEqual({
      r: 255,
      g: 0,
      b: 0,
      a: 255,
    });

    CanvasFactory.destroy(canvasAndCtx);

    done();

  }catch(error){

    done.fail();

  }

}","    await renderTask.promise;



    expect(getTopLeftPixel(canvasAndCtx.context)).toEqual({

      r: 255,

      g: 0,

      b: 0,

      a: 255,

    });

    CanvasFactory.destroy(canvasAndCtx);
",112
bc8c0bbbfda12f8c80156097066b7b7036e6c625,"const loadingTask = PDFDocument.load(""https://file-examples-com.github.io/uploads/2017/08/PDF_sample_500kB.pdf"");
let page;
beforeAll(async () => {
  const doc = await loadingTask.promise;
  page = await doc.getPage(1);
});
afterAll(() => loadingTask.destroy());","

  beforeAll(async function () {

    const doc = await loadingTask.promise;

    page = await doc.getPage(1);



  afterAll(async function () {

    await loadingTask.destroy();
",168
bc8c0bbbfda12f8c80156097066b7b7036e6c625,"it(""should produce a reasonably small svg:image"", async () => {
  const svgImg = await withZlib(true, getSVGImage);
  expect(svgImg.nodeName).toBe(""svg:image"");
  expect(svgImg.getAttributeNS(null, ""width"")).toBe(""200px"");
  expect(svgImg.getAttributeNS(null, ""height"")).toBe(""100px"");
  const imgUrl = svgImg.getAttributeNS(XLINK_NS, ""href"");
  expect(imgUrl).toMatch(/^data:image\/png;base64,/);
  expect(imgUrl.length).toBeLessThan(367);
});

it(""should be able to produce a svg:image without zlib"", async () => {
  const svgImg = await withZlib(false, getSVGImage);
  expect(svgImg.nodeName).toBe(""svg:image"");
  expect(svgImg.getAttributeNS(null, ""width"")).toBe(""200px"");
  expect(svgImg.getAttributeNS(null, ""height"")).toBe(""100px"");
  const imgUrl = svgImg.getAttributeNS(XLINK_NS, ""href"");
  expect(imgUrl).toMatch(/^data:image\/png;base64,/);
  expect(imgUrl.length).toBe(80246);
});","    it(""should produce a reasonably small svg:image"", async function () {

      const svgImg = await withZlib(true, getSVGImage);

      expect(svgImg.nodeName).toBe(""svg:image"");

      expect(svgImg.getAttributeNS(null, ""width"")).toBe(""200px"");

      expect(svgImg.getAttributeNS(null, ""height"")).toBe(""100px"");

      const imgUrl = svgImg.getAttributeNS(XLINK_NS, ""href"");

      // forceDataSchema = true, so the generated URL should be a data:-URL.

      expect(imgUrl).toMatch(/^data:image\/png;base64,/);

      // Test whether the generated image has a reasonable file size.

      // I obtained a data URL of size 366 with Node 8.1.3 and zlib 1.2.11.

      // Without zlib (uncompressed), the size of the data URL was excessive

      // (80246).

      expect(imgUrl.length).toBeLessThan(367);

    it(""should be able to produce a svg:image without zlib"", async function () {

      const svgImg = await withZlib(false, getSVGImage);

      expect(svgImg.nodeName).toBe(""svg:image"");

      expect(svgImg.getAttributeNS(null, ""width"")).toBe(""200px"");

      expect(svgImg.getAttributeNS(null, ""height"")).toBe(""100px"");

      const imgUrl = svgImg.getAttributeNS(XLINK_NS, ""href"");

      expect(imgUrl).toMatch(/^data:image\/png;base64,/);

      // The size of our naively generated PNG file is excessive :(

      expect(imgUrl.length).toBe(80246);
",494
43eb4302ff3f77108e24a9a5a8a3b97e7c589439,"async function () {
      try {
        await sleep(10);
        expect(log).toEqual("""");
        const result = await reader.read();
        expect(log).toEqual(""p"");
        expect(result.value).toEqual(""hi"");
        expect(result.done).toEqual(false);
        await sleep(10);
        const result2 = await reader.read();
        expect(result2.value).toEqual(undefined);
        expect(result2.done).toEqual(true);
        done();
      } catch (error) {
        console.log(error);
      }
    };","

      await sleep(10);

      expect(log).toEqual("""");



      let result = await reader.read();

      expect(log).toEqual(""p"");

      expect(result.value).toEqual(""hi"");

      expect(result.done).toEqual(false);



      await sleep(10);

      result = await reader.read();

      expect(result.value).toEqual(undefined);

      expect(result.done).toEqual(true);

    it(""should not read any data when cancelled"", async function () {
",130
43eb4302ff3f77108e24a9a5a8a3b97e7c589439,"async function testReader() {
    try {
        await sleep(10);
        const result = await reader.read();
        expect(result.value).toEqual([1, 2, 3, 4]);
        expect(result.done).toEqual(false);
        await sleep(10);
        const cancelResult = await reader.cancel(new AbortException(""reader cancelled.""));
        expect(log).toEqual(""01p2"");
        done();
    } catch (error) {
        console.error(error);
        done(error);
    }
}","      await sleep(10);

      expect(log).toEqual(""01"");



      const result = await reader.read();

      expect(result.value).toEqual([1, 2, 3, 4]);

      expect(result.done).toEqual(false);



      await sleep(10);

      expect(log).toEqual(""01p2"");



      await reader.cancel(new AbortException(""reader cancelled.""));

      expect(log).toEqual(""01p2c4"");

    it(""should not read when errored"", async function () {
",168
43eb4302ff3f77108e24a9a5a8a3b97e7c589439,"async function sleep(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
}

async function test() {
  await sleep(10);
  const result = await reader.read();
  expect(result.value).toEqual([1, 2, 3, 4]);
  expect(result.done).toEqual(false);
  try {
    const nextResult = await reader.read();
    expect(nextResult.value).toEqual([1, 2, 3, 4]);
    expect(nextResult.done).toEqual(false);
  } catch (reason) {
    expect(log).toEqual(""01pe"");
    expect(reason instanceof UnknownErrorException).toEqual(true);
    expect(reason.message).toEqual(""should not read when errored"");
    done();
  }
}","      await sleep(10);

      expect(log).toEqual(""01"");

      const result = await reader.read();

      expect(result.value).toEqual([1, 2, 3, 4]);

      expect(result.done).toEqual(false);



      try {

        await reader.read();



        // Shouldn't get here.

        expect(false).toEqual(true);

      } catch (reason) {

        expect(log).toEqual(""01pe"");

        expect(reason instanceof UnknownErrorException).toEqual(true);

        expect(reason.message).toEqual(""should not read when errored"");

      }

    it(""should read data with blocking promise"", async function () {
",287
43eb4302ff3f77108e24a9a5a8a3b97e7c589439,"async function () {
  try {
    const result = await sleep(10);
    expect(log).toEqual(""01"");
    return reader.read();
  } catch (error) {
    console.error(error);
  }
  try {
    const result = await sleep(10);
    expect(result.value).toEqual([1, 2, 3, 4]);
    expect(result.done).toEqual(false);
    return sleep(10);
  } catch (error) {
    console.error(error);
  }
  try {
    const result = await sleep(10);
    expect(log).toEqual(""01p2"");
    return reader.read();
  } catch (error) {
    console.error(error);
  }
  try {
    const result = await sleep(10);
    expect(result.value).toEqual([5, 6, 7, 8]);
    expect(result.done).toEqual(false);
    return sleep(10);
  } catch (error) {
    console.error(error);
  }
  try {
    const result = await sleep(10);
    expect(log).toEqual(""01p2p"");
    return reader.read();
  } catch (error) {
    console.error(error);
  }
  try {
    const result = await sleep(10);
    expect(result.value).toEqual(undefined);
    expect(result.done).toEqual(true);
    done();
  } catch (error) {
    console.error(error);
  }
}","      await sleep(10);

      expect(log).toEqual(""01"");



      let result = await reader.read();

      expect(result.value).toEqual([1, 2, 3, 4]);

      expect(result.done).toEqual(false);



      await sleep(10);

      expect(log).toEqual(""01p2"");



      result = await reader.read();

      expect(result.value).toEqual([5, 6, 7, 8]);

      expect(result.done).toEqual(false);



      await sleep(10);

      expect(log).toEqual(""01p2p"");



      result = await reader.read();

      expect(result.value).toEqual(undefined);

      expect(result.done).toEqual(true);

      async function () {
",583
43eb4302ff3f77108e24a9a5a8a3b97e7c589439,"async function test() {
  try {
    const sleep = () => new Promise((resolve) => setTimeout(resolve, 10));
    await sleep();
    expect(log).toEqual(""012"");
    const result = await reader.read();
    expect(result.value).toEqual([1, 2, 3, 4]);
    expect(result.done).toEqual(false);
    await sleep();
    expect(log).toEqual(""012p"");
    result = await reader.read();
    expect(result.value).toEqual([5, 6, 7, 8]);
    expect(result.done).toEqual(false);
    await sleep();
    expect(log).toEqual(""012p"");
    result = await reader.read();
    expect(result.value).toEqual(undefined);
    expect(result.done).toEqual(true);
    done();
  } catch (err) {
    console.error(err);
  }
}","        await sleep(10);

        expect(log).toEqual(""012"");

        let result = await reader.read();

        expect(result.value).toEqual([1, 2, 3, 4]);

        expect(result.done).toEqual(false);



        await sleep(10);

        expect(log).toEqual(""012p"");



        result = await reader.read();

        expect(result.value).toEqual([5, 6, 7, 8]);

        expect(result.done).toEqual(false);



        await sleep(10);

        expect(log).toEqual(""012p"");



        result = await reader.read();

        expect(result.value).toEqual(undefined);

        expect(result.done).toEqual(true);

    it(""should ignore any pull after close is called"", async function () {
",241
43eb4302ff3f77108e24a9a5a8a3b97e7c589439,"async function() {
      try {
        await sleep(10);
        let result = await capability.promise;
        expect(result.value).toEqual([1, 2, 3, 4]);
        expect(result.done).toEqual(false);
        await sleep(10);
        result = await reader.read();
        expect(result.value).toEqual(undefined);
        expect(result.done).toEqual(true);
        done();
      } catch (error) {
        console.log(error);
      }
    }","      await sleep(10);

      expect(log).toEqual(""01"");

      capability.resolve();

      await capability.promise;



      let result = await reader.read();

      expect(result.value).toEqual([1, 2, 3, 4]);

      expect(result.done).toEqual(false);



      await sleep(10);

      expect(log).toEqual(""01"");



      result = await reader.read();

      expect(result.value).toEqual(undefined);

      expect(result.done).toEqual(true);
",231
38ed655562c47dcac2888ecd49775bd87980f1e8,"it(""parses beginbfchar"", async () => {
  const cmap = await CMapFactory.create({ encoding: stream });
  expect(cmap.lookup(0x03)).toEqual(String.fromCharCode(0x00));
  expect(cmap.lookup(0x04)).toEqual(String.fromCharCode(0x01));
  expect(cmap.lookup(0x05)).toBeUndefined();
});

it(""parses beginbfrange with range"", async () => {
  const cmap = await CMapFactory.create({ encoding: stream });
  expect(cmap.lookup(0x05)).toBeUndefined();
  expect(cmap.lookup(0x06)).toEqual(String.fromCharCode(0x00));
  expect(cmap.lookup(0x0b)).toEqual(String.fromCharCode(0x05));
  expect(cmap.lookup(0x0c)).toBeUndefined();
});

it(""parses beginbfrange with array"", async () => {
  const cmap = await CMapFactory.create({ encoding: stream });
  expect(cmap.lookup(0x0c)).toBeUndefined();
  expect(cmap.lookup(0x0d)).toEqual(0x00);
  expect(cmap.lookup(0x12)).toEqual(0x05);
  expect(cmap.lookup(0x13)).toBeUndefined();
});

it(""parses begincidchar"", async () => {
  const cmap = await CMapFactory.create({ encoding: stream });
  expect(cmap.lookup(0x14)).toEqual(0x00);
  expect(cmap.lookup(0x15)).toBeUndefined();
});

it(""parses begincidrange"", async () => {
  const cmap = await CMapFactory.create({ encoding: stream });
  expect(cmap.lookup(0x15)).toBeUndefined();
  expect(cmap.lookup(0x16)).toEqual(0x00);
  expect(cmap.lookup(0x1b)).toEqual(0x05);
  expect(cmap.lookup(0x1c)).toBeUndefined();
});

it(""decodes codespace ranges"", async () => {
  const cmap = await CMapFactory.create({ encoding: stream });
  const c = {};
  cmap.readCharCode(String.fromCharCode(1), 0, c);
  expect(c.charcode).toEqual(1);
  expect(c.length).toEqual(1);
  cmap.readCharCode(String.fromCharCode(0, 0, 0, 3), 0, c);
  expect(c.charcode).toEqual(3);
  expect(c.length).toEqual(4);
});

it(""decodes 4 byte codespace ranges"", async () => {
  const cmap = await CMapFactory.create({ encoding: stream });
  const c = {};
  cmap.readCharCode(String.fromCharCode(0x8e, 0xa1, 0xa1, 0xa1), 0, c);
  expect(c.charcode).toEqual(0x8ea1a1a1);
  expect(c.length).toEqual(4);
});

it(""read usecmap"", async () => {
  const cmap = await CMapFactory.create({ encoding: stream });
  expect(cmap instanceof CMap).toEqual(true);
  expect(cmap.useCMap).not.toBeNull();
  expect(cmap.builtInCMap).toBeFalsy();
  expect(cmap.length).toEqual(0x20a7);
  expect(cmap.isIdentityCMap).toEqual(false);
});

it(""parses cmapname"", async () => {
  const cmap = await CMapFactory.create({ encoding: stream });
  expect(cmap.name).toEqual(""Identity-H"");
});

it(""parses wmode"", async () => {
  const cmap = await CMapFactory.create({ encoding: stream });
  expect(cmap.vertical).toEqual(true);
});

it(""loads built in cmap"", async () => {
  const cmap = await CMapFactory.create({
    cmapPromise
  });
  expect(cmap instanceof CMap).toEqual(true);
  expect(cmap.useCMap).toBeNull();
  expect(cmap.builtInCMap).toBeTruthy();
  expect(cmap.length).toEqual(0x20a7);
  expect(cmap.isIdentityCMap).toEqual(false);
});

it(""loads built in identity cmap"", async () => {
  const cmap = await CMapFactory.create({
    cmapPromise
  });
  expect(cmap instanceof IdentityCMap).toEqual(true);
  expect(cmap.vertical).toEqual(false);
  expect(cmap.length).toEqual(0x10000);
  expect(function () {
    return cmap.isIdentityCMap;
  }).toThrow(new Error(""should not access .isIdentityCMap""));
});

it(""attempts to load a non-existent built-in CMap"", async () => {
  const cmapPromise = await CMapFactory.create({
    encoding: Name.get(""null""),
    fetchBuiltInCMap,
    useCMap: null,
  });
  expect(cmapPromise).toBeNull();
});

it(""attempts to load a built-in CMap without the necessary API parameters"", async () => {
  const cmapPromise = await CMapFactory.create({
    name,
  });
  expect(cmapPromise).toBeNull();
});

it(""attempts to load a built-in CMap with inconsistent API parameters"", async () => {
  const cmapPromise = await CMapFactory.create({
    encoding: Name.get(""Adobe-Japan1-1""),
    fetchBuiltInCMap: tmpFetchBuiltInCMap,
    useCMap: null,
  });
  expect(cmapPromise).toBeNull();
});","  it(""parses beginbfchar"", async function () {

    const cmap = await CMapFactory.create({ encoding: stream });

    expect(cmap.lookup(0x03)).toEqual(String.fromCharCode(0x00));

    expect(cmap.lookup(0x04)).toEqual(String.fromCharCode(0x01));

    expect(cmap.lookup(0x05)).toBeUndefined();



  it(""parses beginbfrange with range"", async function () {

    const cmap = await CMapFactory.create({ encoding: stream });

    expect(cmap.lookup(0x05)).toBeUndefined();

    expect(cmap.lookup(0x06)).toEqual(String.fromCharCode(0x00));

    expect(cmap.lookup(0x0b)).toEqual(String.fromCharCode(0x05));

    expect(cmap.lookup(0x0c)).toBeUndefined();



  it(""parses beginbfrange with array"", async function () {

    const cmap = await CMapFactory.create({ encoding: stream });

    expect(cmap.lookup(0x0c)).toBeUndefined();

    expect(cmap.lookup(0x0d)).toEqual(0x00);

    expect(cmap.lookup(0x12)).toEqual(0x05);

    expect(cmap.lookup(0x13)).toBeUndefined();



  it(""parses begincidchar"", async function () {

    const cmap = await CMapFactory.create({ encoding: stream });

    expect(cmap.lookup(0x14)).toEqual(0x00);

    expect(cmap.lookup(0x15)).toBeUndefined();



  it(""parses begincidrange"", async function () {

    const cmap = await CMapFactory.create({ encoding: stream });

    expect(cmap.lookup(0x15)).toBeUndefined();

    expect(cmap.lookup(0x16)).toEqual(0x00);

    expect(cmap.lookup(0x1b)).toEqual(0x05);

    expect(cmap.lookup(0x1c)).toBeUndefined();



  it(""decodes codespace ranges"", async function () {

    const cmap = await CMapFactory.create({ encoding: stream });

    const c = {};

    cmap.readCharCode(String.fromCharCode(1), 0, c);

    expect(c.charcode).toEqual(1);

    expect(c.length).toEqual(1);

    cmap.readCharCode(String.fromCharCode(0, 0, 0, 3), 0, c);

    expect(c.charcode).toEqual(3);

    expect(c.length).toEqual(4);



  it(""decodes 4 byte codespace ranges"", async function () {

    const cmap = await CMapFactory.create({ encoding: stream });

    const c = {};

    cmap.readCharCode(String.fromCharCode(0x8e, 0xa1, 0xa1, 0xa1), 0, c);

    expect(c.charcode).toEqual(0x8ea1a1a1);

    expect(c.length).toEqual(4);



  it(""read usecmap"", async function () {

    const cmap = await CMapFactory.create({

    expect(cmap instanceof CMap).toEqual(true);

    expect(cmap.useCMap).not.toBeNull();

    expect(cmap.builtInCMap).toBeFalsy();

    expect(cmap.length).toEqual(0x20a7);

    expect(cmap.isIdentityCMap).toEqual(false);



  it(""parses cmapname"", async function () {

    const cmap = await CMapFactory.create({ encoding: stream });

    expect(cmap.name).toEqual(""Identity-H"");



  it(""parses wmode"", async function () {

    const cmap = await CMapFactory.create({ encoding: stream });

    expect(cmap.vertical).toEqual(true);



  it(""loads built in cmap"", async function () {

    const cmap = await CMapFactory.create({

    expect(cmap instanceof CMap).toEqual(true);

    expect(cmap.useCMap).toBeNull();

    expect(cmap.builtInCMap).toBeTruthy();

    expect(cmap.length).toEqual(0x20a7);

    expect(cmap.isIdentityCMap).toEqual(false);



  it(""loads built in identity cmap"", async function () {

    const cmap = await CMapFactory.create({

    expect(cmap instanceof IdentityCMap).toEqual(true);

    expect(cmap.vertical).toEqual(false);

    expect(cmap.length).toEqual(0x10000);

    expect(function () {

      return cmap.isIdentityCMap;

    }).toThrow(new Error(""should not access .isIdentityCMap""));

  it(""attempts to load a non-existent built-in CMap"", async function () {

    try {

      await CMapFactory.create({

        encoding: Name.get(""null""),

        fetchBuiltInCMap,

        useCMap: null,

      });



      // Shouldn't get here.

      expect(false).toEqual(true);

    } catch (reason) {

      expect(reason instanceof Error).toEqual(true);

      expect(reason.message).toEqual(""Unknown CMap name: null"");

    }

  it(""attempts to load a built-in CMap without the necessary API parameters"", async function () {

      return CMapReaderFactory.fetch({ name });

    }

    try {

      await CMapFactory.create({

        encoding: Name.get(""Adobe-Japan1-1""),

        fetchBuiltInCMap: tmpFetchBuiltInCMap,

        useCMap: null,

      // Shouldn't get here.

      expect(false).toEqual(true);

    } catch (reason) {

      expect(reason instanceof Error).toEqual(true);

      expect(reason.message).toEqual(

        'The CMap ""baseUrl"" parameter must be specified, ensure that ' +

          'the ""cMapUrl"" and ""cMapPacked"" API parameters are provided.'

      );

    }

  it(""attempts to load a built-in CMap with inconsistent API parameters"", async function () {

      return CMapReaderFactory.fetch({ name });

    }

    try {

      await CMapFactory.create({

        encoding: Name.get(""Adobe-Japan1-1""),

        fetchBuiltInCMap: tmpFetchBuiltInCMap,

        useCMap: null,

      // Shouldn't get here.

      expect(false).toEqual(true);

    } catch (reason) {

      expect(reason instanceof Error).toEqual(true);

      const message = reason.message;

      expect(message.startsWith(""Unable to load CMap at: "")).toEqual(true);

      expect(message.endsWith(""/external/bcmaps/Adobe-Japan1-1"")).toEqual(true);

    }
",1546
f560fe68756728ab33f9253e2f6da7c84b4b364f,"async function ensure (obj, prop, args) {

    try{

        const value = obj[prop];

        if (typeof value === ""function"") {

            return await value.apply(obj, args);

        } else {

            return await value;

        }

} catch (err) {

    throw err;

}","        ensureDoc(prop, args) {

          return pdfManager.ensure(pdfDocument, prop, args);

        },

        async ensure(obj, prop, args) {

          const value = obj[prop];

          if (typeof value === ""function"") {

            return value.apply(obj, args);

          }

          return value;
",181
c2f3a71eca40fe5e2ebe39431aba20c3830f7946,"const promises = [];

async function createPdfDocFromUrl() {
  const loadingTask = getDocument(url);
  try {
    const data = await loadingTask.promise;
    expect(data instanceof PDFDocumentProxy).toEqual(true);
    done();
  } catch (error) {
    done.fail(""shall fail loading"");
  } finally {
    loadingTask.destroy().then(done);
  }
}

async function createPdfDocFromTypedArray() {
  const typedArrayPdfPromise = DefaultFileReaderFactory.fetch({
    typedArrayPdfPromise,
  });
  try {
    const data = await loadingTask.promise;
    expect(data[0] instanceof PDFDocumentProxy).toEqual(true);
    done();
  } catch (error) {
    done.fail(""shall fail loading"");
  } finally {
    loadingTask.destroy().then(done);
  }
}

async function createPdfDocFromInvalidPdfFile() {
  const loadingTask = getDocument(invalidUrl);
  try {
    await loadingTask.promise;
    done.fail(""shall fail loading"");
  } catch (error) {
    expect(error instanceof InvalidPDFException).toEqual(true);
    expect(error.message).toEqual(""Invalid PDF structure."");
  } finally {
    loadingTask.destroy().then(done);
  }
}

async function createPdfDocFromNonExistentUrl() {
  const loadingTask = getDocument(nonExistentUrl);
  try {
    await loadingTask.promise;
    done.fail(""shall fail loading"");
  } catch (error) {
    expect(error instanceof MissingPDFException).toEqual(true);
  } finally {
    loadingTask.destroy().then(done);
  }
}

async function createPdfDocFromProtectedPdfFile() {
  const loadingTask = getDocument(protectedUrl, {
    password: ""test"",
  });
  try {
    const data = await loadingTask.promise;
    expect(data instanceof PDFDocumentProxy).toEqual(true);
    done();
  } catch (error) {
    done.fail(""shall fail loading"");
  } finally {
    loadingTask.destroy().then(done);
  }
}","      const data = await Promise.all([

      ]);



      expect(data[0].loaded / data[0].total >= 0).toEqual(true);

      expect(data[1] instanceof PDFDocumentProxy).toEqual(true);

      expect(loadingTask).toEqual(data[1].loadingTask);



      await loadingTask.destroy();



    it(""creates pdf doc from URL and aborts before worker initialized"", async function () {

      try {

        await loadingTask.promise;



        // Shouldn't get here.

        expect(false).toEqual(true);

      } catch (reason) {

        expect(true).toEqual(true);

        await destroyed;

      }



    it(""creates pdf doc from URL and aborts loading after worker initialized"", async function () {



      await destroyed;

      expect(true).toEqual(true);



    it(""creates pdf doc from typed array"", async function () {

      const typedArrayPdf = await DefaultFileReaderFactory.fetch({

      // Sanity check to make sure that we fetched the entire PDF file.

      expect(typedArrayPdf.length).toEqual(basicApiFileLength);

      const loadingTask = getDocument(typedArrayPdf);

      const progressReportedCapability = createPromiseCapability();

      loadingTask.onProgress = function (data) {

        progressReportedCapability.resolve(data);

      };

      const data = await Promise.all([

        loadingTask.promise,

        progressReportedCapability.promise,

      ]);

      expect(data[0] instanceof PDFDocumentProxy).toEqual(true);

      expect(data[1].loaded / data[1].total).toEqual(1);

      await loadingTask.destroy();



    it(""creates pdf doc from invalid PDF file"", async function () {

      try {

        await loadingTask.promise;



        // Shouldn't get here.

        expect(false).toEqual(true);

      } catch (reason) {

        expect(reason instanceof InvalidPDFException).toEqual(true);

        expect(reason.message).toEqual(""Invalid PDF structure."");

      }



      await loadingTask.destroy();



    it(""creates pdf doc from non-existent URL"", async function () {

        // Re-enable in https://github.com/mozilla/pdf.js/issues/13061.

        pending(""Fails intermittently on Linux in browsers."");



      try {

        await loadingTask.promise;



        // Shouldn't get here.

        expect(false).toEqual(true);

      } catch (reason) {

        expect(reason instanceof MissingPDFException).toEqual(true);

      }



      await loadingTask.destroy();



    it(""creates pdf doc from PDF file protected with user and owner password"", async function () {
",1741
c2f3a71eca40fe5e2ebe39431aba20c3830f7946,"async function createPdfDocFromPDFFileProtectedWithOnlyAUserPassword(done) {
  try {
    const promises = [];
    await Promise.all(promises);
    expect(data[2] instanceof PDFDocumentProxy).toEqual(true);
    await loadingTask.destroy();
    done();
  } catch (err) {
    done.fail();
  }
}","      const data = await Promise.all([

      ]);

      expect(data[2] instanceof PDFDocumentProxy).toEqual(true);



      await loadingTask.destroy();



    it(""creates pdf doc from PDF file protected with only a user password"", async function () {
",195
c2f3a71eca40fe5e2ebe39431aba20c3830f7946,"async function run() {
  const [result1, result2, result3] = await Promise.all([result1, result2, result3]);
  done();
}","

      await Promise.all([result1, result2, result3]);

      async function () {
",75
c2f3a71eca40fe5e2ebe39431aba20c3830f7946,"async function() {

  try {

    const result1 = await Promise.all([result1, result2]);

    done();

  } catch (reason) {

    expect(reason instanceof InvalidPDFException);

    expect(reason.message).toEqual(

      ""The PDF file is empty, i.e. its size is zero bytes.""

    );

    loadingTask.destroy().then(done);

  }

}

it(""creates pdf doc from empty typed array"", async function () {

  try {

    await worker.promise;

    expect(worker.name).toEqual(""test1"");

    expect(!!worker.port).toEqual(true);

    expect(worker.destroyed).toEqual(false);

    expect(!!worker._webWorker).toEqual(true);

    expect(worker.port === worker._webWorker).toEqual(true);

  } catch (reason) {

    expect(reason instanceof InvalidPDFException);

    expect(reason.message).toEqual(

      ""The PDF file is empty, i.e. its size is zero bytes.""

    );

    loadingTask.destroy().then(done);

  }

}

it(""worker created or destroyed"", async function () {

  try {

    await worker.promise;

    expect(worker.name).toEqual(""test1"");

    expect(!!worker.port).toEqual(true);

    expect(worker.destroyed).toEqual(false);

    expect(!!worker._webWorker).toEqual(true);

    expect(worker.port === worker._webWorker).toEqual(true);

  } catch (reason) {

    expect(reason instanceof InvalidPDFException);

    expect(reason.message).toEqual(

      ""The PDF file is empty, i.e. its size is zero bytes.""

    );

    loadingTask.destroy().then(done);

  }

}

it(""worker created or destroyed by getDocument"", async function () {

  try {

    await worker.promise;

    expect(worker.name).toEqual(""test1"");

    expect(!!worker.port).toEqual(true);

    expect(worker.destroyed).toEqual(false);

    expect(!!worker._webWorker).toEqual(true);

    expect(worker.port === worker._webWorker).toEqual(true);

  } catch (reason) {

    expect(reason instanceof InvalidPDFException);

    expect(reason.message).toEqual(

      ""The PDF file is empty, i.e. its size is zero bytes.""

    );

    loadingTask.destroy().then(done);

  }

}","        await Promise.all([result1, result2]);

    it(""creates pdf doc from empty typed array"", async function () {

      try {

        await loadingTask.promise;

        // Shouldn't get here.

        expect(false).toEqual(true);

      } catch (reason) {

        expect(reason instanceof InvalidPDFException).toEqual(true);

        expect(reason.message).toEqual(

          ""The PDF file is empty, i.e. its size is zero bytes.""

        );

      }



      await loadingTask.destroy();

    it(""worker created or destroyed"", async function () {

      await worker.promise;

      expect(worker.name).toEqual(""test1"");

      expect(!!worker.port).toEqual(true);

      expect(worker.destroyed).toEqual(false);

      expect(!!worker._webWorker).toEqual(true);

      expect(worker.port === worker._webWorker).toEqual(true);



      worker.destroy();

      expect(!!worker.port).toEqual(false);

      expect(worker.destroyed).toEqual(true);



    it(""worker created or destroyed by getDocument"", async function () {
",1209
c2f3a71eca40fe5e2ebe39431aba20c3830f7946,"async () => {
  try {
    const destroyedWorker = await loadingTask._worker;
    expect(!!destroyedWorker).toEqual(false);
    expect(worker.destroyed).toEqual(true);
    done();
  } catch (error) {
    done.fail(error);
  } finally {
    done();
  }
}","      await destroyPromise;



      const destroyedWorker = loadingTask._worker;

      expect(!!destroyedWorker).toEqual(false);

      expect(worker.destroyed).toEqual(true);



    it(""worker created and can be used in getDocument"", async function () {
",109
c2f3a71eca40fe5e2ebe39431aba20c3830f7946,"`
async () => {
  try {
    await destroyPromise;
    expect(worker.destroyed).toEqual(false);
    worker.destroy();
    done();
  } catch (error) {
    done.fail(error);
  }
}

async () => {
  try {
    const workers = await createWorkersPromise;
    expect(workers).toBeDefined();
    expect(workers.length > 1).toEqual(true);
    done();
  } catch (error) {
    done.fail(error);
  }
}","      await destroyPromise;



      expect(worker.destroyed).toEqual(false);

      worker.destroy();



    it(""creates more than one worker"", async function () {
",259
c2f3a71eca40fe5e2ebe39431aba20c3830f7946,"const ready = Promise.all([

        worker1.promise,

        worker2.promise,

        worker3.promise,

      ]);

       async function () {

         try{

           const resolvedValue = await ready;

            expect(

              worker1.port !== worker2.port &&

                worker1.port !== worker3.port &&

                worker2.port !== worker3.port

            ).toEqual(true);

            worker1.destroy();

            worker2.destroy();

            worker3.destroy();

          } catch (err) {

            done.fail(err);

          } finally{

            done();

          }

        }","      await Promise.all([worker1.promise, worker2.promise, worker3.promise]);



      expect(

        worker1.port !== worker2.port &&

          worker1.port !== worker3.port &&

          worker2.port !== worker3.port

      ).toEqual(true);

      worker1.destroy();

      worker2.destroy();

      worker3.destroy();


",304
c2f3a71eca40fe5e2ebe39431aba20c3830f7946,"beforeAll(async function () {
    const data = await pdfLoadingTask.promise;
    pdfDocument = data;
  });

  afterAll(async function () {
    await pdfLoadingTask.destroy();
  });

  it(""gets page"", async function () {
    try {
      const data = await pdfDocument.getPage(1);
      expect(data instanceof PDFPageProxy).toEqual(true);
      expect(data.pageNumber).toEqual(1);
    } catch (error) {
      done.fail(error);
    }
  });

  it(""gets non-existent page"", async function () {
    try {
      const data = await pdfDocument.getPage(1);
      expect(data instanceof PDFPageProxy).toEqual(true);
      expect(data.pageNumber).toEqual(1);
    } catch (error) {
      done.fail(error);
    }
  });","

    beforeAll(async function () {

      pdfDocument = await pdfLoadingTask.promise;

    afterAll(async function () {

      await pdfLoadingTask.destroy();





    it(""gets page"", async function () {

      const data = await pdfDocument.getPage(1);

      expect(data instanceof PDFPageProxy).toEqual(true);

      expect(data.pageNumber).toEqual(1);



    it(""gets non-existent page"", async function () {
",339
c2f3a71eca40fe5e2ebe39431aba20c3830f7946,"async function getPage() {
  try {
    await Promise.all([outOfRangePromise, nonIntegerPromise, nonNumberPromise]);
  } catch (error) {
    done(error);
  } finally {
    done();
  }
}","      await Promise.all([

        outOfRangePromise,

        nonIntegerPromise,

        nonNumberPromise,

      ]);

    it(""gets page, from /Pages tree with circular reference"", async function () {
",135
c2f3a71eca40fe5e2ebe39431aba20c3830f7946,"async function getPageIndex(ref) {
  try {
    const pageIndex = await pdfDocument.getPageIndex(ref);
    return pageIndex;
  } catch (error) {
    return null;
  }
}

async function getDestinations() {
  const destinations = await pdfDocument.getDestinations();
  return destinations;
}

async function getDestination(name) {
  try {
    const destination = await pdfDocument.getDestination(name);
    return destination;
  } catch (error) {
    return null;
  }
}","      await Promise.all([page1, page2]);

      await loadingTask.destroy();

    it(""gets page index"", async function () {

      const ref = { num: 17, gen: 0 }; // Reference to second page.

      const pageIndex = await pdfDocument.getPageIndex(ref);

      expect(pageIndex).toEqual(1);



    it(""gets invalid page index"", async function () {



      try {

        await pdfDocument.getPageIndex(ref);



        // Shouldn't get here.

        expect(false).toEqual(true);

      } catch (reason) {

        expect(reason instanceof Error).toEqual(true);

      }

    it(""gets destinations, from /Dests dictionary"", async function () {

      const destinations = await pdfDocument.getDestinations();

      expect(destinations).toEqual({

        chapter1: [{ gen: 0, num: 17 }, { name: ""XYZ"" }, 0, 841.89, null],

      });



    it(""gets a destination, from /Dests dictionary"", async function () {

      const destination = await pdfDocument.getDestination(""chapter1"");

      expect(destination).toEqual([

        { gen: 0, num: 17 },

        { name: ""XYZ"" },

        0,

        841.89,

        null,

      ]);



    it(""gets a non-existent destination, from /Dests dictionary"", async function () {

      const destination = await pdfDocument.getDestination(

      expect(destination).toEqual(null);

    it(""gets destinations, from /Names (NameTree) dictionary"", async function () {

      const pdfDoc = await loadingTask.promise;

      const destinations = await pdfDoc.getDestinations();

      expect(destinations).toEqual({

        ""Page.1"": [{ num: 1, gen: 0 }, { name: ""XYZ"" }, 0, 375, null],

        ""Page.2"": [{ num: 6, gen: 0 }, { name: ""XYZ"" }, 0, 375, null],

      await loadingTask.destroy();



    it(""gets a destination, from /Names (NameTree) dictionary"", async function () {

      const pdfDoc = await loadingTask.promise;

      const destination = await pdfDoc.getDestination(""Page.1"");

      expect(destination).toEqual([

        { num: 1, gen: 0 },

        { name: ""XYZ"" },

        0,

        375,

        null,

      ]);

      await loadingTask.destroy();



    it(""gets a non-existent destination, from /Names (NameTree) dictionary"", async function () {

      const pdfDoc = await loadingTask.promise;

      const destination = await pdfDoc.getDestination(

        ""non-existent-named-destination""

      );

      expect(destination).toEqual(null);

      await loadingTask.destroy();

    it(""gets non-string destination"", async function () {
",2096
c2f3a71eca40fe5e2ebe39431aba20c3830f7946,"async function test() {
      const numberPromise = pdfDocument.getPageLabels();
      const booleanPromise = numberPromise.then((data) => expect(data).toEqual(null));
      try {
        await booleanPromise;
        done();
      } catch (error) {
        done.fail(error);
      }
    }","      await Promise.all([numberPromise, booleanPromise, arrayPromise]);

    it(""gets non-existent page labels"", async function () {

      const pageLabels = await pdfDocument.getPageLabels();

      expect(pageLabels).toEqual(null);



    it(""gets page labels"", async function () {
",236
c2f3a71eca40fe5e2ebe39431aba20c3830f7946,"// Migrate from Promises to async/await
    async function getPageLabels() {
      try {
        const pageLabels = await Promise.all([promise0, promise1, promise2, promise3]);
        expect(pageLabels[0]).toEqual([""i"", ""ii"", ""iii"", ""1""]);
        expect(pageLabels[1]).toEqual([""Front Page1""]);
        expect(pageLabels[2]).toEqual([""1"", ""2""]);
        expect(pageLabels[3]).toEqual([""X3""]);
      } catch (error) {
        done.fail(error);
      }
    }
  
    async function getPageLayout() {
      try {
        const pdfDoc = await loadingTask.promise;
        const mode = await pdfDoc.getPageLayout();
        expect(mode).toEqual("""");
        loadingTask.destroy().then(done);
      } catch (error) {
        done.fail(error);
      }
    }
  
    async function getPageMode() {
      try {
        const mode = await pdfDocument.getPageMode();
        expect(mode).toEqual(""SinglePage"");
        done();
      } catch (error) {
        done.fail(error);
      }
    }
  
    async function getViewerPreferences() {
      try {
        const prefs = await pdfDocument.getViewerPreferences();
        expect(prefs).toEqual({ Direction: ""L2R"" });
        done();
      } catch (error) {
        done.fail(error);
      }
    }
  
    async function getOpenAction() {
      try {
        const openAction = await pdfDocument.getOpenAction();
        expect(openAction.dest).toEqual([{ num: 15, gen: 0 }, { name: ""FitH"" }, null]);
        expect(openAction.action).toBeUndefined();
        done();
      } catch (error) {
        done.fail(error);
      }
    }","      const pageLabels = await Promise.all([

        promise0,

        promise1,

        promise2,

        promise3,

      ]);

      expect(pageLabels[0]).toEqual([""i"", ""ii"", ""iii"", ""1""]);

      expect(pageLabels[1]).toEqual([""Front Page1""]);

      expect(pageLabels[2]).toEqual([""1"", ""2""]);

      expect(pageLabels[3]).toEqual([""X3""]);



      await Promise.all([

        loadingTask0.destroy(),

        loadingTask1.destroy(),

        loadingTask2.destroy(),

        loadingTask3.destroy(),

      ]);

    it(""gets default page layout"", async function () {

      const pdfDoc = await loadingTask.promise;

      const pageLayout = await pdfDoc.getPageLayout();

      expect(pageLayout).toEqual("""");

      await loadingTask.destroy();

    });

    it(""gets non-default page layout"", async function () {

      const pageLayout = await pdfDocument.getPageLayout();

      expect(pageLayout).toEqual(""SinglePage"");

    it(""gets default page mode"", async function () {

      const pdfDoc = await loadingTask.promise;

      const pageMode = await pdfDoc.getPageMode();

      expect(pageMode).toEqual(""UseNone"");

      await loadingTask.destroy();

    });

    it(""gets non-default page mode"", async function () {

      const pageMode = await pdfDocument.getPageMode();

      expect(pageMode).toEqual(""UseOutlines"");

    it(""gets default viewer preferences"", async function () {

      const pdfDoc = await loadingTask.promise;

      const prefs = await pdfDoc.getViewerPreferences();

      expect(prefs).toEqual(null);

      await loadingTask.destroy();

    });

    it(""gets non-default viewer preferences"", async function () {

      const prefs = await pdfDocument.getViewerPreferences();

      expect(prefs).toEqual({ Direction: ""L2R"" });

    it(""gets default open action"", async function () {

      const pdfDoc = await loadingTask.promise;

      const openAction = await pdfDoc.getOpenAction();

      expect(openAction).toEqual(null);

      await loadingTask.destroy();

    it(""gets non-default open action (with destination)"", async function () {

      const openAction = await pdfDocument.getOpenAction();

      expect(openAction.dest).toEqual([

        { num: 15, gen: 0 },

        { name: ""FitH"" },

        null,

      ]);

      expect(openAction.action).toBeUndefined();



    it(""gets non-default open action (with Print action)"", async function () {
",1320
c2f3a71eca40fe5e2ebe39431aba20c3830f7946,"async function getJavaScript() {
  try {
    const promise = await loadingTask.promise.then((pdfDoc) => pdfDoc.getJavaScript());
    const data = await promise;
    expect(data).toEqual([
      ""this.print({bUI:true,bSilent:false,bShrinkToFit:true});"",
    ]);
    expect(data[0]).toMatch(AutoPrintRegExp);
    loadingTask.destroy().then(() => done());
  } catch (error) {
    done.fail(error);
  }
}","      await Promise.all([promise1, promise2]);

    it(""gets non-existent attachments"", async function () {

      const attachments = await pdfDocument.getAttachments();

      expect(attachments).toEqual(null);



    it(""gets attachments"", async function () {

      const pdfDoc = await loadingTask.promise;

      const attachments = await pdfDoc.getAttachments();

      const attachment = attachments[""foo.txt""];

      expect(attachment.filename).toEqual(""foo.txt"");

      expect(attachment.content).toEqual(

        new Uint8Array([98, 97, 114, 32, 98, 97, 122, 32, 10])

      );



      await loadingTask.destroy();

    it(""gets javascript"", async function () {

      const javascript = await pdfDocument.getJavaScript();

      expect(javascript).toEqual(null);



    it(""gets javascript with printing instructions (JS action)"", async function () {

      const pdfDoc = await loadingTask.promise;

      const javascript = await pdfDoc.getJavaScript();



      expect(javascript).toEqual([

        ""this.print({bUI:true,bSilent:false,bShrinkToFit:true});"",

      ]);

      expect(javascript[0]).toMatch(AutoPrintRegExp);



      await loadingTask.destroy();
",926
c2f3a71eca40fe5e2ebe39431aba20c3830f7946,"`it(""checks that fingerprints are unique"", async function () {
      try {
        const data = await Promise.all([loadingTask1.promise, loadingTask2.promise]);
        const fingerprint1 = data[0].fingerprint;
        const fingerprint2 = data[1].fingerprint;
        expect(fingerprint1).not.toEqual(fingerprint2);
        expect(fingerprint1).toEqual(""2f695a83d6e7553c24fc08b7ac69712d"");
        expect(fingerprint2).toEqual(""04c7126b34a46b6d4d6e7a1eff7edcb6"");
        await Promise.all([loadingTask1.destroy(), loadingTask2.destroy()]);
      } catch (error) {
        done.fail(error);
      }
    });`","    it(""checks that fingerprints are unique"", async function () {

      const data = await Promise.all([

        loadingTask1.promise,

        loadingTask2.promise,

      ]);

      const fingerprint1 = data[0].fingerprint;

      const fingerprint2 = data[1].fingerprint;

      expect(fingerprint1).not.toEqual(fingerprint2);

      expect(fingerprint1).toEqual(""2f695a83d6e7553c24fc08b7ac69712d"");

      expect(fingerprint2).toEqual(""04c7126b34a46b6d4d6e7a1eff7edcb6"");

      await Promise.all([loadingTask1.destroy(), loadingTask2.destroy()]);
",123
c2f3a71eca40fe5e2ebe39431aba20c3830f7946,"async function testCannotLoad(url) {
  const loadingTask = PDFJS.getDocument({ url });

  try {
    await loadingTask.promise;
    done();
  } catch (error) {
    done();
  }
}

async function testCanLoad(url) {
  const loadingTask = PDFJS.getDocument({ url });

  try {
    await loadingTask.promise;
    done();
  } catch (error) {
    done();
  }
}","

      afterEach(async function () {

          await loadingTask.destroy();



      it(""server disallows cors"", async function () {

        await testCannotLoad(""basicapi.pdf"");



      it(""server allows cors without credentials, default withCredentials"", async function () {

        await testCanLoad(""basicapi.pdf?cors=withoutCredentials"");



      it(""server allows cors without credentials, and withCredentials=false"", async function () {

        await testCanLoad(""basicapi.pdf?cors=withoutCredentials"", {

        });



      it(""server allows cors without credentials, but withCredentials=true"", async function () {

        await testCannotLoad(""basicapi.pdf?cors=withoutCredentials"", {

        });



      it(""server allows cors with credentials, and withCredentials=true"", async function () {

        await testCanLoad(""basicapi.pdf?cors=withCredentials"", {

        });



      it(""server allows cors with credentials, and withCredentials=false"", async function () {

        await testCanLoad(""basicapi.pdf?cors=withCredentials"", {

        });



    beforeAll(async function () {

      pdfDocument = await pdfLoadingTask.promise;

      page = await pdfDocument.getPage(1);

    afterAll(async function () {

      await pdfLoadingTask.destroy();






",1021
c2f3a71eca40fe5e2ebe39431aba20c3830f7946,"async function test() {
  try {
    const result = await Promise.all([defaultPromise, displayPromise, printPromise]);
    done();
  } catch (error) {
    done.fail(error);
  }
}","

      await Promise.all([defaultPromise, displayPromise, printPromise]);

    it(""gets annotations containing relative URLs (bug 766086)"", async function () {
",113
c2f3a71eca40fe5e2ebe39431aba20c3830f7946,"async function getTextContent() {
  const promises = [defaultPromise, parametersPromise];

  try {
    const data = await Promise.all(promises);

    expect(data[0].items).toEqual(true);

    expect(data[0].items.length).toEqual(7);

    expect(data[0].styles).toEqual(true);

    // A simple check that ensures the two `textContent` object match.

    expect(JSON.stringify(data[0])).toEqual(JSON.stringify(data[1]));

    return data;
  } catch (error) {
    done.fail(error);
  }
}

async function getTextContentWithCorrectProperties() {
  try {
    const pdfDoc = await loadingTask.promise;

    const pdfPage = await pdfDoc.getPage(1);

    const textContent = await pdfPage.getTextContent();

    expect(textContent.items.length).toEqual(1);

    expect(Object.keys(textContent.styles)).toEqual([""Times""]);

    expect(textContent.items[0]).toEqual({
      dir: ""ltr"",

      fontName: ""Times"",

      height: 18,

      str: ""Issue 8276"",

      transform: [18, 0, 0, 18, 441.81, 708.4499999999999],

      width: 77.49,
    });

    expect(textContent.styles.Times).toEqual({
      fontFamily: ""serif"",

      ascent: NaN,

      descent: NaN,

      vertical: false,
    });

    loadingTask.destroy().then(done);
  } catch (error) {
    done.fail(error);
  }
}","      const [

        defaultAnnotations,

        docBaseUrlAnnotations,

        invalidDocBaseUrlAnnotations,

      ] = await Promise.all([

        defaultPromise,

        docBaseUrlPromise,

        invalidDocBaseUrlPromise,

      ]);

      expect(defaultAnnotations[0].url).toBeUndefined();

      expect(defaultAnnotations[0].unsafeUrl).toEqual(

        ""../../0021/002156/215675E.pdf#15""

      );

      expect(docBaseUrlAnnotations[0].url).toEqual(

        ""http://www.example.com/0021/002156/215675E.pdf#15""

      );

      expect(docBaseUrlAnnotations[0].unsafeUrl).toEqual(

        ""../../0021/002156/215675E.pdf#15""

      );

      expect(invalidDocBaseUrlAnnotations[0].url).toBeUndefined();

      expect(invalidDocBaseUrlAnnotations[0].unsafeUrl).toEqual(

        ""../../0021/002156/215675E.pdf#15""

      );

      await Promise.all([

        defaultLoadingTask.destroy(),

        docBaseUrlLoadingTask.destroy(),

        invalidDocBaseUrlLoadingTask.destroy(),

      ]);

    it(""gets text content"", async function () {

      const data = await Promise.all([defaultPromise, parametersPromise]);

      expect(!!data[0].items).toEqual(true);

      expect(data[0].items.length).toEqual(7);

      expect(!!data[0].styles).toEqual(true);

      // A simple check that ensures the two `textContent` object match.

      expect(JSON.stringify(data[0])).toEqual(JSON.stringify(data[1]));

    it(""gets text content, with correct properties (issue 8276)"", async function () {

      const pdfDoc = await loadingTask.promise;

      const pdfPage = await pdfDoc.getPage(1);

      const { items, styles } = await pdfPage.getTextContent();

      expect(items.length).toEqual(1);

      expect(Object.keys(styles)).toEqual([""Times""]);



      expect(items[0]).toEqual({

        dir: ""ltr"",

        fontName: ""Times"",

        height: 18,

        str: ""Issue 8276"",

        transform: [18, 0, 0, 18, 441.81, 708.4499999999999],

        width: 77.49,

      });

      expect(styles.Times).toEqual({

        fontFamily: ""serif"",

        ascent: NaN,

        descent: NaN,

        vertical: false,

      });

      await loadingTask.destroy();
",1284
c2f3a71eca40fe5e2ebe39431aba20c3830f7946,"it(""gets operator list"", async () => {
  const oplist = await page.getOperatorList();
  expect(!!oplist.fnArray).toEqual(true);
  expect(!!oplist.argsArray).toEqual(true);
  expect(oplist.lastChunk).toEqual(true);
});

it(""gets operatorList with JPEG image (issue 4888)"", async () => {
  const pdfDoc = await loadingTask.promise;
  const pdfPage = await pdfDoc.getPage(1);
  const opList = await pdfPage.getOperatorList();
  const imgIndex = opList.fnArray.indexOf(OPS.paintImageXObject);
  const imgArgs = opList.argsArray[imgIndex];
  const { data } = await pdfPage.objs.get(imgArgs[0]);
  expect(data instanceof Uint8ClampedArray).toEqual(true);
  expect(data.length).toEqual(90000);
});","    it(""gets operator list"", async function () {

      const operatorList = await page.getOperatorList();

      expect(!!operatorList.fnArray).toEqual(true);

      expect(!!operatorList.argsArray).toEqual(true);

      expect(operatorList.lastChunk).toEqual(true);

    it(""gets operatorList with JPEG image (issue 4888)"", async function () {

      const pdfDoc = await loadingTask.promise;

      const pdfPage = await pdfDoc.getPage(1);

      const operatorList = await pdfPage.getOperatorList();

      const imgIndex = operatorList.fnArray.indexOf(OPS.paintImageXObject);

      const imgArgs = operatorList.argsArray[imgIndex];

      const { data } = pdfPage.objs.get(imgArgs[0]);

      expect(data instanceof Uint8ClampedArray).toEqual(true);

      expect(data.length).toEqual(90000);



      await loadingTask.destroy();

      async function () {
",204
c2f3a71eca40fe5e2ebe39431aba20c3830f7946,"async function renderPage() {
  try {
    await renderTask.promise;
  } catch (error) {
    expect(error instanceof RenderingCancelledException).toEqual(true);
    expect(error.message).toEqual(""Rendering cancelled, page 1"");
    expect(error.type).toEqual(""canvas"");
    CanvasFactory.destroy(canvasAndCtx);
    done();
  }
}","      try {

        await renderTask.promise;

        // Shouldn't get here.

        expect(false).toEqual(true);

      } catch (reason) {

        expect(reason instanceof RenderingCancelledException).toEqual(true);

        expect(reason.message).toEqual(""Rendering cancelled, page 1"");

        expect(reason.type).toEqual(""canvas"");

      }



      CanvasFactory.destroy(canvasAndCtx);

    it(""re-render page, using the same canvas, after cancelling rendering"", async function () {
",228
c2f3a71eca40fe5e2ebe39431aba20c3830f7946,"it(""multiple render() on the same canvas"", async function () {
  const renderTask = page.render({
    canvasContext: canvasAndCtx.context,
    canvasFactory: CanvasFactory,
    viewport,
  });
  try {
    await renderTask.promise;
  } catch (error) {
    expect(error instanceof RenderingCancelledException).toEqual(true);
  }
  const reRenderTask = page.render({
    canvasContext: canvasAndCtx.context,
    canvasFactory: CanvasFactory,
    viewport,
  });
  try {
    await reRenderTask.promise;
  } finally {
    CanvasFactory.destroy(canvasAndCtx);
    done();
  }
});","      try {

        await renderTask.promise;



        // Shouldn't get here.

        expect(false).toEqual(true);

      } catch (reason) {

        expect(reason instanceof RenderingCancelledException).toEqual(true);

      }



      const reRenderTask = page.render({

        canvasContext: canvasAndCtx.context,

        canvasFactory: CanvasFactory,

        viewport,

      });

      await reRenderTask.promise;



      CanvasFactory.destroy(canvasAndCtx);

    it(""multiple render() on the same canvas"", async function () {
",297
c2f3a71eca40fe5e2ebe39431aba20c3830f7946,"async function renderCanvas() {
    try {
        const done = await Promise.all([done.fail(""shall fail rendering"")]);
        return done;
    } catch (error) {
        console.log(error);
        // handle error here
    }
}","      await Promise.all([

            // Shouldn't get here.

            expect(false).toEqual(true);

            // It fails because we are already using this canvas.

      ]);
",172
c2f3a71eca40fe5e2ebe39431aba20c3830f7946,"async function afterEach() {
  try {
    await Promise.all(destroyPromises);
    done();
  } catch (err) {
    console.error(""Error in afterEach:"", err);
  }
}

async function it() {
  try {
    const results = await Promise.all(renderPromises);
    expect(results).toEqual(expectedResults);
  } catch (err) {
    console.error(""Error in it:"", err);
  }
  done();
}","    afterEach(async function () {

      await Promise.all(destroyPromises);

    it(""should correctly render PDFs in parallel"", async function () {
",269
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function test() {
    try {
      const annotation = await AnnotationFactory.create();
      expect(annotation.data.annotationType).toEqual(AnnotationType.LINK);
      expect(annotation.data.id).toEqual(""10R"");
      done();
    } catch (error) {
      done.fail(error);
    }
  }","      const { data } = await AnnotationFactory.create(

      );

      expect(data.annotationType).toEqual(AnnotationType.LINK);

      expect(data.id).toEqual(""10R"");

      async function () {
",129
f4237d3a09ced37f67d4859b12d5fb60bc986548,"const annotation1 = Promise.resolve();
    const annotation2 = Promise.resolve();
    (async () => {
      try {
        const [data] = await Promise.all([annotation1, annotation2]);
        expect(data.annotationType).toBeUndefined();
      } catch (error) {
        done.fail(error);
      } finally {
        done();
      }
    })();","        await Promise.all([annotation1, annotation2]);

    it(""should handle missing /Subtype"", async function () {

      const { data } = await AnnotationFactory.create(

      );

      expect(data.annotationType).toBeUndefined();
",230
f4237d3a09ced37f67d4859b12d5fb60bc986548,"it(""should not parse IRT/RT when not defined"", async () => {

    try {

      const data = await AnnotationFactory.create(xref, ref, pdfManagerMock, idFactoryMock);

      expect(data.inReplyTo).toBeUndefined();

      expect(data.replyType).toBeUndefined();

      done();

    } catch (error) {

      done.fail(error);

    }

  });

  it(""should parse IRT and set default RT when not defined."", async () => {

    try {

      const data = await AnnotationFactory.create(xref, ref, pdfManagerMock, idFactoryMock);

      expect(data.inReplyTo).toBeUndefined();

      expect(data.replyType).toBeUndefined();

      done();

    } catch (error) {

      done.fail(error);

    }

  });","    it(""should not parse IRT/RT when not defined"", async function () {

      const { data } = await AnnotationFactory.create(

        xref,

        ref,

        pdfManagerMock,

        idFactoryMock

      expect(data.inReplyTo).toBeUndefined();

      expect(data.replyType).toBeUndefined();

    it(""should parse IRT and set default RT when not defined"", async function () {
",408
f4237d3a09ced37f67d4859b12d5fb60bc986548,"`it(""should parse IRT/RT for a group type"", async function(done) {
      try {
        const { data } = await AnnotationFactory.create();

        expect(data.inReplyTo).toEqual(annotationRef.toString());

        expect(data.replyType).toEqual(""R"");

        done();
      } catch (error) {
        done.fail(error);
      }
    });`","      const { data } = await AnnotationFactory.create(

      );

      expect(data.inReplyTo).toEqual(annotationRef.toString());

      expect(data.replyType).toEqual(""R"");

    it(""should parse IRT/RT for a group type"", async function () {
",160
f4237d3a09ced37f67d4859b12d5fb60bc986548,"AnnotationFactory.create()
    .then(({ data }) => {
        expect(data.inReplyTo).toEqual(annotationRef.toString());
        expect(data.replyType).toEqual(""Group"");
        expect(data.title).toEqual(""ParentTitle"");
        expect(data.contents).toEqual(""ParentText"");
        expect(data.creationDate).toEqual(""D:20180423"");
        expect(data.modificationDate).toEqual(""D:20190423"");
        expect(data.color).toEqual(new Uint8ClampedArray([0, 0, 255]));
        expect(data.hasPopup).toEqual(true);
        done();
    }, done.fail);","      const { data } = await AnnotationFactory.create(

      );

      expect(data.inReplyTo).toEqual(annotationRef.toString());

      expect(data.replyType).toEqual(""Group"");

      expect(data.title).toEqual(""ParentTitle"");

      expect(data.contents).toEqual(""ParentText"");

      expect(data.creationDate).toEqual(""D:20180423"");

      expect(data.modificationDate).toEqual(""D:20190423"");

      expect(data.color).toEqual(new Uint8ClampedArray([0, 0, 255]));

      expect(data.hasPopup).toEqual(true);

    it(""should parse IRT/RT for a reply type"", async function () {
",116
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function test() {
  const data = await AnnotationFactory.create();
  expect(data.inReplyTo).toEqual(annotationRef.toString());
  expect(data.replyType).toEqual(""R"");
  expect(data.title).toEqual(""ReplyTitle"");
  expect(data.contents).toEqual(""ReplyText"");
  expect(data.creationDate).toEqual(""D:20180523"");
  expect(data.modificationDate).toEqual(""D:20190523"");
  expect(data.color).toEqual(new Uint8ClampedArray([102, 102, 102]));
  expect(data.hasPopup).toEqual(false);
}","      const { data } = await AnnotationFactory.create(

      );

      expect(data.inReplyTo).toEqual(annotationRef.toString());

      expect(data.replyType).toEqual(""R"");

      expect(data.title).toEqual(""ReplyTitle"");

      expect(data.contents).toEqual(""ReplyText"");

      expect(data.creationDate).toEqual(""D:20180523"");

      expect(data.modificationDate).toEqual(""D:20190523"");

      expect(data.color).toEqual(new Uint8ClampedArray([102, 102, 102]));

      expect(data.hasPopup).toEqual(false);

    it(""should not parse state model and state when not defined"", async function () {
",160
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function testCreate() {
  const data = await AnnotationFactory.create();

  expect(data.stateModel).toBeNull();
  expect(data.state).toBeNull();
}

it(""should correctly parse state model and state when defined"", async () => {
    try {
      const data = await AnnotationFactory.create();

      expect(data.stateModel).toBeNull();
      expect(data.state).toBeNull();
    } catch (err) {
      done.fail(err);
    }
  });
}","      const { data } = await AnnotationFactory.create(

      );

      expect(data.stateModel).toBeNull();

      expect(data.state).toBeNull();

    it(""should correctly parse state model and state when defined"", async function () {
",248
f4237d3a09ced37f67d4859b12d5fb60bc986548,"AnnotationFactory.create(async () => {
    const data = await AnnotationFactory.create(

      ).then(({ data }) => {
        expect(data.stateModel).toEqual(""Review"");
        expect(data.state).toEqual(""Rejected"");
        done();
      }, done.fail);
    });
  it(""should correctly parse a URI action"", async () => {

      const data = await AnnotationFactory.create(

      ).then(({ data }) => {
        expect(data.stateModel).toEqual(""Review"");
        expect(data.state).toEqual(""Rejected"");
        done();
      }, done.fail);
    });
  }","      const { data } = await AnnotationFactory.create(

      );

      expect(data.stateModel).toEqual(""Review"");

      expect(data.state).toEqual(""Rejected"");

    it(""should correctly parse a URI action"", async function () {
",334
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function create() {
    const data = await AnnotationFactory.create();
    expect(data.annotationType).toEqual(AnnotationType.LINK);
    expect(data.url).toEqual(""http://www.ctan.org/tex-archive/info/lshort"");
    expect(data.unsafeUrl).toEqual(""http://www.ctan.org/tex-archive/info/lshort"");
    expect(data.dest).toBeUndefined();
    done();
  }","      const { data } = await AnnotationFactory.create(

      );

      expect(data.annotationType).toEqual(AnnotationType.LINK);

      expect(data.url).toEqual(""http://www.ctan.org/tex-archive/info/lshort"");

      expect(data.unsafeUrl).toEqual(

        ""http://www.ctan.org/tex-archive/info/lshort""

      );

      expect(data.dest).toBeUndefined();

      async function () {
",86
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function test() {
    try {
        const { data } = await AnnotationFactory.create();
        expect(data.annotationType).toEqual(AnnotationType.LINK);
        expect(data.url).toEqual(""http://www.hmrc.gov.uk/"");
        expect(data.unsafeUrl).toEqual(""http://www.hmrc.gov.uk"");
        expect(data.dest).toBeUndefined();
    } catch (error) {
        done.fail(error);
    } finally {
        done();
    }
}","        const { data } = await AnnotationFactory.create(

        );

        expect(data.annotationType).toEqual(AnnotationType.LINK);

        expect(data.url).toEqual(""http://www.hmrc.gov.uk/"");

        expect(data.unsafeUrl).toEqual(""http://www.hmrc.gov.uk"");

        expect(data.dest).toBeUndefined();

      async function () {
",118
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function testCreateAnnotation() {
  const annotationData = await AnnotationFactory.create();
  expect(annotationData.annotationType).toEqual(AnnotationType.LINK);
  expect(annotationData.url).toEqual(new URL(""http://www.example.com/üöä""));
  expect(annotationData.unsafeUrl).toEqual(undefined);
  expect(annotationData.dest).toBeUndefined();
}","        const { data } = await AnnotationFactory.create(

        );

        expect(data.annotationType).toEqual(AnnotationType.LINK);

        expect(data.url).toEqual(

          new URL(

          ).href

        );

        expect(data.unsafeUrl).toEqual(

          stringToUTF8String(""http://www.example.com/\xC3\xBC\xC3\xB6\xC3\xA4"")

        );

        expect(data.dest).toBeUndefined();

    it(""should correctly parse a GoTo action"", async function () {
",320
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function testCreate(done) {
  const data = await AnnotationFactory.create();
  expect(data.annotationType).toEqual(AnnotationType.LINK);
  expect(data.url).toBeUndefined();
  expect(data.unsafeUrl).toBeUndefined();
  expect(data.dest).toEqual(""page.157"");
  done();
}","      const { data } = await AnnotationFactory.create(

      );

      expect(data.annotationType).toEqual(AnnotationType.LINK);

      expect(data.url).toBeUndefined();

      expect(data.unsafeUrl).toBeUndefined();

      expect(data.dest).toEqual(""page.157"");

      async function () {
",84
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function test() {
const data = await AnnotationFactory.create();

expect(data.annotationType).toEqual(AnnotationType.LINK);

expect(data.url).toBeUndefined();

expect(data.unsafeUrl).toEqual(""../../0013/001346/134685E.pdf#4.3"");

expect(data.dest).toBeUndefined();

expect(data.newWindow).toEqual(true);

done();
}","        const { data } = await AnnotationFactory.create(

        );

        expect(data.annotationType).toEqual(AnnotationType.LINK);

        expect(data.url).toBeUndefined();

        expect(data.unsafeUrl).toEqual(""../../0013/001346/134685E.pdf#4.3"");

        expect(data.dest).toBeUndefined();

        expect(data.newWindow).toEqual(true);

      async function () {
",95
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function testCase() {
  try {
    const annotationData = await AnnotationFactory.create();
    expect(annotationData.annotationType).toEqual(AnnotationType.LINK);
    expect(annotationData.url).toEqual(""http://www.example.com/0013/001346/134685E.pdf#4.3"");
    expect(annotationData.unsafeUrl).toEqual(""../../0013/001346/134685E.pdf#4.3"");
    expect(annotationData.dest).toBeUndefined();
  } catch (error) {
    done.fail(error);
  }
}","        const { data } = await AnnotationFactory.create(

        );

        expect(data.annotationType).toEqual(AnnotationType.LINK);

        expect(data.url).toEqual(

          ""http://www.example.com/0013/001346/134685E.pdf#4.3""

        );

        expect(data.unsafeUrl).toEqual(""../../0013/001346/134685E.pdf#4.3"");

        expect(data.dest).toBeUndefined();

    it(""should correctly parse a GoToR action, with named destination"", async function () {
",213
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async () => {
    try {
        const data = await AnnotationFactory.create();
        expect(data.annotationType).toEqual(AnnotationType.LINK);
        expect(data.url).toEqual(""http://www.example.com/test.pdf#15"");
        expect(data.unsafeUrl).toEqual(""http://www.example.com/test.pdf#15"");
        expect(data.dest).toBeUndefined();
        expect(data.newWindow).toBeFalsy();
        done();
    } catch (error) {
        done.fail(error);
    }
}","      const { data } = await AnnotationFactory.create(

      );

      expect(data.annotationType).toEqual(AnnotationType.LINK);

      expect(data.url).toEqual(""http://www.example.com/test.pdf#15"");

      expect(data.unsafeUrl).toEqual(""http://www.example.com/test.pdf#15"");

      expect(data.dest).toBeUndefined();

      expect(data.newWindow).toBeFalsy();

    it(""should correctly parse a GoToR action, with explicit destination array"", async function () {
",127
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function testCreateAnnotation() {
    const data = await AnnotationFactory.create();
    expect(data.annotationType).toEqual(AnnotationType.LINK);
    expect(data.url).toEqual(new URL(""http://www.example.com/test.pdf#"" + '[14,{""name"":""XYZ""},null,298.043,null]').href);
    expect(data.unsafeUrl).toEqual();
    expect(data.dest).toBeUndefined();
    expect(data.newWindow).toBeFalsy();
  }","      const { data } = await AnnotationFactory.create(

      );

      expect(data.annotationType).toEqual(AnnotationType.LINK);

      expect(data.url).toEqual(

        new URL(

        ).href

      );

      expect(data.unsafeUrl).toEqual(

        ""http://www.example.com/test.pdf#"" +

          '[14,{""name"":""XYZ""},null,298.043,null]'

      );

      expect(data.dest).toBeUndefined();

      expect(data.newWindow).toBeFalsy();

      async function () {
",221
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function create() {
  try {
    const data = await AnnotationFactory.create();
    expect(data.annotationType).toEqual(AnnotationType.LINK);
    expect(data.url).toEqual(new URL(""http://www.example.com/test/pdfs/Part II/Part II.pdf"").href);
    expect(data.unsafeUrl).toEqual(""Part II/Part II.pdf"");
    expect(data.dest).toBeUndefined();
    expect(data.newWindow).toEqual(true);
    done();
  } catch (error) {
    done.fail();
  }
}","        const { data } = await AnnotationFactory.create(

        );

        expect(data.annotationType).toEqual(AnnotationType.LINK);

        expect(data.url).toEqual(

          new URL(""http://www.example.com/test/pdfs/Part II/Part II.pdf"").href

        );

        expect(data.unsafeUrl).toEqual(""Part II/Part II.pdf"");

        expect(data.dest).toBeUndefined();

        expect(data.newWindow).toEqual(true);

      async function () {
",131
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function test() {
  try {
    const annotations = await Promise.all([annotation1, annotation2, annotation3]);
    done();
  } catch (error) {
    done.fail(error);
  }
}","        await Promise.all([annotation1, annotation2, annotation3]);

    it(""should correctly parse a Named action"", async function () {
",102
f4237d3a09ced37f67d4859b12d5fb60bc986548,"`
  AnnotationFactory.create()
    .then(({ data }) => {
      expect(data.annotationType).toEqual(AnnotationType.LINK);
      expect(data.url).toBeUndefined();
      expect(data.unsafeUrl).toBeUndefined();
      expect(data.action).toEqual(""GoToPage"");
      done();
    }, done.fail);
  });

  it(""should correctly parse a simple Dest"", async () => {
    try {
      const data = await AnnotationFactory.create();
      expect(data.annotationType).toEqual(AnnotationType.LINK);
      expect(data.url).toBeUndefined();
      expect(data.unsafeUrl).toBeUndefined();
      expect(data.action).toEqual(""GoToPage"");
    } catch (error) {
      done.fail(error);
    }
  });","      const { data } = await AnnotationFactory.create(

      );

      expect(data.annotationType).toEqual(AnnotationType.LINK);

      expect(data.url).toBeUndefined();

      expect(data.unsafeUrl).toBeUndefined();

      expect(data.action).toEqual(""GoToPage"");

    it(""should correctly parse a simple Dest"", async function () {
",397
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function create() {
      const { data } = await AnnotationFactory.create();
  
      expect(data.annotationType).toEqual(AnnotationType.LINK);
  
      expect(data.url).toBeUndefined();
  
      expect(data.unsafeUrl).toBeUndefined();
  
      expect(data.dest).toEqual(""LI0"");
  
      done();
    }
    
    it(""should correctly parse a simple Dest, with explicit destination array"", async function (done) {
      await create();
      done();
    });","      const { data } = await AnnotationFactory.create(

      );

      expect(data.annotationType).toEqual(AnnotationType.LINK);

      expect(data.url).toBeUndefined();

      expect(data.unsafeUrl).toBeUndefined();

      expect(data.dest).toEqual(""LI0"");

    it(""should correctly parse a simple Dest, with explicit destination array"", async function () {
",115
f4237d3a09ced37f67d4859b12d5fb60bc986548,"const annotation = await AnnotationFactory.create();

    expect(annotation.data.annotationType).toEqual(AnnotationType.LINK);

    expect(annotation.data.url).toBeUndefined();

    expect(annotation.data.unsafeUrl).toBeUndefined();

    expect(annotation.data.dest).toEqual([
      { num: 17, gen: 0 },
      { name: ""XYZ"" },
      0,
      841.89,
      null,
    ]);

    done();","      const { data } = await AnnotationFactory.create(

      );

      expect(data.annotationType).toEqual(AnnotationType.LINK);

      expect(data.url).toBeUndefined();

      expect(data.unsafeUrl).toBeUndefined();

      expect(data.dest).toEqual([

        { num: 17, gen: 0 },

        { name: ""XYZ"" },

        0,

        841.89,

        null,

      ]);

      async function () {
",110
f4237d3a09ced37f67d4859b12d5fb60bc986548,"it('should create an annotation and set the quadpoints if defined', async () => {
  const data = await AnnotationFactory.create({quadpoints: 'some value'});

  expect(data.annotationType).toEqual(AnnotationType.LINK);

  expect(data.url).toBeUndefined();

  expect(data.unsafeUrl).toBeUndefined();

  expect(data.dest).toEqual('page.157');
});","        const { data } = await AnnotationFactory.create(

        );

        expect(data.annotationType).toEqual(AnnotationType.LINK);

        expect(data.url).toBeUndefined();

        expect(data.unsafeUrl).toBeUndefined();

        expect(data.dest).toEqual(""page.157"");

    it(""should not set quadpoints if not defined"", async function () {
",198
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async () => {

    const annotation = await AnnotationFactory.create();

    try {
        expect(annotation.data.annotationType).toEqual(AnnotationType.LINK);
        expect(annotation.data.quadPoints).toBeUndefined();
        done();
    } catch (error) {
        done.fail();
    }
};","      const { data } = await AnnotationFactory.create(

      );

      expect(data.annotationType).toEqual(AnnotationType.LINK);

      expect(data.quadPoints).toBeUndefined();

    it(""should set quadpoints if defined"", async function () {
",109
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function testAnnotationFactory() {
  const annotation = await AnnotationFactory.create();
  expect(annotation.annotationType).toEqual(AnnotationType.LINK);
  expect(annotation.quadPoints).toEqual([
    [{ x: 10, y: 20 }, { x: 20, y: 20 }, { x: 10, y: 10 }, { x: 20, y: 10 }],
  ]);
}","      const { data } = await AnnotationFactory.create(

      );

      expect(data.annotationType).toEqual(AnnotationType.LINK);

      expect(data.quadPoints).toEqual([

        [

          { x: 10, y: 20 },

          { x: 20, y: 20 },

          { x: 10, y: 10 },

          { x: 20, y: 10 },

        ],

      ]);
",147
f4237d3a09ced37f67d4859b12d5fb60bc986548,"it(""should handle unknown field names"", async () => {
  const { data } = await AnnotationFactory.create();
  expect(data.annotationType).toEqual(AnnotationType.WIDGET);
  expect(data.fieldName).toEqual("""");
});

it(""should construct the field name when there are no ancestors"", async () => {
  const { data } = await AnnotationFactory.create();
  expect(data.annotationType).toEqual(AnnotationType.WIDGET);
  expect(data.fieldName).toEqual(""foo"");
});

it(""should construct the field name when there are ancestors"", async () => {
  const { data } = await AnnotationFactory.create();
  expect(data.annotationType).toEqual(AnnotationType.WIDGET);
  expect(data.fieldName).toEqual(""foo"");
});","    it(""should handle unknown field names"", async function () {

      const { data } = await AnnotationFactory.create(

      );

      expect(data.annotationType).toEqual(AnnotationType.WIDGET);

      expect(data.fieldName).toEqual("""");

    it(""should construct the field name when there are no ancestors"", async function () {

      const { data } = await AnnotationFactory.create(

      );

      expect(data.annotationType).toEqual(AnnotationType.WIDGET);

      expect(data.fieldName).toEqual(""foo"");

    it(""should construct the field name when there are ancestors"", async function () {
",237
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function createAnnotation() {
    try {
        const data = await AnnotationFactory.create();
        expect(data.annotationType).toEqual(AnnotationType.WIDGET);
        expect(data.fieldName).toEqual(""foo.bar.baz"");
    } catch (err) {
        done.fail(err);
    } finally {
        done();
    }
}","      const { data } = await AnnotationFactory.create(

      );

      expect(data.annotationType).toEqual(AnnotationType.WIDGET);

      expect(data.fieldName).toEqual(""foo.bar.baz"");

      async function () {
",130
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function test() {
  try {
    const { data } = await AnnotationFactory.create();

    expect(data.annotationType).toEqual(AnnotationType.WIDGET);

    expect(data.fieldName).toEqual(""foo.bar"");

    done();
  } catch (error) {
    done.fail();
  }
}","        const { data } = await AnnotationFactory.create(

        );

        expect(data.annotationType).toEqual(AnnotationType.WIDGET);

        expect(data.fieldName).toEqual(""foo.bar"");
",101
f4237d3a09ced37f67d4859b12d5fb60bc986548,"it(""should handle unknown text alignment, maximum length and flags"", async () => {
    const data = await AnnotationFactory.create();

    expect(data.annotationType).toEqual(AnnotationType.WIDGET);
    expect(data.textAlignment).toEqual(null);
    expect(data.maxLen).toEqual(null);
    expect(data.readOnly).toEqual(false);
    expect(data.hidden).toEqual(false);
    expect(data.multiLine).toEqual(false);
    expect(data.comb).toEqual(false);
    expect(data.defaultFieldValue).toEqual(""foo"");
});

it(""should not set invalid text alignment, maximum length and flags"", async () => {
    try {
        const data = await AnnotationFactory.create();
        // do something with the data
    } catch (error) {
        // handle any errors that may occur
    }
});","    it(""should handle unknown text alignment, maximum length and flags"", async function () {

      const { data } = await AnnotationFactory.create(

      );

      expect(data.annotationType).toEqual(AnnotationType.WIDGET);

      expect(data.textAlignment).toEqual(null);

      expect(data.maxLen).toEqual(null);

      expect(data.readOnly).toEqual(false);

      expect(data.hidden).toEqual(false);

      expect(data.multiLine).toEqual(false);

      expect(data.comb).toEqual(false);

      expect(data.defaultFieldValue).toEqual(""foo"");

    });



    it(""should not set invalid text alignment, maximum length and flags"", async function () {
",238
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function testCreate() {
  try {
    const data = await AnnotationFactory.create();
    expect(data.annotationType).toEqual(AnnotationType.WIDGET);
    expect(data.textAlignment).toEqual(null);
    expect(data.maxLen).toEqual(null);
    expect(data.readOnly).toEqual(false);
    expect(data.hidden).toEqual(false);
    expect(data.multiLine).toEqual(false);
    expect(data.comb).toEqual(false);
    done();
  } catch (error) {
    done.fail();
  }
}","      const { data } = await AnnotationFactory.create(

      );

      expect(data.annotationType).toEqual(AnnotationType.WIDGET);

      expect(data.textAlignment).toEqual(null);

      expect(data.maxLen).toEqual(null);

      expect(data.readOnly).toEqual(false);

      expect(data.hidden).toEqual(false);

      expect(data.multiLine).toEqual(false);

      expect(data.comb).toEqual(false);

    it(""should set valid text alignment, maximum length and flags"", async function () {
",140
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async () => {
try {
const annotation = await AnnotationFactory.create();
expect(annotation.data.annotationType).toEqual(AnnotationType.WIDGET);
expect(annotation.data.textAlignment).toEqual(1);
expect(annotation.data.maxLen).toEqual(20);
expect(annotation.data.readOnly).toEqual(true);
expect(annotation.data.hidden).toEqual(false);
expect(annotation.data.multiLine).toEqual(true);
done();
} catch (error) {
done.fail();
}
};

it(""should reject comb fields without a maximum length"", async () => {
try {
const annotation = await AnnotationFactory.create();
expect(annotation.data.comb).toEqual(false);
done();
} catch (error) {
done.fail();
}
});

it(""should accept comb fields with a maximum length"", async () => {
try {
const annotation = await AnnotationFactory.create();
expect(annotation.data.comb).toEqual(true);
done();
} catch (error) {
done.fail();
}
});

it(""should only accept comb fields when the flags are valid"", async () => {
try {
const annotation = await AnnotationFactory.create();
expect(annotation.data.comb).toEqual(true);
done();
} catch (error) {
done.fail();
}
});","      const { data } = await AnnotationFactory.create(

      );

      expect(data.annotationType).toEqual(AnnotationType.WIDGET);

      expect(data.textAlignment).toEqual(1);

      expect(data.maxLen).toEqual(20);

      expect(data.readOnly).toEqual(true);

      expect(data.hidden).toEqual(false);

      expect(data.multiLine).toEqual(true);

    it(""should reject comb fields without a maximum length"", async function () {

      const { data } = await AnnotationFactory.create(

      );

      expect(data.annotationType).toEqual(AnnotationType.WIDGET);

      expect(data.comb).toEqual(false);

    it(""should accept comb fields with a maximum length"", async function () {

      const { data } = await AnnotationFactory.create(

      );

      expect(data.annotationType).toEqual(AnnotationType.WIDGET);

      expect(data.comb).toEqual(true);

    it(""should only accept comb fields when the flags are valid"", async function () {
",537
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function(){
    try{
        const response = await fetch('https://api.example.com');
        return response;
    } catch(error){
        throw error;
    }
}","      await promise;

    it(""should render regular text for printing"", async function () {
",133
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function create() {
  try {
    const annotation = await AnnotationFactory.create();
    const annotationStorage = new Map();
    annotationStorage.set(annotation.data.id, { value: ""test\\print"" });
    const appearance = await annotation._getAppearance(partialEvaluator, task, annotationStorage);
    expect(appearance).toEqual(""/Tx BMC q BT /Helv 5 Tf 1 0 0 1 0 0 Tm 2.00 2.00 Td (test\\\\print) Tj ET Q EMC"");
    done();
  } catch (err) {
    done.fail(err);
  }
}","      const annotation = await AnnotationFactory.create(

      );

      const annotationStorage = new Map();

      annotationStorage.set(annotation.data.id, { value: ""test\\print"" });



      const appearance = await annotation._getAppearance(

        partialEvaluator,

        task,

        annotationStorage

      );

      expect(appearance).toEqual(

        ""/Tx BMC q BT /Helv 5 Tf 1 0 0 1 0 0 Tm"" +

          "" 2.00 2.00 Td (test\\\\print) Tj ET Q EMC""

      );

    });



    it(""should render regular text in Japanese for printing"", async function () {
",197
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function () {
  try {
    const annotation = await AnnotationFactory.create();
    const annotationStorage = new Map();
    annotationStorage.set(annotation.data.id, { value: ""こんにちは世界の"" });
    const appearance = await annotation._getAppearance(partialEvaluator, task, annotationStorage);
    expect(appearance).toEqual(""/Tx BMC q BT /Goth 5 Tf 1 0 0 1 0 0 Tm 2.00 2.00 Td (こんにちは世界の) Tj ET Q EMC"");
    done();
  } catch(error) {
    done.fail(error);
  }
});","      const annotation = await AnnotationFactory.create(

      );

      const annotationStorage = new Map();

      annotationStorage.set(annotation.data.id, {

        value: ""こんにちは世界の"",

      });

      const appearance = await annotation._getAppearance(

        partialEvaluator,

        task,

        annotationStorage

      );

      const utf16String =

        ""\x30\x53\x30\x93\x30\x6b\x30\x61\x30\x6f\x4e\x16\x75\x4c\x30\x6e"";

      expect(appearance).toEqual(

        ""/Tx BMC q BT /Goth 5 Tf 1 0 0 1 0 0 Tm"" +

          ` 2.00 2.00 Td (${utf16String}) Tj ET Q EMC`

      );

    });



    it(""should render regular text for printing using normal appearance"", async function () {
",336
f4237d3a09ced37f67d4859b12d5fb60bc986548,"AnnotationFactory.create(

    )

      .then(annotation => {

        const annotationStorage = new Map();



        return annotation.getOperatorList(

          partialEvaluator,

          task,

          false,

          annotationStorage

        );

      })

      .then(opList => {

        expect(opList.argsArray.length).toEqual(3);

        expect(opList.fnArray).toEqual([

          OPS.beginAnnotation,

          OPS.setFillRGBColor,

          OPS.endAnnotation,

        ]);

        expect(opList.argsArray[1]).toEqual(

          new Uint8ClampedArray([26, 51, 76])

        );

        done();

      })

      .catch(done.fail);","      const annotation = await AnnotationFactory.create(

      );

      const annotationStorage = new Map();



      const operatorList = await annotation.getOperatorList(

        partialEvaluator,

        task,

        false,

        annotationStorage

      );

      expect(operatorList.argsArray.length).toEqual(3);

      expect(operatorList.fnArray).toEqual([

        OPS.beginAnnotation,

        OPS.setFillRGBColor,

        OPS.endAnnotation,

      ]);

      expect(operatorList.argsArray[1]).toEqual(

        new Uint8ClampedArray([26, 51, 76])

      );

    it(""should render auto-sized text for printing"", async function () {
",214
f4237d3a09ced37f67d4859b12d5fb60bc986548,"`async` function test(done) {

    try {

      const annotation = await AnnotationFactory.create();

      const partialEvaluator = new PDFJS.PartialEvaluator(
        new PDFJS.PDFDocument({
          pdfManager: new PDFJS.PDFManager(),
        }),
        null,
        null
      );

      const annotationStorage = new Map();

      annotationStorage.set(annotation.data.id, { value: ""test (print)"" });

      const appearance = await annotation._getAppearance(
        partialEvaluator,
        task,
        annotationStorage
      );

      expect(appearance).toEqual(
        ""/Tx BMC q BT /Helv 8 Tf 0 g 1 0 0 1 0 0 Tm"" +
          "" 2.00 2.00 Td (test \\(print\\)) Tj ET Q EMC""
      );

      done();
    } catch (error) {
      done.fail(error);
    }
  }","      const annotation = await AnnotationFactory.create(

      );

      const annotationStorage = new Map();

      annotationStorage.set(annotation.data.id, { value: ""test (print)"" });



      const appearance = await annotation._getAppearance(

        partialEvaluator,

        task,

        annotationStorage

      );

      expect(appearance).toEqual(

        ""/Tx BMC q BT /Helv 8 Tf 0 g 1 0 0 1 0 0 Tm"" +

          "" 2.00 2.00 Td (test \\(print\\)) Tj ET Q EMC""

      );

    });



    it(""should render auto-sized text in Japanese for printing"", async function () {
",305
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function createAnnotation() {

  try {

    const annotation = await AnnotationFactory.create();

    const annotationStorage = new Map();

    annotationStorage.set(annotation.data.id, { value: ""こんにちは世界の"" });

    const appearance = await annotation._getAppearance(partialEvaluator, task, annotationStorage);

    const utf16String = ""\x30\x53\x30\x93\x30\x6b\x30\x61\x30\x6f\x4e\x16\x75\x4c\x30\x6e"";

    expect(appearance).toEqual(""/Tx BMC q BT /Goth 8 Tf 0 g 1 0 0 1 0 0 Tm"" + ` 2.00 2.00 Td (${utf16String}) Tj ET Q EMC`);

    done();

  } catch (error) {

    done.fail(error);

  }

}","      const annotation = await AnnotationFactory.create(

      );

      const annotationStorage = new Map();

      annotationStorage.set(annotation.data.id, {

        value: ""こんにちは世界の"",

      });



      const appearance = await annotation._getAppearance(

        partialEvaluator,

        task,

        annotationStorage

      );

      const utf16String =

        ""\x30\x53\x30\x93\x30\x6b\x30\x61\x30\x6f\x4e\x16\x75\x4c\x30\x6e"";

      expect(appearance).toEqual(

        ""/Tx BMC q BT /Goth 8 Tf 0 g 1 0 0 1 0 0 Tm"" +

          ` 2.00 2.00 Td (${utf16String}) Tj ET Q EMC`

      );

    });

    it(""should not render a password for printing"", async function () {
",218
f4237d3a09ced37f67d4859b12d5fb60bc986548,"AnnotationFactory.create()
    .then(async annotation => {
      const annotationStorage = new Map();
      annotationStorage.set(annotation.data.id, { value: ""mypassword"" });
      const appearance = await annotation._getAppearance(partialEvaluator, task, annotationStorage);
      expect(appearance).toEqual(null);
      done();
    }, done.fail);
  });
  
  it(""should render multiline text for printing"", async function() {
    try {
      const appearance = await new Map().set(annotation.data.id, { value: ""mypassword"" });
      expect(appearance).toEqual(null);
      done();
    } catch (e) {
      console.error(e);
    }
  });
}","      const annotation = await AnnotationFactory.create(

      );

      const annotationStorage = new Map();

      annotationStorage.set(annotation.data.id, { value: ""mypassword"" });



      const appearance = await annotation._getAppearance(

        partialEvaluator,

        task,

        annotationStorage

      );

      expect(appearance).toEqual(null);

    });



    it(""should render multiline text for printing"", async function () {
",335
f4237d3a09ced37f67d4859b12d5fb60bc986548,"AnnotationFactory.create()
    .then(annotation => {
      const annotationStorage = new Map();
      annotationStorage.set(annotation.data.id, {
        value: ""a aa aaa aaaa aaaaa aaaaaa pneumonoultramicroscopicsilicovolcanoconiosis"",
      });
      return annotation._getAppearance(partialEvaluator, task, annotationStorage);
    })
    .then(appearance => {
      expect(appearance).toEqual(
        ""/Tx BMC q BT /Helv 5 Tf 1 0 0 1 0 10 Tm 2.00 -5.00 Td (a aa aaa ) Tj\n"" +
          ""0.00 -5.00 Td (aaaa aaaaa ) Tj\n"" +
          ""0.00 -5.00 Td (aaaaaa ) Tj\n"" +
          ""0.00 -5.00 Td (pneumonoultr) Tj\n"" +
          ""0.00 -5.00 Td (amicroscopi) Tj\n"" +
          ""0.00 -5.00 Td (csilicovolca) Tj\n"" +
          ""0.00 -5.00 Td (noconiosis) Tj ET Q EMC""
      );
      done();
    })
    .catch(done.fail);
});","      const annotation = await AnnotationFactory.create(

      );

      const annotationStorage = new Map();

      annotationStorage.set(annotation.data.id, {

        value:

          ""a aa aaa aaaa aaaaa aaaaaa "" +

          ""pneumonoultramicroscopicsilicovolcanoconiosis"",

      });

      const appearance = await annotation._getAppearance(

        partialEvaluator,

        task,

        annotationStorage

      );

      expect(appearance).toEqual(

        ""/Tx BMC q BT /Helv 5 Tf 1 0 0 1 0 10 Tm "" +

          ""2.00 -5.00 Td (a aa aaa ) Tj\n"" +

          ""0.00 -5.00 Td (aaaa aaaaa ) Tj\n"" +

          ""0.00 -5.00 Td (aaaaaa ) Tj\n"" +

          ""0.00 -5.00 Td (pneumonoultr) Tj\n"" +

          ""0.00 -5.00 Td (amicroscopi) Tj\n"" +

          ""0.00 -5.00 Td (csilicovolca) Tj\n"" +

          ""0.00 -5.00 Td (noconiosis) Tj ET Q EMC""

      );

    });



    it(""should render multiline text in Japanese for printing"", async function () {
",262
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function test() {
  try {
    const annotation = await AnnotationFactory.create();
    const annotationStorage = new Map();
    annotationStorage.set(annotation.data.id, { value: ""こんにちは世界の"" });
    const appearance = await annotation._getAppearance(partialEvaluator, task, annotationStorage);
    expect(appearance).toEqual(""/Tx BMC q BT /Goth 5 Tf 1 0 0 1 0 10 Tm 2.00 -5.00 Td (\x30\x53\x30\x93\x30\x6b\x30\x61\x30\x6f) Tj\n0.00 -5.00 Td (\x4e\x16\x75\x4c\x30\x6e) Tj ET Q EMC"");
    done();
  } catch (error) {
    done.fail(error);
  }
}","      const annotation = await AnnotationFactory.create(

      );

      const annotationStorage = new Map();

      annotationStorage.set(annotation.data.id, {

        value: ""こんにちは世界の"",

      });

      const appearance = await annotation._getAppearance(

        partialEvaluator,

        task,

        annotationStorage

      );

      expect(appearance).toEqual(

        ""/Tx BMC q BT /Goth 5 Tf 1 0 0 1 0 10 Tm "" +

          ""2.00 -5.00 Td (\x30\x53\x30\x93\x30\x6b\x30\x61\x30\x6f) Tj\n"" +

          ""0.00 -5.00 Td (\x4e\x16\x75\x4c\x30\x6e) Tj ET Q EMC""

      );

    });



    it(""should render multiline text with various EOL for printing"", async function () {
",233
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function createAnnotation(partialEvaluator, task, annotationStorage) {
  const annotation = await AnnotationFactory.create();
  const value = `Lorem ipsum dolor sit amet, consectetur adipiscing elit.\rAliquam vitae felis ac lectus bibendum ultricies quis non diam.\nMorbi id porttitor quam, a iaculis dui.\r\nPellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas.\n\r\n\rNulla consectetur, ligula in tincidunt placerat, velit augue consectetur orci, sed mattis libero nunc ut massa.\rEtiam facilisis tempus interdum.`;
  annotationStorage.set(annotation.data.id, { value });
  return await annotation._getAppearance(partialEvaluator, task, annotationStorage);
}

async function renderCombForPrinting() {
  const done = {};
  try {
    const expectedAppearance = `...`; // define the expected appearance here
    const partialEvaluator = await getPartialEvaluator();
    const task = await getTask();
    const annotationStorage = new Map();
    const appearance = await createAnnotation(partialEvaluator, task, annotationStorage);
    expect(appearance).toEqual(expectedAppearance);
    done();
  } catch (error) {
    done.fail(error);
  }
}","      const annotation = await AnnotationFactory.create(

      );

      const annotationStorage = new Map();

      annotationStorage.set(annotation.data.id, {

        value:

          ""Lorem ipsum dolor sit amet, consectetur adipiscing elit.\r"" +

          ""Aliquam vitae felis ac lectus bibendum ultricies quis non diam.\n"" +

          ""Morbi id porttitor quam, a iaculis dui.\r\n"" +

          ""Pellentesque habitant morbi tristique senectus et "" +

          ""netus et malesuada fames ac turpis egestas.\n\r\n\r"" +

          ""Nulla consectetur, ligula in tincidunt placerat, "" +

          ""velit augue consectetur orci, sed mattis libero nunc ut massa.\r"" +

          ""Etiam facilisis tempus interdum."",

      });

      const appearance = await annotation._getAppearance(

        partialEvaluator,

        task,

        annotationStorage

      );

      expect(appearance).toEqual(expectedAppearance);

    it(""should render comb for printing"", async function () {
",670
f4237d3a09ced37f67d4859b12d5fb60bc986548,"test(""should render comb with Japanese text for printing"", async () => {
  const annotationStorage = new Map();
  try {
    const annotation = await AnnotationFactory.create();
    annotationStorage.set(annotation.data.id, { value: ""aa(aa)a\\"" });
    const appearance = await annotation._getAppearance(partialEvaluator, task, annotationStorage);
    expect(appearance).toEqual(
      ""/Tx BMC q BT /Helv 5 Tf 1 0 0 1 2 2 Tm"" +
        "" (a) Tj 8.00 0 Td (a) Tj 8.00 0 Td (\\() Tj"" +
        "" 8.00 0 Td (a) Tj 8.00 0 Td (a) Tj"" +
        "" 8.00 0 Td (\\)) Tj 8.00 0 Td (a) Tj"" +
        "" 8.00 0 Td (\\\\) Tj ET Q EMC""
    );
  } catch (error) {
    done.fail(error);
  } finally {
    done();
  }
});","      const annotation = await AnnotationFactory.create(

      );

      const annotationStorage = new Map();

      annotationStorage.set(annotation.data.id, { value: ""aa(aa)a\\"" });



      const appearance = await annotation._getAppearance(

        partialEvaluator,

        task,

        annotationStorage

      );

      expect(appearance).toEqual(

        ""/Tx BMC q BT /Helv 5 Tf 1 0 0 1 2 2 Tm"" +

          "" (a) Tj 8.00 0 Td (a) Tj 8.00 0 Td (\\() Tj"" +

          "" 8.00 0 Td (a) Tj 8.00 0 Td (a) Tj"" +

          "" 8.00 0 Td (\\)) Tj 8.00 0 Td (a) Tj"" +

          "" 8.00 0 Td (\\\\) Tj ET Q EMC""

      );

    });



    it(""should render comb with Japanese text for printing"", async function () {
",258
f4237d3a09ced37f67d4859b12d5fb60bc986548,"const createAnnotation = async () => {
    const annotation = await AnnotationFactory.create();
    const annotationStorage = new Map();
    annotationStorage.set(annotation.data.id, { value: ""こんにちは世界の"" });
    return await annotation._getAppearance(partialEvaluator, task, annotationStorage);
};

const testSaveText = async () => {
    try {
        const appearance = await createAnnotation();
        expect(appearance).toEqual(""/Tx BMC q BT /Goth 5 Tf 1 0 0 1 2 2 Tm (\u3053) Tj 8.00 0 Td (\u3093) Tj 8.00 0 Td (\u306b) Tj 8.00 0 Td (\u3061) Tj 8.00 0 Td (\u306f) Tj 8.00 0 Td (\x4e\x16) Tj 8.00 0 Td (\u754c) Tj 8.00 0 Td (\u306e) Tj ET Q EMC"");
        done();
    } catch (error) {
        done.fail(error);
    }
};","      const annotation = await AnnotationFactory.create(

      );

      const annotationStorage = new Map();

      annotationStorage.set(annotation.data.id, {

        value: ""こんにちは世界の"",

      });

      const appearance = await annotation._getAppearance(

        partialEvaluator,

        task,

        annotationStorage

      );

      expect(appearance).toEqual(

        ""/Tx BMC q BT /Goth 5 Tf 1 0 0 1 2 2 Tm"" +

          "" (\x30\x53) Tj 8.00 0 Td (\x30\x93) Tj 8.00 0 Td (\x30\x6b) Tj"" +

          "" 8.00 0 Td (\x30\x61) Tj 8.00 0 Td (\x30\x6f) Tj"" +

          "" 8.00 0 Td (\x4e\x16) Tj 8.00 0 Td (\x75\x4c) Tj"" +

          "" 8.00 0 Td (\x30\x6e) Tj ET Q EMC""

      );

    });



    it(""should save text"", async function () {
",348
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function createAnnotation() {

  const annotation = await AnnotationFactory.create();

  const annotationStorage = new Map();

  annotationStorage.set(annotation.data.id, { value: ""hello world"" });

  return await annotation.save(partialEvaluator, task, annotationStorage);

}

async function verifyData() {

  const data = await createAnnotation();

  expect(data.length).toEqual(2);

  const [oldData, newData] = data;

  expect(oldData.ref).toEqual(Ref.get(123, 0));

  expect(newData.ref).toEqual(Ref.get(2, 0));

  oldData.data = oldData.data.replace(/\(D:[0-9]+\)/, ""(date)"");

  expect(oldData.data).toEqual(

    ""123 0 obj\n"" +

      ""<< /Type /Annot /Subtype /Widget /FT /Tx /DA (/Helv 5 Tf) /DR "" +

      ""<< /Font << /Helv 314 0 R>>>> /Rect [0 0 32 10] "" +

      ""/V (hello world) /AP << /N 2 0 R>> /M (date)>>\nendobj\n""

  );

  expect(newData.data).toEqual(

    ""2 0 obj\n<< /Length 77 /Subtype /Form /Resources "" +

      ""<< /Font << /Helv 314 0 R>>>> /BBox [0 0 32 10]>> stream\n"" +

      ""/Tx BMC q BT /Helv 5 Tf 1 0 0 1 0 0 Tm 2.00 2.00 Td (hello world) Tj "" +

      ""ET Q EMC\nendstream\nendobj\n""

  );

  done();

}

verifyData();","      const annotation = await AnnotationFactory.create(

      );

      const annotationStorage = new Map();

      annotationStorage.set(annotation.data.id, { value: ""hello world"" });



      const data = await annotation.save(

        partialEvaluator,

        task,

        annotationStorage

      );

      expect(data.length).toEqual(2);

      const [oldData, newData] = data;

      expect(oldData.ref).toEqual(Ref.get(123, 0));

      expect(newData.ref).toEqual(Ref.get(2, 0));



      oldData.data = oldData.data.replace(/\(D:[0-9]+\)/, ""(date)"");

      expect(oldData.data).toEqual(

        ""123 0 obj\n"" +

          ""<< /Type /Annot /Subtype /Widget /FT /Tx /DA (/Helv 5 Tf) /DR "" +

          ""<< /Font << /Helv 314 0 R>>>> /Rect [0 0 32 10] "" +

          ""/V (hello world) /AP << /N 2 0 R>> /M (date)>>\nendobj\n""

      );

      expect(newData.data).toEqual(

        ""2 0 obj\n<< /Length 77 /Subtype /Form /Resources "" +

          ""<< /Font << /Helv 314 0 R>>>> /BBox [0 0 32 10]>> stream\n"" +

          ""/Tx BMC q BT /Helv 5 Tf 1 0 0 1 0 0 Tm 2.00 2.00 Td (hello world) Tj "" +

          ""ET Q EMC\nendstream\nendobj\n""

      );

    });



    it(""should get field object for usage in JS sandbox"", async function () {
",305
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function createAnnotation() {
  const annotation = await AnnotationFactory.create();
  const object = await annotation.getFieldObject();
  const actions = object.actions;
  expect(actions[""Mouse Enter""]).toEqual([""hello()""]);
  expect(actions[""Mouse Exit""]).toEqual([
    ""world()"",
    ""olleh()"",
    ""foo()"",
    ""dlrow()"",
    ""oof()"",
  ]);
  expect(actions[""Mouse Down""]).toEqual([""bar()""]);
}","      const annotation = await AnnotationFactory.create(

      );

      const fieldObject = await annotation.getFieldObject();

      const actions = fieldObject.actions;

      expect(actions[""Mouse Enter""]).toEqual([""hello()""]);

      expect(actions[""Mouse Exit""]).toEqual([

        ""world()"",

        ""olleh()"",

        ""foo()"",

        ""dlrow()"",

        ""oof()"",

      ]);

      expect(actions[""Mouse Down""]).toEqual([""bar()""]);

    it(""should save Japanese text"", async function () {
",165
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function createAnnotation(annotationFactory) {
  try {
    const annotation = await annotationFactory.create();
    const annotationStorage = new Map();
    annotationStorage.set(annotation.data.id, { value: ""こんにちは世界の"" });
    const data = await annotation.save(partialEvaluator, task, annotationStorage);
    const utf16String = ""\x30\x53\x30\x93\x30\x6b\x30\x61\x30\x6f\x4e\x16\x75\x4c\x30\x6e"";
    expect(data.length).toEqual(2);
    const [oldData, newData] = data;
    expect(oldData.ref).toEqual(Ref.get(123, 0));
    expect(newData.ref).toEqual(Ref.get(2, 0));
    oldData.data = oldData.data.replace(/\(D:[0-9]+\)/, ""(date)"");
    expect(oldData.data).toEqual(""123 0 obj\n<< /Type /Annot /Subtype /Widget /FT /Tx /DA (/Goth 5 Tf) /DR << /Font << /Helv 314 0 R /Goth 159 0 R>>>> /Rect [0 0 32 10] `/V (\xfe\xff${utf16String}) /AP << /N 2 0 R>> /M (date)>>\nendobj\n"");
    expect(newData.data).toEqual(""2 0 obj\n<< /Length 82 /Subtype /Form /Resources << /Font << /Helv 314 0 R /Goth 159 0 R>>>> /BBox [0 0 32 10]>> stream\n/Tx BMC q BT /Goth 5 Tf 1 0 0 1 0 0 Tm 2.00 2.00 Td (${utf16String}) Tj ET Q EMC\nendstream\nendobj\n"");
    return data;
  } catch (error) {
    console.error(error);
  }
}","      const annotation = await AnnotationFactory.create(

      );

      const annotationStorage = new Map();

      annotationStorage.set(annotation.data.id, {

        value: ""こんにちは世界の"",

      });

      const data = await annotation.save(

        partialEvaluator,

        task,

        annotationStorage

      );

      const utf16String =

        ""\x30\x53\x30\x93\x30\x6b\x30\x61\x30\x6f\x4e\x16\x75\x4c\x30\x6e"";

      expect(data.length).toEqual(2);

      const [oldData, newData] = data;

      expect(oldData.ref).toEqual(Ref.get(123, 0));

      expect(newData.ref).toEqual(Ref.get(2, 0));



      oldData.data = oldData.data.replace(/\(D:[0-9]+\)/, ""(date)"");

      expect(oldData.data).toEqual(

        ""123 0 obj\n"" +

          ""<< /Type /Annot /Subtype /Widget /FT /Tx /DA (/Goth 5 Tf) /DR "" +

          ""<< /Font << /Helv 314 0 R /Goth 159 0 R>>>> /Rect [0 0 32 10] "" +

          `/V (\xfe\xff${utf16String}) /AP << /N 2 0 R>> /M (date)>>\nendobj\n`

      );

      expect(newData.data).toEqual(

        ""2 0 obj\n<< /Length 82 /Subtype /Form /Resources "" +

          ""<< /Font << /Helv 314 0 R /Goth 159 0 R>>>> /BBox [0 0 32 10]>> stream\n"" +

          `/Tx BMC q BT /Goth 5 Tf 1 0 0 1 0 0 Tm 2.00 2.00 Td (${utf16String}) Tj ` +

          ""ET Q EMC\nendstream\nendobj\n""

      );
",349
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function testCreate() {
  try {
    const data = await AnnotationFactory.create();
    expect(data.annotationType).toEqual(AnnotationType.WIDGET);
    expect(data.checkBox).toEqual(true);
    expect(data.fieldValue).toEqual(""1"");
    expect(data.defaultFieldValue).toEqual(""2"");
    expect(data.radioButton).toEqual(false);
    expect(data.exportValue).toEqual(""Checked"");
  } catch (error) {
    done();
  }
}","      const { data } = await AnnotationFactory.create(

      );

      expect(data.annotationType).toEqual(AnnotationType.WIDGET);

      expect(data.checkBox).toEqual(true);

      expect(data.fieldValue).toEqual(""1"");

      expect(data.defaultFieldValue).toEqual(""2"");

      expect(data.radioButton).toEqual(false);

      expect(data.exportValue).toEqual(""Checked"");

    it(""should handle checkboxes without export value"", async function () {
",127
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function testCreateAnnotation() {
    try {
        const data = await AnnotationFactory.create();
        expect(data.annotationType).toEqual(AnnotationType.WIDGET);
        expect(data.checkBox).toEqual(true);
        expect(data.fieldValue).toEqual(""1"");
        expect(data.defaultFieldValue).toEqual(""2"");
        expect(data.radioButton).toEqual(false);
    } catch (error) {
        done.fail();
    }
}","      const { data } = await AnnotationFactory.create(

      );

      expect(data.annotationType).toEqual(AnnotationType.WIDGET);

      expect(data.checkBox).toEqual(true);

      expect(data.fieldValue).toEqual(""1"");

      expect(data.defaultFieldValue).toEqual(""2"");

      expect(data.radioButton).toEqual(false);

    it(""should handle checkboxes without /Off appearance"", async function () {
",137
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function createAnnotation() {
    try {
        const { data } = await AnnotationFactory.create();
        expect(data.annotationType).toEqual(AnnotationType.WIDGET);
        expect(data.checkBox).toEqual(true);
        expect(data.fieldValue).toEqual(""1"");
        expect(data.defaultFieldValue).toEqual(""2"");
        expect(data.radioButton).toEqual(false);
        expect(data.exportValue).toEqual(""Checked"");
        done();
    } catch (error) {
        done.fail(error);
    }
}

it(""should render checkbox with fallback font for printing"", function () {
    createAnnotation();
});","      const { data } = await AnnotationFactory.create(

      );

      expect(data.annotationType).toEqual(AnnotationType.WIDGET);

      expect(data.checkBox).toEqual(true);

      expect(data.fieldValue).toEqual(""1"");

      expect(data.defaultFieldValue).toEqual(""2"");

      expect(data.radioButton).toEqual(false);

      expect(data.exportValue).toEqual(""Checked"");

    it(""should render checkbox with fallback font for printing"", async function () {
",169
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function createAnnotation() {
    const annotation = await AnnotationFactory.create();

    const annotationStorage = new Map();
    annotationStorage.set(annotation.data.id, { value: true });

    const opList = await annotation.getOperatorList(partialEvaluator, task, false, annotationStorage);

    expect(opList.argsArray.length).toEqual(5);
    expect(opList.fnArray).toEqual([OPS.beginAnnotation, OPS.dependency, OPS.setFont, OPS.showText, OPS.endAnnotation]);
    expect(opList.argsArray[3][0][0].fontChar).toEqual(""✔"");

    return opList;
  }

  it(""should render checkboxes for printing"", async () => {
    try {
      const opList = await createAnnotation();
      expect(opList.argsArray.length).toEqual(5);
      expect(opList.fnArray).toEqual([OPS.beginAnnotation, OPS.dependency, OPS.setFont, OPS.showText, OPS.endAnnotation]);
      expect(opList.argsArray[3][0][0].fontChar).toEqual(""✔"");
    } catch (error) {
      done.fail(error);
    }
  });","      const annotation = await AnnotationFactory.create(

      );

      const annotationStorage = new Map();

      annotationStorage.set(annotation.data.id, { value: true });



      const operatorList = await annotation.getOperatorList(

        partialEvaluator,

        task,

        false,

        annotationStorage

      );

      expect(operatorList.argsArray.length).toEqual(5);

      expect(operatorList.fnArray).toEqual([

        OPS.beginAnnotation,

        OPS.dependency,

        OPS.setFont,

        OPS.showText,

        OPS.endAnnotation,

      ]);

      expect(operatorList.argsArray[3][0][0].fontChar).toEqual(""✔"");

    it(""should render checkboxes for printing"", async function () {
",549
f4237d3a09ced37f67d4859b12d5fb60bc986548,"AnnotationFactory.create()
     .then(annotation => {
       const annotationStorage = new Map();
       annotationStorage.set(annotation.data.id, { value: true });
       return Promise.all([annotation, annotation.getOperatorList(partialEvaluator, task, false, annotationStorage)]);
     })
     .then(([annotation, opList]) => {
       expect(opList.argsArray.length).toEqual(3);
       expect(opList.fnArray).toEqual([OPS.beginAnnotation, OPS.setFillRGBColor, OPS.endAnnotation]);
       expect(opList.argsArray[1]).toEqual(new Uint8ClampedArray([26, 51, 76]));
       return annotation;
     })
     .then(annotation => {
       const annotationStorage = new Map();
       annotationStorage.set(annotation.data.id, { value: false });
       return annotation.getOperatorList(partialEvaluator, task, false, annotationStorage);
     })
     .then(opList => {
       expect(opList.argsArray.length).toEqual(3);
       expect(opList.fnArray).toEqual([OPS.beginAnnotation, OPS.setFillRGBColor, OPS.endAnnotation]);
       expect(opList.argsArray[1]).toEqual(new Uint8ClampedArray([76, 51, 26]));
       done();
     });
   it(""should render checkboxes for printing two times"", function (done) {","      const annotation = await AnnotationFactory.create(

      );

      const annotationStorage = new Map();

      annotationStorage.set(annotation.data.id, { value: true });



      let operatorList = await annotation.getOperatorList(

        partialEvaluator,

        task,

        false,

        annotationStorage

      );

      expect(operatorList.argsArray.length).toEqual(3);

      expect(operatorList.fnArray).toEqual([

        OPS.beginAnnotation,

        OPS.setFillRGBColor,

        OPS.endAnnotation,

      ]);

      expect(operatorList.argsArray[1]).toEqual(

        new Uint8ClampedArray([26, 51, 76])

      );



      annotationStorage.set(annotation.data.id, { value: false });



      operatorList = await annotation.getOperatorList(

        partialEvaluator,

        task,

        false,

        annotationStorage

      );

      expect(operatorList.argsArray.length).toEqual(3);

      expect(operatorList.fnArray).toEqual([

        OPS.beginAnnotation,

        OPS.setFillRGBColor,

        OPS.endAnnotation,

      ]);

      expect(operatorList.argsArray[1]).toEqual(

        new Uint8ClampedArray([76, 51, 26])

      );

    it(""should render checkboxes for printing twice"", async function () {
",497
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function createAnnotation() {
  try {
    const annotation = await AnnotationFactory.create();
    const annotationStorage = new Map();
    annotationStorage.set(annotation.data.id, { value: true });
    const opList = await annotation.getOperatorList(partialEvaluator, task, false, annotationStorage);
    expect(opList.argsArray.length).toEqual(3);
    expect(opList.fnArray).toEqual([OPS.beginAnnotation, OPS.setFillRGBColor, OPS.endAnnotation]);
    expect(opList.argsArray[1]).toEqual(new Uint8ClampedArray([26, 51, 76]));
    return annotation;
  } catch (error) {
    done.fail(error);
  }
}

async function renderCheckboxesForPrinting() {
  try {
    const annotation = await createAnnotation();
    const opList = await annotation.getOperatorList(partialEvaluator, task, false, annotationStorage);
    expect(opList.argsArray.length).toEqual(3);
    expect(opList.fnArray).toEqual([OPS.beginAnnotation, OPS.setFillRGBColor, OPS.endAnnotation]);
    expect(opList.argsArray[1]).toEqual(new Uint8ClampedArray([26, 51, 76]));
    done();
  } catch (error) {
    done.fail(error);
  }
}","      const annotation = await AnnotationFactory.create(

      );

      const annotationStorage = new Map();



      for (let i = 0; i < 2; i++) {

        annotationStorage.set(annotation.data.id, { value: true });



        const operatorList = await annotation.getOperatorList(

          partialEvaluator,

          task,

          false,

          annotationStorage

        );

        expect(operatorList.argsArray.length).toEqual(3);

        expect(operatorList.fnArray).toEqual([

          OPS.beginAnnotation,

          OPS.setFillRGBColor,

          OPS.endAnnotation,

        ]);

        expect(operatorList.argsArray[1]).toEqual(

          new Uint8ClampedArray([26, 51, 76])

        );

      }

    it(""should render checkboxes for printing using normal appearance"", async function () {
",738
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function testSaveCheckboxes() {
  try {
    const annotation = await AnnotationFactory.create();
    const annotationStorage = new Map();
    const opList = await annotation.getOperatorList(partialEvaluator, task, false, annotationStorage);
    expect(opList.argsArray.length).toEqual(3);
    expect(opList.fnArray).toEqual([OPS.beginAnnotation, OPS.setFillRGBColor, OPS.endAnnotation]);
    expect(opList.argsArray[1]).toEqual(new Uint8ClampedArray([26, 51, 76]));
    done();
  } catch (error) {
    done.fail(error);
  }
}","      const annotation = await AnnotationFactory.create(

      );

      const annotationStorage = new Map();



      const operatorList = await annotation.getOperatorList(

        partialEvaluator,

        task,

        false,

        annotationStorage

      );

      expect(operatorList.argsArray.length).toEqual(3);

      expect(operatorList.fnArray).toEqual([

        OPS.beginAnnotation,

        OPS.setFillRGBColor,

        OPS.endAnnotation,

      ]);

      expect(operatorList.argsArray[1]).toEqual(

        new Uint8ClampedArray([26, 51, 76])

      );

    it(""should save checkboxes"", async function () {
",237
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function test() {
  try {
    const annotation = await AnnotationFactory.create();
    const annotationStorage = new Map();
    annotationStorage.set(annotation.data.id, { value: true });
    const [annotation, oldData] = await Promise.all([annotation, annotation.save(partialEvaluator, task, annotationStorage)]);
    expect(oldData.ref).toEqual(Ref.get(123, 0));
    expect(oldData.data).toEqual(""123 0 obj\n"" + ""<< /Type /Annot /Subtype /Widget /FT /Btn "" + ""/AP << /N << /Checked 314 0 R /Off 271 0 R>>>> "" + ""/V /Checked /AS /Checked /M (date)>>\nendobj\n"");
    return annotation;
  } catch (error) {
    done.fail();
  }
}","      const annotation = await AnnotationFactory.create(

      );

      const annotationStorage = new Map();

      annotationStorage.set(annotation.data.id, { value: true });



      const [oldData] = await annotation.save(

        partialEvaluator,

        task,

        annotationStorage

      );

      oldData.data = oldData.data.replace(/\(D:[0-9]+\)/, ""(date)"");

      expect(oldData.ref).toEqual(Ref.get(123, 0));

      expect(oldData.data).toEqual(

        ""123 0 obj\n"" +

          ""<< /Type /Annot /Subtype /Widget /FT /Btn "" +

          ""/AP << /N << /Checked 314 0 R /Off 271 0 R>>>> "" +

          ""/V /Checked /AS /Checked /M (date)>>\nendobj\n""

      );



      annotationStorage.set(annotation.data.id, { value: false });



      const data = await annotation.save(

        partialEvaluator,

        task,

        annotationStorage

      );

      expect(data).toEqual(null);

    });



    it(""should handle radio buttons with a field value"", async function () {
",512
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function test() {
  try {
    const data = await AnnotationFactory.create();
    expect(data.annotationType).toEqual(AnnotationType.WIDGET);
    expect(data.checkBox).toEqual(false);
    expect(data.radioButton).toEqual(true);
    expect(data.fieldValue).toEqual(""1"");
    expect(data.buttonValue).toEqual(""2"");
  } catch (error) {
    done.fail();
  }
}","      const { data } = await AnnotationFactory.create(

      );

      expect(data.annotationType).toEqual(AnnotationType.WIDGET);

      expect(data.checkBox).toEqual(false);

      expect(data.radioButton).toEqual(true);

      expect(data.fieldValue).toEqual(""1"");

      expect(data.buttonValue).toEqual(""2"");

    it(""should handle radio buttons with a field value that's not an ASCII string"", async function () {
",144
f4237d3a09ced37f67d4859b12d5fb60bc986548,"AnnotationFactory.create( )
    .then ( ({ data }) => {
      expect (data.annotationType).toEqual(AnnotationType.WIDGET);
      expect (data.checkBox).toEqual(false);
      expect (data.radioButton).toEqual(true);
      expect (data.fieldValue).toEqual(""‚I=‚ðﬁàŠe3"");
      expect (data.buttonValue).toEqual(""‚I=‚ðﬁàŠe3"");
      done();
    }, done.fail);
  } );
}","      const { data } = await AnnotationFactory.create(

      );

      expect(data.annotationType).toEqual(AnnotationType.WIDGET);

      expect(data.checkBox).toEqual(false);

      expect(data.radioButton).toEqual(true);

      expect(data.fieldValue).toEqual(""‚I=‚ðﬁàŠe3"");

      expect(data.buttonValue).toEqual(""‚I=‚ðﬁàŠe3"");

    it(""should handle radio buttons without a field value"", async function () {
",124
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function test() {
    try {
        const data = await AnnotationFactory.create();

        expect(data.annotationType).toEqual(AnnotationType.WIDGET);

        expect(data.checkBox).toEqual(false);

        expect(data.radioButton).toEqual(true);

        expect(data.fieldValue).toEqual(null);

        expect(data.buttonValue).toEqual(""2"");

        done();
    } catch (error) {
        done.fail(error);
    }
}

it(""should render radio buttons for printing"", function (done) {
    test().then(() => {
        done();
    }).catch((error) => {
        done.fail(error);
    });
});","      const { data } = await AnnotationFactory.create(

      );

      expect(data.annotationType).toEqual(AnnotationType.WIDGET);

      expect(data.checkBox).toEqual(false);

      expect(data.radioButton).toEqual(true);

      expect(data.fieldValue).toEqual(null);

      expect(data.buttonValue).toEqual(""2"");

    it(""should render radio buttons for printing"", async function () {
",236
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function test() {
  const annotationFactory = new AnnotationFactory();
  const task = null;
  const partialEvaluator = null;
  try {
    const annotation = await annotationFactory.create();
    const annotationStorage = new Map();
    annotationStorage.set(annotation.data.id, { value: true });
    const [annotation1, opList] = await Promise.all([
      annotation,
      annotation.getOperatorList(partialEvaluator, task, false, annotationStorage),
    ]);
    expect(opList.argsArray.length).toEqual(3);
    expect(opList.fnArray).toEqual([OPS.beginAnnotation, OPS.setFillRGBColor, OPS.endAnnotation]);
    expect(opList.argsArray[1]).toEqual(new Uint8ClampedArray([26, 51, 76]));
    const annotationStorage = new Map();
    annotationStorage.set(annotation.data.id, { value: false });
    const opList1 = await annotation.getOperatorList(partialEvaluator, task, false, annotationStorage);
    expect(opList1.argsArray.length).toEqual(3);
    expect(opList1.fnArray).toEqual([OPS.beginAnnotation, OPS.setFillRGBColor, OPS.endAnnotation]);
    expect(opList1.argsArray[1]).toEqual(new Uint8ClampedArray([76, 51, 26]));
    done();
  } catch (error) {
    done.fail();
  }
}","      const annotation = await AnnotationFactory.create(

      );

      const annotationStorage = new Map();

      annotationStorage.set(annotation.data.id, { value: true });



      let operatorList = await annotation.getOperatorList(

        partialEvaluator,

        task,

        false,

        annotationStorage

      );

      expect(operatorList.argsArray.length).toEqual(3);

      expect(operatorList.fnArray).toEqual([

        OPS.beginAnnotation,

        OPS.setFillRGBColor,

        OPS.endAnnotation,

      ]);

      expect(operatorList.argsArray[1]).toEqual(

        new Uint8ClampedArray([26, 51, 76])

      );



      annotationStorage.set(annotation.data.id, { value: false });



      operatorList = await annotation.getOperatorList(

        partialEvaluator,

        task,

        false,

        annotationStorage

      );

      expect(operatorList.argsArray.length).toEqual(3);

      expect(operatorList.fnArray).toEqual([

        OPS.beginAnnotation,

        OPS.setFillRGBColor,

        OPS.endAnnotation,

      ]);

      expect(operatorList.argsArray[1]).toEqual(

        new Uint8ClampedArray([76, 51, 26])

      );

    it(""should render radio buttons for printing using normal appearance"", async function () {
",574
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function createAnnotation() {
    try {
      const annotation = await AnnotationFactory.create();
      const annotationStorage = new Map();
      const opList = await annotation.getOperatorList(
        partialEvaluator,
        task,
        false,
        annotationStorage,
      );
      expect(opList.argsArray.length).toEqual(3);
      expect(opList.fnArray).toEqual([OPS.beginAnnotation, OPS.setFillRGBColor, OPS.endAnnotation]);
      expect(opList.argsArray[1]).toEqual(new Uint8ClampedArray([76, 51, 26]));
      done();
    } catch (error) {
      done.fail(error);
    }
  }

  it(""should save radio buttons"", function () {
    createAnnotation();
  });","      const annotation = await AnnotationFactory.create(

      );

      const annotationStorage = new Map();



      const operatorList = await annotation.getOperatorList(

        partialEvaluator,

        task,

        false,

        annotationStorage

      );

      expect(operatorList.argsArray.length).toEqual(3);

      expect(operatorList.fnArray).toEqual([

        OPS.beginAnnotation,

        OPS.setFillRGBColor,

        OPS.endAnnotation,

      ]);

      expect(operatorList.argsArray[1]).toEqual(

        new Uint8ClampedArray([76, 51, 26])

      );

    it(""should save radio buttons"", async function () {
",231
f4237d3a09ced37f67d4859b12d5fb60bc986548,"it('should save radio buttons without a field value', function(done) {
  AnnotationFactory.create()
    .then(annotation => {
      const annotationStorage = new Map();
      annotationStorage.set(annotation.data.id, { value: false });
      return annotation.save(partialEvaluator, task, annotationStorage);
    })
    .then(data => {
      expect(data).toEqual(null);
      done();
    }, done.fail);
});","      const annotation = await AnnotationFactory.create(

      );

      const annotationStorage = new Map();

      annotationStorage.set(annotation.data.id, { value: true });



      let data = await annotation.save(

        partialEvaluator,

        task,

        annotationStorage

      );

      expect(data.length).toEqual(2);

      const [radioData, parentData] = data;

      radioData.data = radioData.data.replace(/\(D:[0-9]+\)/, ""(date)"");

      expect(radioData.ref).toEqual(Ref.get(123, 0));

      expect(radioData.data).toEqual(

        ""123 0 obj\n"" +

          ""<< /Type /Annot /Subtype /Widget /FT /Btn /Ff 32768 "" +

          ""/AP << /N << /Checked 314 0 R /Off 271 0 R>>>> "" +

          ""/Parent 456 0 R /AS /Checked /M (date)>>\nendobj\n""

      );

      expect(parentData.ref).toEqual(Ref.get(456, 0));

      expect(parentData.data).toEqual(

        ""456 0 obj\n<< /V /Checked /Kids [123 0 R]>>\nendobj\n""

      );



      annotationStorage.set(annotation.data.id, { value: false });



      data = await annotation.save(partialEvaluator, task, annotationStorage);

      expect(data).toEqual(null);

    });



    it(""should save radio buttons without a field value"", async function () {
",956
f4237d3a09ced37f67d4859b12d5fb60bc986548,"it(""should save nothing"", function(done) {
  AnnotationFactory.create()
    .then(annotation => {
      const annotationStorage = new Map();
      return annotation.save(partialEvaluator, task, annotationStorage);
    })
    .then(data => {
      expect(data).toEqual(null);
      done();
    })
    .catch(done.fail);
});","      const annotation = await AnnotationFactory.create(

      );

      const annotationStorage = new Map();

      annotationStorage.set(annotation.data.id, { value: true });



      const data = await annotation.save(

        partialEvaluator,

        task,

        annotationStorage

      );

      expect(data.length).toEqual(2);

      const [radioData, parentData] = data;

      radioData.data = radioData.data.replace(/\(D:[0-9]+\)/, ""(date)"");

      expect(radioData.ref).toEqual(Ref.get(123, 0));

      expect(radioData.data).toEqual(

        ""123 0 obj\n"" +

          ""<< /Type /Annot /Subtype /Widget /FT /Btn /Ff 32768 "" +

          ""/AP << /N << /Checked 314 0 R /Off 271 0 R>>>> "" +

          ""/Parent 456 0 R /AS /Checked /M (date)>>\nendobj\n""

      );

      expect(parentData.ref).toEqual(Ref.get(456, 0));

      expect(parentData.data).toEqual(

        ""456 0 obj\n<< /Kids [123 0 R] /V /Checked>>\nendobj\n""

      );

    });



    it(""should save nothing"", async function () {

      const annotation = await AnnotationFactory.create(

      );

      const annotationStorage = new Map();

      const data = await annotation.save(

        partialEvaluator,

        task,

        annotationStorage

      );

      expect(data).toEqual(null);

    it(""should handle push buttons"", async function () {
",1110
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function createAnnotation() {

    let data = await AnnotationFactory.create();

    expect(data.annotationType).toEqual(AnnotationType.WIDGET);

    expect(data.pushButton).toEqual(true);

    expect(data.actions.Action).toEqual([""do_something();""]);

    done();

}","      const { data } = await AnnotationFactory.create(

      );

      expect(data.annotationType).toEqual(AnnotationType.WIDGET);

      expect(data.pushButton).toEqual(true);

      expect(data.actions.Action).toEqual([""do_something();""]);

    it(""should handle push buttons that act as a tooltip only"", async function () {
",128
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function createAnnotation() {
  const data = await AnnotationFactory.create();
  expect(data.annotationType).toEqual(AnnotationType.WIDGET);
  expect(data.pushButton).toEqual(true);
  expect(data.alternativeText).toEqual(""An alternative text"");
}

it(""should handle URL in A dict in push buttons"", async function (done) {
  try {
    await createAnnotation();
    done();
  } catch (error) {
    done.fail(error);
  }
});","      const { data } = await AnnotationFactory.create(

      );

      expect(data.annotationType).toEqual(AnnotationType.WIDGET);

      expect(data.pushButton).toEqual(true);

      expect(data.alternativeText).toEqual(""An alternative text"");

    it(""should handle URL in A dict in push buttons"", async function () {
",168
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function testCreate() {
    
      let data = await AnnotationFactory.create();

      expect(data.url).toEqual(""https://developer.mozilla.org/en-US/"");

      done();

    } catch (error) {
        console.log('Error: ' + error);
    }

  it(""should handle URL in AA dict in push buttons"", async function () {

    // D stands for MouseDown

    try {
        
      await testCreate();

    } catch (error) {
        console.log('Error: ' + error);
    }
});","      const { data } = await AnnotationFactory.create(

      );

      expect(data.url).toEqual(""https://developer.mozilla.org/en-US/"");

    it(""should handle URL in AA dict in push buttons"", async function () {

      // D stands for MouseDown.
",247
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function test() {
  const data = await AnnotationFactory.create();

  try {
    expect(data.url).toEqual(""https://developer.mozilla.org/en-US/"");
  } catch (error) {
    done.fail(error);
  }

  done();
}","      const { data } = await AnnotationFactory.create(

      );

      expect(data.url).toEqual(""https://developer.mozilla.org/en-US/"");
",93
f4237d3a09ced37f67d4859b12d5fb60bc986548,"it(""should handle missing option arrays"", async () => {

  const data = await AnnotationFactory.create();

  expect(data.annotationType).toEqual(AnnotationType.WIDGET);

  expect(data.options).toEqual([]);

});

it(""should handle option arrays with array elements"", async () => {

  const data = await AnnotationFactory.create();

  expect(data.annotationType).toEqual(AnnotationType.WIDGET);

  expect(data.options).toEqual([[]]);

});","    it(""should handle missing option arrays"", async function () {

      const { data } = await AnnotationFactory.create(

      );

      expect(data.annotationType).toEqual(AnnotationType.WIDGET);

      expect(data.options).toEqual([]);

    it(""should handle option arrays with array elements"", async function () {
",197
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function testCase(done) {
      try{
        const data = await AnnotationFactory.create();

        expect(data.annotationType).toEqual(AnnotationType.WIDGET);

        expect(data.options).toEqual(expected);

        done();

    } catch (e) {
         done.fail(e);
      }
}

it(""should handle option arrays with string elements"", testCase);","      const { data } = await AnnotationFactory.create(

      );

      expect(data.annotationType).toEqual(AnnotationType.WIDGET);

      expect(data.options).toEqual(expected);

    it(""should handle option arrays with string elements"", async function () {
",144
f4237d3a09ced37f67d4859b12d5fb60bc986548,"it(""should handle inherited option arrays (issue 8094)"", async function () {
      try {
        const data = await AnnotationFactory.create();
        expect(data.annotationType).toEqual(AnnotationType.WIDGET);
        expect(data.options).toEqual(expected);
      } catch (error) {
        done.fail(error);
      }
    });","      const { data } = await AnnotationFactory.create(

      );

      expect(data.annotationType).toEqual(AnnotationType.WIDGET);

      expect(data.options).toEqual(expected);

    it(""should handle inherited option arrays (issue 8094)"", async function () {
",170
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function create() {
try {
    const data = await AnnotationFactory.create();
    expect(data.annotationType).toEqual(AnnotationType.WIDGET);
    expect(data.options).toEqual(expected);
} catch (err) {
    done.fail(err);
} finally {
    done();
}}

it(""should decode form values"", async function () {
try {
    const data = await AnnotationFactory.create();
    expect(data.annotationType).toEqual(AnnotationType.WIDGET);
    expect(data.options).toEqual(expected);
} catch (err) {
    done.fail(err);
} finally {
    done();
}});","      const { data } = await AnnotationFactory.create(

      );

      expect(data.annotationType).toEqual(AnnotationType.WIDGET);

      expect(data.options).toEqual(expected);

    it(""should decode form values"", async function () {
",336
f4237d3a09ced37f67d4859b12d5fb60bc986548,"// Wrapped in async function to enable the use of await
async function createAnnotation() {
  try {
    const annotation = await AnnotationFactory.create();
    expect(annotation.data.annotationType).toEqual(AnnotationType.WIDGET);
    expect(annotation.data.fieldValue).toEqual([decodedString]);
    expect(annotation.data.defaultFieldValue).toEqual(""foo"");
    expect(annotation.data.options).toEqual([{ exportValue: decodedString, displayValue: decodedString }]);
  } catch (error) {
    done.fail();
  }
}","      const { data } = await AnnotationFactory.create(

      );

      expect(data.annotationType).toEqual(AnnotationType.WIDGET);

      expect(data.fieldValue).toEqual([decodedString]);

      expect(data.defaultFieldValue).toEqual(""foo"");

      expect(data.options).toEqual([

        { exportValue: decodedString, displayValue: decodedString },

      ]);

    it(""should convert the field value to an array"", async function () {
",244
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function createAnnotation() {
  try {
    const data = await AnnotationFactory.create();
    expect(data.annotationType).toEqual(AnnotationType.WIDGET);
    expect(data.readOnly).toEqual(false);
    expect(data.hidden).toEqual(false);
    expect(data.combo).toEqual(false);
    expect(data.multiSelect).toEqual(false);
  } catch (error) {
    done.fail(error);
  } finally {
    done();
  }
}","      await promise;

    it(""should handle unknown flags"", async function () {

      const { data } = await AnnotationFactory.create(

      );

      expect(data.annotationType).toEqual(AnnotationType.WIDGET);

      expect(data.readOnly).toEqual(false);

      expect(data.hidden).toEqual(false);

      expect(data.combo).toEqual(false);

      expect(data.multiSelect).toEqual(false);

    it(""should not set invalid flags"", async function () {
",149
f4237d3a09ced37f67d4859b12d5fb60bc986548,"it(""should set valid flags"", async () => {
  const data = await AnnotationFactory.create();
  expect(data.annotationType).toEqual(AnnotationType.WIDGET);
  expect(data.readOnly).toEqual(false);
  expect(data.hidden).toEqual(false);
  expect(data.combo).toEqual(false);
  expect(data.multiSelect).toEqual(false);
});","      const { data } = await AnnotationFactory.create(

      );

      expect(data.annotationType).toEqual(AnnotationType.WIDGET);

      expect(data.readOnly).toEqual(false);

      expect(data.hidden).toEqual(false);

      expect(data.combo).toEqual(false);

      expect(data.multiSelect).toEqual(false);

    it(""should set valid flags"", async function () {
",129
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function testAnnotationFactoryCreate() {
  try {
    const data = await AnnotationFactory.create();
    expect(data.annotationType).toEqual(AnnotationType.WIDGET);
    expect(data.readOnly).toEqual(true);
    expect(data.hidden).toEqual(false);
    expect(data.combo).toEqual(true);
    expect(data.multiSelect).toEqual(true);
  } catch (error) {
    done.fail();
  } finally {
    done();
  }
}","      const { data } = await AnnotationFactory.create(

      );

      expect(data.annotationType).toEqual(AnnotationType.WIDGET);

      expect(data.readOnly).toEqual(true);

      expect(data.hidden).toEqual(false);

      expect(data.combo).toEqual(true);

      expect(data.multiSelect).toEqual(true);

    it(""should render choice for printing"", async function () {
",135
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function test() {
  const annotationFactory = new AnnotationFactory();
  try {
    const annotation = await annotationFactory.create();
    const annotationStorage = new Map();
    annotationStorage.set(annotation.data.id, { value: ""a value"" });
    const appearance = await annotation._getAppearance(partialEvaluator, task, annotationStorage);
    expect(appearance).toEqual(""/Tx BMC q BT /Helv 5 Tf 1 0 0 1 0 0 Tm 2.00 2.00 Td (a value) Tj ET Q EMC"");
    done();
  } catch (error) {
    done.fail(error);
  }
}","      const annotation = await AnnotationFactory.create(

      );

      const annotationStorage = new Map();

      annotationStorage.set(annotation.data.id, { value: ""a value"" });



      const appearance = await annotation._getAppearance(

        partialEvaluator,

        task,

        annotationStorage

      );

      expect(appearance).toEqual(

        ""/Tx BMC q BT /Helv 5 Tf 1 0 0 1 0 0 Tm"" +

          "" 2.00 2.00 Td (a value) Tj ET Q EMC""

      );

    });



    it(""should save choice"", async function () {
",221
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function test() {
  const annotation = await AnnotationFactory.create();
  const annotationStorage = new Map();
  annotationStorage.set(annotation.data.id, { value: ""C"" });
  const data = await annotation.save(partialEvaluator, task, annotationStorage);
  expect(data.length).toEqual(2);
  const [oldData, newData] = data;
  expect(oldData.ref).toEqual(Ref.get(123, 0));
  expect(newData.ref).toEqual(Ref.get(1, 0));
  oldData.data = oldData.data.replace(/\(D:[0-9]+\)/, ""(date)"");
  expect(oldData.data).toEqual(
    ""123 0 obj\n"" +
      ""<< /Type /Annot /Subtype /Widget /FT /Ch /DA (/Helv 5 Tf) /DR "" +
      ""<< /Font << /Helv 314 0 R>>>> "" +
      ""/Rect [0 0 32 10] /Opt [(A) (B) (C)] /V (C) "" +
      ""/AP << /N 1 0 R>> /M (date)>>\nendobj\n""
  );
  expect(newData.data).toEqual(
    ""1 0 obj\n"" +
      ""<< /Length 67 /Subtype /Form /Resources << /Font << /Helv 314 0 R>>>> "" +
      ""/BBox [0 0 32 10]>> stream\n"" +
      ""/Tx BMC q BT /Helv 5 Tf 1 0 0 1 0 0 Tm 2.00 2.00 Td (C) Tj ET Q EMC\n"" +
      ""endstream\nendobj\n""
  );
  done();
}","      const annotation = await AnnotationFactory.create(

      );

      const annotationStorage = new Map();

      annotationStorage.set(annotation.data.id, { value: ""C"" });



      const data = await annotation.save(

        partialEvaluator,

        task,

        annotationStorage

      );

      expect(data.length).toEqual(2);

      const [oldData, newData] = data;

      expect(oldData.ref).toEqual(Ref.get(123, 0));

      expect(newData.ref).toEqual(Ref.get(1, 0));



      oldData.data = oldData.data.replace(/\(D:[0-9]+\)/, ""(date)"");

      expect(oldData.data).toEqual(

        ""123 0 obj\n"" +

          ""<< /Type /Annot /Subtype /Widget /FT /Ch /DA (/Helv 5 Tf) /DR "" +

          ""<< /Font << /Helv 314 0 R>>>> "" +

          ""/Rect [0 0 32 10] /Opt [(A) (B) (C)] /V (C) "" +

          ""/AP << /N 1 0 R>> /M (date)>>\nendobj\n""

      );

      expect(newData.data).toEqual(

        ""1 0 obj\n"" +

          ""<< /Length 67 /Subtype /Form /Resources << /Font << /Helv 314 0 R>>>> "" +

          ""/BBox [0 0 32 10]>> stream\n"" +

          ""/Tx BMC q BT /Helv 5 Tf 1 0 0 1 0 0 Tm 2.00 2.00 Td (C) Tj ET Q EMC\n"" +

          ""endstream\nendobj\n""

      );

    it(""should set the line coordinates"", async function () {
",234
f4237d3a09ced37f67d4859b12d5fb60bc986548,"AnnotationFactory.create().then(({ data }) => {
  expect(data.annotationType).toEqual(AnnotationType.LINE);
  expect(data.lineCoordinates).toEqual([1, 2, 3, 4]);
  done();
}, done.fail);","      const { data } = await AnnotationFactory.create(

      );

      expect(data.annotationType).toEqual(AnnotationType.LINE);

      expect(data.lineCoordinates).toEqual([1, 2, 3, 4]);

    it(""should correctly parse a file attachment"", async function () {
",114
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function testCreate() {
  try {
    const data = await AnnotationFactory.create();
    expect(data.annotationType).toEqual(AnnotationType.FILEATTACHMENT);
    expect(data.file.filename).toEqual(""Test.txt"");
    expect(data.file.content).toEqual(stringToBytes(""Test attachment""));
  } catch (error) {
    done.fail();
  } finally {
    done();
  }
}","      const { data } = await AnnotationFactory.create(

      );

      expect(data.annotationType).toEqual(AnnotationType.FILEATTACHMENT);

      expect(data.file.filename).toEqual(""Test.txt"");

      expect(data.file.content).toEqual(stringToBytes(""Test attachment""));

    it(""should inherit properties from its parent"", async function () {
",117
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function testCreate() {
    try {
        const annotation = await AnnotationFactory.create();
        expect(annotation.data.annotationType).toEqual(AnnotationType.POPUP);
        expect(annotation.data.modificationDate).toEqual(""D:20190423"");
        expect(annotation.data.color).toEqual(new Uint8ClampedArray([0, 0, 255]));
        done();
    } catch (error) {
        done.fail(error);
    }
}

async function testHandleMissingParentProperties() {
    try {
        const annotation = await AnnotationFactory.create();
        expect(annotation.data.missingParentProperty).toBeUndefined();
    } catch (error) {
        done.fail(error);
    }
}","      const { data } = await AnnotationFactory.create(

      );

      expect(data.annotationType).toEqual(AnnotationType.POPUP);

      expect(data.modificationDate).toEqual(""D:20190423"");

      expect(data.color).toEqual(new Uint8ClampedArray([0, 0, 255]));

    it(""should handle missing parent properties"", async function () {
",372
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function create(data, viewable) {
  try {
    const annotationType = await data.annotationType;
    const modificationDate = await data.modificationDate;
    const color = await data.color;
  } catch (error) {
    done();
  }
}","      const { data } = await AnnotationFactory.create(

      );

      expect(data.annotationType).toEqual(AnnotationType.POPUP);

      expect(data.modificationDate).toEqual(null);

      expect(data.color).toEqual(null);

      async function () {
",174
f4237d3a09ced37f67d4859b12d5fb60bc986548,"`async function test() {
    const data = await AnnotationFactory.create();
    expect(data.annotationType).toEqual(AnnotationType.POPUP);
    // We should not modify the `annotationFlags` returned through
    // e.g., the API.
    expect(data.annotationFlags).toEqual(25);
    // The popup should inherit the `viewable` property of the parent.
    const viewable = data.viewable;
    return { data, viewable };
  }
  try {
    const result = await test();
    expect(result.data.annotationType).toEqual(AnnotationType.POPUP);
    // We should not modify the `annotationFlags` returned through
    // e.g., the API.
    expect(result.data.annotationFlags).toEqual(25);
    // The popup should inherit the `viewable` property of the parent.
    expect(result.viewable).toEqual(true);
  } catch (error) {
    done.fail(error);
  }`","        const { data, viewable } = await AnnotationFactory.create(

        );

        expect(data.annotationType).toEqual(AnnotationType.POPUP);

        // We should not modify the `annotationFlags` returned through

        // e.g., the API.

        expect(data.annotationFlags).toEqual(25);

        // The popup should inherit the `viewable` property of the parent.

        expect(viewable).toEqual(true);

      async function () {
",471
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function testCreateAnnotationFactory() {
  try {
    const data = await AnnotationFactory.create();
    expect(data.title).toEqual(""Correct Title"");
    expect(data.contents).toEqual(""Correct Text"");
    expect(data.modificationDate).toEqual(""D:20190423"");
    expect(data.color).toEqual(new Uint8ClampedArray([0, 0, 255]));
    done();
  } catch (error) {
    done.fail();
  }
}

it(""should handle a single ink list"", async function () {
  await testCreateAnnotationFactory();
});","        const { data } = await AnnotationFactory.create(

        );

        expect(data.title).toEqual(""Correct Title"");

        expect(data.contents).toEqual(""Correct Text"");

        expect(data.modificationDate).toEqual(""D:20190423"");

        expect(data.color).toEqual(new Uint8ClampedArray([0, 0, 255]));

    it(""should handle a single ink list"", async function () {
",178
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function testCreate() {
  try {
    const annotation = await AnnotationFactory.create();
    expect(annotation.data.annotationType).toEqual(AnnotationType.INK);
    expect(annotation.data.inkLists.length).toEqual(1);
    expect(annotation.data.inkLists[0]).toEqual([
      { x: 1, y: 1 },
      { x: 1, y: 2 },
      { x: 2, y: 2 },
      { x: 3, y: 3 },
    ]);
  } catch (error) {
    done.fail(error);
  } finally {
    done();
  }
}","      const { data } = await AnnotationFactory.create(

      );

      expect(data.annotationType).toEqual(AnnotationType.INK);

      expect(data.inkLists.length).toEqual(1);

      expect(data.inkLists[0]).toEqual([

        { x: 1, y: 1 },

        { x: 1, y: 2 },

        { x: 2, y: 2 },

        { x: 3, y: 3 },

      ]);

    it(""should handle multiple ink lists"", async function () {
",166
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function testCreate() {
      const data = await AnnotationFactory.create();

      expect(data.annotationType).toEqual(AnnotationType.INK);

      expect(data.inkLists.length).toEqual(2);

      expect(data.inkLists[0]).toEqual([
        { x: 1, y: 1 },
        { x: 1, y: 2 }
      ]);

      expect(data.inkLists[1]).toEqual([
        { x: 3, y: 3 },
        { x: 4, y: 5 }
      ]);

      done();
    }","      const { data } = await AnnotationFactory.create(

      );

      expect(data.annotationType).toEqual(AnnotationType.INK);

      expect(data.inkLists.length).toEqual(2);

      expect(data.inkLists[0]).toEqual([

        { x: 1, y: 1 },

        { x: 1, y: 2 },

      ]);

      expect(data.inkLists[1]).toEqual([

        { x: 3, y: 3 },

        { x: 4, y: 5 },

      ]);

    it(""should set quadpoints to null if not defined"", async function () {
",111
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async () => {
     try {
         const annotation = await AnnotationFactory.create();
         expect(annotation.data.annotationType).toEqual(AnnotationType.HIGHLIGHT);
         expect(annotation.data.quadPoints).toEqual(null);
         done();
     } catch (error) {
         done.fail(error);
     }
 }, (done) => {
     it(""should set quadpoints if defined"", function () {
         try {
             const annotation = await AnnotationFactory.create();
             expect(annotation.data.quadPoints).toEqual(null);
             done();
         } catch (error) {
             done.fail(error);
         }
     });
 });","      const { data } = await AnnotationFactory.create(

      );

      expect(data.annotationType).toEqual(AnnotationType.HIGHLIGHT);

      expect(data.quadPoints).toEqual(null);

    it(""should set quadpoints if defined"", async function () {
",406
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function testCreateAnnotation() {
    try {
      const data = await AnnotationFactory.create();
      expect(data.annotationType).toEqual(AnnotationType.HIGHLIGHT);
      expect(data.quadPoints).toEqual([
        [
          { x: 10, y: 20 },
          { x: 20, y: 20 },
          { x: 10, y: 10 },
          { x: 20, y: 10 },
        ],
      ]);
    } catch (error) {
      done.fail(error);
    } finally {
      done();
    }
  }
  
  it(""should set quadpoints to null when empty"", async function () {
    await testCreateAnnotation();
  });","      const { data } = await AnnotationFactory.create(

      );

      expect(data.annotationType).toEqual(AnnotationType.HIGHLIGHT);

      expect(data.quadPoints).toEqual([

        [

          { x: 10, y: 20 },

          { x: 20, y: 20 },

          { x: 10, y: 10 },

          { x: 20, y: 10 },

        ],

      ]);

    it(""should set quadpoints to null when empty"", async function () {
",195
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function test() {
  try {
    const data = await AnnotationFactory.create();
    expect(data.annotationType).toEqual(AnnotationType.HIGHLIGHT);
    expect(data.quadPoints).toEqual(null);
    done();
  } catch (error) {
    done.fail(error);
  }
}","      const { data } = await AnnotationFactory.create(

      );

      expect(data.annotationType).toEqual(AnnotationType.HIGHLIGHT);

      expect(data.quadPoints).toEqual(null);

    it(""should set quadpoints to null if not defined"", async function () {
",107
f4237d3a09ced37f67d4859b12d5fb60bc986548,"const data = await AnnotationFactory.create();

expect(data.annotationType).toEqual(AnnotationType.UNDERLINE);

if (data.quadPoints !== null) {
  expect(data.quadPoints).toEqual(null);
}
done();","      const { data } = await AnnotationFactory.create(

      );

      expect(data.annotationType).toEqual(AnnotationType.UNDERLINE);

      expect(data.quadPoints).toEqual(null);

    it(""should set quadpoints if defined"", async function () {
",93
f4237d3a09ced37f67d4859b12d5fb60bc986548,"const annotation = await AnnotationFactory.create();

expect(annotation.data.annotationType).toEqual(AnnotationType.UNDERLINE);

expect(annotation.data.quadPoints).toEqual([
  [
    { x: 10, y: 20 },
    { x: 20, y: 20 },
    { x: 10, y: 10 },
    { x: 20, y: 10 },
  ],
]);","      const { data } = await AnnotationFactory.create(

      );

      expect(data.annotationType).toEqual(AnnotationType.UNDERLINE);

      expect(data.quadPoints).toEqual([

        [

          { x: 10, y: 20 },

          { x: 20, y: 20 },

          { x: 10, y: 10 },

          { x: 20, y: 10 },

        ],

      ]);

    it(""should set quadpoints to null if not defined"", async function () {
",182
f4237d3a09ced37f67d4859b12d5fb60bc986548,"AnnotationFactory.create()

async () => {
  try {
    const { data } = await AnnotationFactory.create();
    expect(data.annotationType).toEqual(AnnotationType.SQUIGGLY);
    expect(data.quadPoints).not.toBeNull();
  } catch (e) {
    done.fail();
  } finally {
    done();
  }
}","      const { data } = await AnnotationFactory.create(

      );

      expect(data.annotationType).toEqual(AnnotationType.SQUIGGLY);

      expect(data.quadPoints).toEqual(null);

    it(""should set quadpoints if defined"", async function () {
",122
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function testAnnotation() {
  try {
    const data = await AnnotationFactory.create();
    expect(data.annotationType).toEqual(AnnotationType.SQUIGGLY);
    expect(data.quadPoints).toEqual([
      [
        { x: 10, y: 20 },
        { x: 20, y: 20 },
        { x: 10, y: 10 },
        { x: 20, y: 10 },
      ],
    ]);
    done();
  } catch (error) {
    done.fail(error);
  }
}","      const { data } = await AnnotationFactory.create(

      );

      expect(data.annotationType).toEqual(AnnotationType.SQUIGGLY);

      expect(data.quadPoints).toEqual([

        [

          { x: 10, y: 20 },

          { x: 20, y: 20 },

          { x: 10, y: 10 },

          { x: 20, y: 10 },

        ],

      ]);

    it(""should set quadpoints to null if not defined"", async function () {
",138
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function create() {
    try {
      const data = await AnnotationFactory.create();
      expect(data.annotationType).toEqual(AnnotationType.STRIKEOUT);
      expect(data.quadPoints).toEqual(null);
    } catch (error) {
      done.fail(error);
    }
  }","      const { data } = await AnnotationFactory.create(

      );

      expect(data.annotationType).toEqual(AnnotationType.STRIKEOUT);

      expect(data.quadPoints).toEqual(null);

    it(""should set quadpoints if defined"", async function () {
",101
f4237d3a09ced37f67d4859b12d5fb60bc986548,"async function testCreateAnnotation() {
  try {
    const data = await AnnotationFactory.create();

    expect(data.annotationType).toEqual(AnnotationType.STRIKEOUT);

    expect(data.quadPoints).toEqual([
      [
        { x: 10, y: 20 },
        { x: 20, y: 20 },
        { x: 10, y: 10 },
        { x: 20, y: 10 },
      ],
    ]);

    done();
  } catch (error) {
    done.fail(error);
  }
}","      const { data } = await AnnotationFactory.create(

      );

      expect(data.annotationType).toEqual(AnnotationType.STRIKEOUT);

      expect(data.quadPoints).toEqual([

        [

          { x: 10, y: 20 },

          { x: 20, y: 20 },

          { x: 10, y: 10 },

          { x: 20, y: 10 },

        ],

      ]);
",134
d42f3d0bfe76756b4ad233b7e1e03859009479b2,"async function runOperatorListCheck(evaluator, stream, resources) {
  try {
    const result = await evaluator.getOperatorList({ stream, task, resources, operatorList: new OperatorList() });
    return result;
  } catch (error) {
    throw error;
  }
}","  async function runOperatorListCheck(evaluator, stream, resources) {

    const operatorList = new OperatorList();

    await evaluator.getOperatorList({

      stream,

      task,

      resources,

      operatorList,

    });

    return operatorList;
",130
3d55b2b10eb9bc0201490184a05fc5ed209521a6,"`it(""table was truncated in the middle of functions"", async function () {

      const cMap = await CMapFactory.create({});

      const font = new Font(""font"", new Stream(font2324), {
        loadedName: ""font"",
        type: ""CIDFontType2"",
        differences: [],
        defaultEncoding: [],
        cMap,
        toUnicode: new ToUnicodeMap([]),
      });

      const output = await ttx(font.data);

      verifyTtxOutput(output);

      expect(
        /(ENDF\[ \]|SVTCA\[0\])\s*<\/assembly>\s*<\/fpgm>/.test(output)
      ).toEqual(true);
    });`","    it(""table was truncated in the middle of functions"", async function () {

      const cMap = await CMapFactory.create({

      const font = new Font(""font"", new Stream(font2324), {

        loadedName: ""font"",

        type: ""CIDFontType2"",

        differences: [],

        defaultEncoding: [],

        cMap,

        toUnicode: new ToUnicodeMap([]),

      });

      const output = await ttx(font.data);



      verifyTtxOutput(output);

      expect(

        /(ENDF\[ \]|SVTCA\[0\])\s*<\/assembly>\s*<\/fpgm>/.test(output)

      ).toEqual(true);
",26
3d55b2b10eb9bc0201490184a05fc5ed209521a6,"async function testTTX() {
  const font = new Font(""font"", new Stream(font1282), {
    loadedName: ""font"",
    type: ""CIDFontType2"",
    differences: [],
    defaultEncoding: [],
    cMap: await CMapFactory.create(),
    toUnicode: new ToUnicodeMap([]),
  });

  try {
    const output = await ttx(font.data);
    verifyTtxOutput(output);
    expect(/<OS_2>\s*<version value=""3""\/>/.test(output)).toEqual(true);
  } catch (error) {
    console.log(""Error occurred: "", error);
  } finally {
    done();
  }
}

it(""has invalid selection attributes presence"", async () => {
  await testTTX();
});","      const output = await ttx(font.data);



      verifyTtxOutput(output);

      expect(/<OS_2>\s*<version value=""3""\/>/.test(output)).toEqual(true);

    it(""has invalid selection attributes presence"", async function () {

      const cMap = await CMapFactory.create({

      const font = new Font(""font"", new Stream(font1282), {

        loadedName: ""font"",

        type: ""CIDFontType2"",

        differences: [],

        defaultEncoding: [],

        cMap,

        toUnicode: new ToUnicodeMap([]),

      });

      const output = await ttx(font.data);



      verifyTtxOutput(output);

      expect(/<OS_2>\s*<version value=""3""\/>/.test(output)).toEqual(true);
",507
3d55b2b10eb9bc0201490184a05fc5ed209521a6,"it(""has invalid version number"", async function () {
  try {
    const cMap = await CMapFactory.create({});
    const font = new Font(""font"", new Stream(font2109), {
      loadedName: ""font"",
      type: ""CIDFontType2"",
      differences: [],
      defaultEncoding: [],
      cMap,
      toUnicode: new ToUnicodeMap([]),
    });
    const output = await ttx(font.data);
    verifyTtxOutput(output);
    expect(/<post>\s*<formatType value=""3\.0""\/>/.test(output)).toEqual(true);
  } catch (error) {
    // Handle error
  }
});

it(""has invalid glyph name indexes"", async function () {
  try {
    const cMap = await CMapFactory.create({});
    const font = new Font(""font"", new Stream(font2109), {
      loadedName: ""font"",
      type: ""CIDFontType2"",
      differences: [],
      defaultEncoding: [],
      cMap,
      toUnicode: new ToUnicodeMap([]),
    });
    const output = await ttx(font.data);
    verifyTtxOutput(output);
    expect(/<post>\s*<formatType value=""3\.0""\/>/.test(output)).toEqual(true);
  } catch (error) {
    // Handle error
  }
});","    it(""has invalid version number"", async function () {

      const cMap = await CMapFactory.create({

      const font = new Font(""font"", new Stream(font2109), {

        loadedName: ""font"",

        type: ""CIDFontType2"",

        differences: [],

        defaultEncoding: [],

        cMap,

        toUnicode: new ToUnicodeMap([]),

      });

      const output = await ttx(font.data);



      verifyTtxOutput(output);

      expect(/<post>\s*<formatType value=""3\.0""\/>/.test(output)).toEqual(true);

    it(""has invalid glyph name indexes"", async function () {
",562
7b8d2495cab70336858f94b40d8815617a3cc23c,"async function ttx(data) {
    try {
        const xhr = new XMLHttpRequest();
        await xhr.open(""POST"", ""/ttx"");
        const encodedData = encodeFontData(data);
        await xhr.setRequestHeader(""Content-type"", ""text/plain"");
        await xhr.setRequestHeader(""Content-length"", encodedData.length);
        let responseText = null;
        await xhr.onreadystatechange = function getPdfOnreadystatechange(e) {
            if (xhr.readyState === 4) {
                if (xhr.status === 200) {
                    responseText = xhr.responseText;
                } else {
                    throw new Error(xhr.statusText);
                }
            }
        };
        await xhr.send(encodedData);
        return responseText;
    } catch (err) {
        console.error(err);
    }
}","async function ttx(data) {

  const response = await fetch(""/ttx"", {

    method: ""POST"",

    body: encodeFontData(data),



  if (!response.ok) {

    throw new Error(response.statusText);

  }

  return response.text();
",623
ddea90b8f6fbeca189bb81254c63f406675dd973,"async function setPDFNetworkStreamFactory(params) {
  const streamsPromise = await this.getStreams();
  const [{ PDFNetworkStream }, { PDFFetchStream }] = streamsPromise;
  if (isNodeJS()) {
    const PDFNodeStream = require('./display/node_stream').PDFNodeStream;
    return new PDFNodeStream(params);
  } else {
    if (isValidFetchUrl(params.url)) {
      if (PDFFetchStream) {
        return new PDFFetchStream(params);
      } else {
        return new PDFNetworkStream(params);
      }
    } else {
      return new PDFNetworkStream(params);
    }
  }
}","

  setPDFNetworkStreamFactory(async params => {

    const [{ PDFNetworkStream }, { PDFFetchStream }] = await streamsPromise;

    if (isValidFetchUrl(params.url)) {

      return new PDFFetchStream(params);

    }

    return new PDFNetworkStream(params);

} else if (PDFJSDev.test(""GENERIC || CHROME"")) {

  if (PDFJSDev.test(""GENERIC"") && isNodeJS) {

    const { PDFNodeStream } = require(""./display/node_stream.js"");



    const { PDFNetworkStream } = require(""./display/network.js"");

    const { PDFFetchStream } = require(""./display/fetch_stream.js"");



      if (isValidFetchUrl(params.url)) {
",404
edc38de37ac7a1ba659b59598a254c38ac1fcf33,"async function createToUnicodeMap(properties) {

    const registry = properties.cidSystemInfo.registry;

    const ordering = properties.cidSystemInfo.ordering;

    const ucs2CMapName = Name.get(registry + ""-"" + ordering + ""-UCS2"");

    try {

      const ucs2CMap = await CMapFactory.create({

        registry,

        ordering,

        ucs2CMapName,

      });

      const cMap = properties.cMap;

      const toUnicode = [];

      for (let charcode of Object.keys(cMap)) {

        if (charcode > 0xffff) {

          throw new FormatError(""Max size of CID is 65,535"");

        }

        // e) Map the CID obtained in step (a) according to the CMap

        // obtained in step (d), producing a Unicode value.

        const ucs2 = ucs2CMap.lookup(charcode);

        if (ucs2) {

          toUnicode[charcode] = String.fromCharCode(

            (ucs2.charCodeAt(0) << 8) + ucs2.charCodeAt(1)

          );

        }

      }

      return new ToUnicodeMap(toUnicode);

    } catch (err) {

      console.log(""Error creating ToUnicodeMap"", err);

    }

  }","      const { registry, ordering } = properties.cidSystemInfo;

      const ucs2CMapName = Name.get(`${registry}-${ordering}-UCS2`);

      const ucs2CMap = await CMapFactory.create({

      const toUnicode = [];

      properties.cMap.forEach(function (charcode, cid) {

        if (cid > 0xffff) {

          throw new FormatError(""Max size of CID is 65,535"");

        }

        // e) Map the CID obtained in step (a) according to the CMap

        // obtained in step (d), producing a Unicode value.

        const ucs2 = ucs2CMap.lookup(cid);

        if (ucs2) {

          toUnicode[charcode] = String.fromCharCode(

            (ucs2.charCodeAt(0) << 8) + ucs2.charCodeAt(1)

          );

        }

      });

      return new ToUnicodeMap(toUnicode);

    return new IdentityToUnicodeMap(properties.firstChar, properties.lastChar);
",345
bc8787b04939715816722769dfa309d909d0063d,"async function loadAndEnablePDFBug(enabledTabs) {
  // Load the PDF worker script
  const workerSrc = await loadScript(PDFWorker.workerSrc);

  // Load the debugger script
  const debuggerScriptPath = appConfig.debuggerScriptPath;
  try {
    await loadScript(debuggerScriptPath);
  } catch (error) {
    console.log(""Error loading the debugger script"");
    return undefined;
  }

  // Enable the PDFBug on specified tabs
  PDFBug.enable(enabledTabs);

  // Initialize the PDFBug
  PDFBug.init({ OPS }, appConfig.mainContainer);
}","    return;

  await loadScript(PDFWorker.workerSrc);

async function initPDFBug(enabledTabs) {

  const { debuggerScriptPath, mainContainer } = PDFViewerApplication.appConfig;

  await loadScript(debuggerScriptPath);

  PDFBug.init({ OPS }, mainContainer, enabledTabs);
",377
ce3f5ea2bf73ab9d4a3d86bc61576f5d14785ab0,"async destroy() {

    const transportDestroyed = !this._transport

      ? Promise.resolve()

      : this._transport.destroy();

    try{

      await transportDestroyed;

      this._transport = null;

      if (this._worker) {

        this._worker.destroy();

        this._worker = null;

      }

    }catch(err){

      console.error('Error destroying worker', err);

    }

  }","  async destroy() {

    await this._transport?.destroy();

    this._transport = null;

    if (this._worker) {

      this._worker.destroy();

      this._worker = null;

    }
",214
6cba5509f26ede9986cbc4c100b037d3347d7c91,"render(viewport, intent = ""display"") {
  
  return await Promise.all([
    
    this.pdfPage.getAnnotations({ intent }),
    
    this._hasJSActionsPromise,
    
  ]).then(([annotations, hasJSActions = false]) => {
    
    if (this._cancelled || annotations.length === 0) {
      
      return;
      
    }
    
    const parameters = {
      
      viewport: viewport.clone({ dontFlip: true }),
      
      div: this.div,
      
      annotations,
      
      page: this.pdfPage,
      
      imageResourcesPath: this.imageResourcesPath,
      
      renderForms: this.renderForms,
      
      linkService: this.linkService,
      
      downloadManager: this.downloadManager,
      
      annotationStorage: this.annotationStorage,
      
      enableScripting: this.enableScripting,
      
      hasJSActions,
      
      mouseState: this._mouseState,
      
    };
    
    if (this.div) {
      
      // If an annotationLayer already exists, refresh its children's
      
      // transformation matrices.
      
      AnnotationLayer.update(parameters);
      
    } else {
      
      // Create an annotation layer div and render the annotations
      
      // if there is at least one annotation.
      
      this.div = document.createElement(""div"");
      
      this.div.className = ""annotationLayer"";
      
      this.pageDiv.appendChild(this.div);
      
      parameters.div = this.div;
      
      AnnotationLayer.render(parameters);
      
      this.l10n.translate(this.div);
      
    }
    
  });
  
}","  async render(viewport, intent = ""display"") {

    const [annotations, hasJSActions = false, fieldObjects = null] =

      await Promise.all([

        this.pdfPage.getAnnotations({ intent }),

        this._hasJSActionsPromise,

        this._fieldObjectsPromise,

      ]);

    if (this._cancelled || annotations.length === 0) {

      return;

    }

    const parameters = {

      viewport: viewport.clone({ dontFlip: true }),

      div: this.div,

      annotations,

      page: this.pdfPage,

      imageResourcesPath: this.imageResourcesPath,

      renderForms: this.renderForms,

      linkService: this.linkService,

      downloadManager: this.downloadManager,

      annotationStorage: this.annotationStorage,

      enableScripting: this.enableScripting,

      hasJSActions,

      fieldObjects,

      mouseState: this._mouseState,

    };

    if (this.div) {

      // If an annotationLayer already exists, refresh its children's

      // transformation matrices.

      AnnotationLayer.update(parameters);

    } else {

      // Create an annotation layer div and render the annotations

      // if there is at least one annotation.

      this.div = document.createElement(""div"");

      this.div.className = ""annotationLayer"";

      this.pageDiv.appendChild(this.div);

      parameters.div = this.div;



      AnnotationLayer.render(parameters);

      this.l10n.translate(this.div);

    }
",329
37d90ec378f2ff74a9e5e150173e00517e63c4b4,"async function convertPdfToImage() {

    try {

        const pdfDocument = await loadingTask.promise;

        console.log(""# PDF document loaded."");

        const page = await pdfDocument.getPage(1);

        // Render the page on a Node canvas with 100% scale.

        const viewport = page.getViewport({ scale: 1.0 });

        const canvasFactory = new NodeCanvasFactory();

        const canvasAndContext = canvasFactory.create(viewport.width, viewport.height);

        const renderContext = {
            canvasContext: canvasAndContext.context,
            viewport,
            canvasFactory
        };

        const renderTask = await page.render(renderContext);

        // Convert the canvas to an image buffer.

        const image = await canvasAndContext.canvas.toBuffer();

        fs.writeFile(""output.png"", image, function (error) {
            if (error) {
                console.error(""Error: "" + error);
            } else {
                console.log(
                    ""Finished converting first page of PDF file to a PNG image.""
                );
            }
        });

    } catch (reason) {
        // handle error
    }
}","(async function () {

  try {

    const pdfDocument = await loadingTask.promise;

    console.log(""# PDF document loaded."");

    const page = await pdfDocument.getPage(1);

    // Render the page on a Node canvas with 100% scale.

    const viewport = page.getViewport({ scale: 1.0 });

    const canvasFactory = new NodeCanvasFactory();

    const canvasAndContext = canvasFactory.create(

      viewport.width,

      viewport.height

    );

    const renderContext = {

      canvasContext: canvasAndContext.context,

      viewport,

      canvasFactory,

    };

    const renderTask = page.render(renderContext);

    await renderTask.promise;

    // Convert the canvas to an image buffer.

    const image = canvasAndContext.canvas.toBuffer();

    fs.writeFile(""output.png"", image, function (error) {

      if (error) {

        console.error(""Error: "" + error);

      } else {

        console.log(

          ""Finished converting first page of PDF file to a PNG image.""

        );

      }

  } catch (reason) {

  }

})();
",235
fdf08ef3d26d7d1446ddb019668b6a71373163fc,"async function pageLoaded() {

loadingTask.promise.then(async (pdfDocument) => {

const page = await pdfDocument.getPage(PAGE_NUMBER);

const viewport = page.getViewport({ scale: PAGE_SCALE });

const textContent = await page.getTextContent();

// building SVG and adding that to the DOM

const svg = buildSVG(viewport, textContent);

document.getElementById(""pageContainer"").appendChild(svg);

});","async function pageLoaded() {

  const pdfDocument = await loadingTask.promise;

  const page = await pdfDocument.getPage(PAGE_NUMBER);

  const viewport = page.getViewport({ scale: PAGE_SCALE });

  const textContent = await page.getTextContent();

  // building SVG and adding that to the DOM

  const svg = buildSVG(viewport, textContent);

  document.getElementById(""pageContainer"").appendChild(svg);
",60
0643ccb68b8c12e6734eaa02c9a2b11859096188,"async function loadDocument() {
  const doc = await loadingTask.promise;
  const numPages = doc.numPages;

  console.log(""# Document Loaded"");
  console.log(""Number of Pages: "" + numPages);
  console.log();

  let lastPromise = Promise.resolve(); // will be used to chain promises
  const loadPage = async (pageNum) => {
    try {
      const page = await doc.getPage(pageNum);
      console.log(""# Page "" + pageNum);
      const viewport = page.getViewport({ scale: 1.0 });
      console.log(""Size: "" + viewport.width + ""x"" + viewport.height);
      console.log();

      const opList = await page.getOperatorList();
      const svgGfx = new pdfjsLib.SVGGraphics(page.commonObjs, page.objs);
      svgGfx.embedFonts = true;
      const svg = await svgGfx.getSVG(opList, viewport);

      await writeSvgToFile(svg, getFilePathForPage(pageNum));
      console.log(""Page: "" + pageNum);
    } catch (err) {
      console.error(""Error: "" + err);
    }
  };

  for (let i = 1; i <= numPages; i++) {
    lastPromise = await loadPage(i);
  }

  try {
    console.log(""# End of Document"");
  } catch (err) {
    console.error(""Error: "" + err);
  }
}","// Will be using async/await to load document, pages and misc data.

(async function () {

  const doc = await loadingTask.promise;

  const numPages = doc.numPages;

  console.log(""# Document Loaded"");

  console.log(`Number of Pages: ${numPages}`);

  console.log();

  for (let pageNum = 1; pageNum <= numPages; pageNum++) {

    try {

      const page = await doc.getPage(pageNum);

      console.log(`# Page ${pageNum}`);

      const viewport = page.getViewport({ scale: 1.0 });

      console.log(`Size: ${viewport.width}x${viewport.height}`);

      console.log();

      const opList = await page.getOperatorList();

      const svgGfx = new pdfjsLib.SVGGraphics(page.commonObjs, page.objs);

      svgGfx.embedFonts = true;

      const svg = await svgGfx.getSVG(opList, viewport);

      await writeSvgToFile(svg, getFilePathForPage(pageNum));

    } catch (err) {

      console.log(`Error: ${err}`);

  }

  console.log(""# End of Document"");

})();
",389
4c463c6099cea8e195203278c9be7ac656192e64,"async function loadPDF() {
const pdfDocument = await loadingTask.promise;
}","(async function () {

  const pdfDocument = await loadingTask.promise;

})();
",17
0ebac67a9fedbc655500f29285d1632a8bb09a70,"async _ensurePdfPageLoaded(pageView) {
  const pdfPage = await pageView.pdfPage;
  if (!pdfPage) {
    pdfPage = await this.pdfDocument.getPage(pageView.id);
    pageView.setPdfPage(pdfPage);
  }
  return pdfPage;
}","   * @returns {Promise<PDFPageProxy | null>}

  async #ensurePdfPageLoaded(pageView) {

      return pageView.pdfPage;

    try {

      const pdfPage = await this.pdfDocument.getPage(pageView.id);

      if (!pageView.pdfPage) {

        pageView.setPdfPage(pdfPage);

      }

      return pdfPage;

    } catch (reason) {

      console.error(""Unable to get page for page view"", reason);

      return null; // Page error -- there is nothing that can be done.
",297
0ebac67a9fedbc655500f29285d1632a8bb09a70,"async function _ensurePdfPageLoaded(thumbView) {

    try {

        const pdfPage = await thumbView.pdfPage || this.pdfDocument.getPage(thumbView.id).then((pdfPage => {

            if (!thumbView.pdfPage) {

                thumbView.setPdfPage(pdfPage);

            }

            this._pagesRequests.delete(thumbView);

            return pdfPage;

        })).catch(reason => {

            console.error(""Unable to get page for thumb view"", reason);

            // Page error -- there is nothing that can be done.

            this._pagesRequests.delete(thumbView);

        });

    } catch (e) {

        console.error('Error occurred while ensuring PDF page loaded: ', e);

    }

    return pdfPage;

}","   * @returns {Promise<PDFPageProxy | null>}

  async #ensurePdfPageLoaded(thumbView) {

      return thumbView.pdfPage;

    try {

      const pdfPage = await this.pdfDocument.getPage(thumbView.id);

      if (!thumbView.pdfPage) {

        thumbView.setPdfPage(pdfPage);

      }

      return pdfPage;

    } catch (reason) {

      console.error(""Unable to get page for thumb view"", reason);

      return null; // Page error -- there is nothing that can be done.
",415
711fbe13763b208ee335c9fdff6c7c8ca27a293f,"function loadPDF() {
  try {
    const pdfDocument = await loadingTask.promise;
    const pdfPage = await pdfDocument.getPage(PAGE_TO_VIEW);
    const pdfPageView = new pdfjsViewer.PDFPageView({
      container,
      id: PAGE_TO_VIEW,
      scale: SCALE,
      defaultViewport: pdfPage.getViewport({ scale: SCALE }),
      eventBus,
      textLayerFactory: !pdfDocument.isPureXfa
        ? new pdfjsViewer.DefaultTextLayerFactory()
        : null,
      annotationLayerFactory: new pdfjsViewer.DefaultAnnotationLayerFactory(),
      xfaLayerFactory: pdfDocument.isPureXfa
        ? new pdfjsViewer.DefaultXfaLayerFactory()
        : null,
      structTreeLayerFactory: new pdfjsViewer.DefaultStructTreeLayerFactory(),
    });
    pdfPageView.setPdfPage(pdfPage);
    return await pdfPageView.draw();
  } catch (error) {
    console.error(""Error while loading PDF document"", error);
  }
}","(async function () {

  const pdfDocument = await loadingTask.promise;

  const pdfPage = await pdfDocument.getPage(PAGE_TO_VIEW);

  // Creating the page view with default parameters.

  const pdfPageView = new pdfjsViewer.PDFPageView({

    container,

    id: PAGE_TO_VIEW,

    scale: SCALE,

    defaultViewport: pdfPage.getViewport({ scale: SCALE }),

    eventBus,

    // We can enable text/annotation/xfa/struct-layers, as needed.

    textLayerFactory: !pdfDocument.isPureXfa

      ? new pdfjsViewer.DefaultTextLayerFactory()

      : null,

    annotationLayerFactory: new pdfjsViewer.DefaultAnnotationLayerFactory(),

    xfaLayerFactory: pdfDocument.isPureXfa

      ? new pdfjsViewer.DefaultXfaLayerFactory()

      : null,

    structTreeLayerFactory: new pdfjsViewer.DefaultStructTreeLayerFactory(),

  // Associate the actual page with the view, and draw it.

  pdfPageView.setPdfPage(pdfPage);

  return pdfPageView.draw();

})();
",303
4c56214ab48dc2b3b379c88ffd3952961526152a,"async function() {
  try {
    let result = await this.xref.fetchAsync(ref);
    if (isDict(result, ""Page"") || (isDict(result) && !result.has(""Type"") && result.has(""Contents""))) {
      if (ref && !catalog.pageKidsCountCache.has(ref)) {
        catalog.pageKidsCountCache.put(ref, 1); // Cache the Page reference.
      }
      return [result, ref];
    } else {
      throw new FormatError(
        ""The Linearization dictionary doesn't point to a valid Page dictionary.""
      );
    }
  } catch (reason) {
    info(reason);
    return catalog.getPageDict(pageIndex);
  }
}","    try {

      const obj = await this.xref.fetchAsync(ref);

      // Ensure that the object that was found is actually a Page dictionary.

      if (

        isDict(obj, ""Page"") ||

        (isDict(obj) && !obj.has(""Type"") && obj.has(""Contents""))

      ) {

        if (ref && !catalog.pageKidsCountCache.has(ref)) {

          catalog.pageKidsCountCache.put(ref, 1); // Cache the Page reference.

        return [obj, ref];

      }

      throw new FormatError(

        ""The Linearization dictionary doesn't point to a valid Page dictionary.""

      );

    } catch (reason) {

      info(reason);

      return catalog.getPageDict(pageIndex);

    }
",203
5fd4276dcf7d5d9acc3afd91f67bb0de9fe3e81f,"async function rasterizeTextLayer() {
    try {
      const canvas = document.createElement(""canvas"");
      canvas.width = this.width;
      canvas.height = this.height;
      const ctx = canvas.getContext(""2d"");
      for (const element of this.texts) {
        ctx.font = `bold ${element.style.fontSize}px sans-serif`;
        ctx.fillText(element.value, element.x, element.y);
      }
      return canvas.toBuffer(""image/png"");
    } catch (error) {
      throw new Error(`Error rasterizing text layer: ${error}`);
    }
  }","  async function rasterizeTextLayer(

    try {
",483
b513c64d9da6cf050c1b5d3b0500e367b668789e,"async function findPage(xref, pageIndex) {
  const capability = createPromiseCapability();
  let nodesToVisit = [];
  let visitedNodes = new Set();
  let currentPageIndex = 0;
  let pageKidsCountCache = new Map();

  function next() {
    while (nodesToVisit.length > 0) {
      const currentNode = nodesToVisit.pop();
      if (currentNode instanceof Ref) {
        const count = pageKidsCountCache.get(currentNode);
        if (count >= 0 && currentPageIndex + count <= pageIndex) {
          currentPageIndex += count;
          continue;
        }
        if (!visitedNodes.has(currentNode)) {
          visitedNodes.add(currentNode);
          const obj = await xref.fetchAsync(currentNode);
          if (isDict(obj, ""Page"") || isDict(obj) && !obj.has(""Kids"")) {
            if (pageIndex === currentPageIndex) {
              capability.resolve([obj, currentNode]);
            } else {
              currentPageIndex++;
              next();
            }
          }
        }
      } else if (currentNode instanceof Dict) {
        let count;
        try {
          count = currentNode.get(""Count"");
        } catch (ex) {
          if (ex instanceof MissingDataException) {
            throw ex;
          }
          if (!Number.isInteger(count) || count < 0) {
            capability.reject(new FormatError(""Invalid Count in Page dictionary""));
            return;
          }
          const objId = currentNode.objId;
          if (objId && !pageKidsCountCache.has(objId)) {
            pageKidsCountCache.set(objId, count);
          }
          if (currentPageIndex + count <= pageIndex) {
            currentPageIndex += count;
            continue;
          }
        }
        let kids;
        try {
          kids = currentNode.get(""Kids"");
        } catch (ex) {
          if (ex instanceof MissingDataException) {
            throw ex;
          }
          if (!Array.isArray(kids)) {
            capability.reject(new FormatError(""Page dictionary kids object is not an array""));
            return;
          }
        }
        for (let last = kids.length - 1; last >= 0; last--) {
          nodesToVisit.push(kids[last]);
        }
      } else if (!isDict(currentNode)) {
        capability.reject(new FormatError(""Page dictionary kid reference points to wrong type of object""));
        return;
      }
    }
  }
  next();
  return capability.promise;
}","    while (nodesToVisit.length) {

      const currentNode = nodesToVisit.pop();

      if (currentNode instanceof Ref) {

        const count = pageKidsCountCache.get(currentNode);

        // Skip nodes where the page can't be.

        if (count >= 0 && currentPageIndex + count <= pageIndex) {

          currentPageIndex += count;

          continue;

        // Prevent circular references in the /Pages tree.

        if (visitedNodes.has(currentNode)) {

          throw new FormatError(""Pages tree contains circular reference."");

        visitedNodes.put(currentNode);

        const obj = await xref.fetchAsync(currentNode);

        if (obj instanceof Dict) {

          let type = obj.getRaw(""Type"");

          if (type instanceof Ref) {

            type = await xref.fetchAsync(type);

          if (isName(type, ""Page"") || !obj.has(""Kids"")) {

            // Cache the Page reference, since it can *greatly* improve

            // performance by reducing redundant lookups in long documents

            // where all nodes are found at *one* level of the tree.

            if (currentNode && !pageKidsCountCache.has(currentNode)) {

              pageKidsCountCache.put(currentNode, 1);



              return [obj, currentNode];

        }

        nodesToVisit.push(obj);

        continue;

      }

      // Must be a child page dictionary.

      if (!(currentNode instanceof Dict)) {

        throw new FormatError(

          ""Page dictionary kid reference points to wrong type of object.""

        );

      }

      const { objId } = currentNode;



      let count = currentNode.getRaw(""Count"");

      if (count instanceof Ref) {

        count = await xref.fetchAsync(count);

      }

      if (Number.isInteger(count) && count >= 0) {

        // Cache the Kids count, since it can reduce redundant lookups in

        // documents where all nodes are found at *one* level of the tree.

        if (objId && !pageKidsCountCache.has(objId)) {

          pageKidsCountCache.put(objId, count);

        // Skip nodes where the page can't be.

        if (currentPageIndex + count <= pageIndex) {

          currentPageIndex += count;

          continue;

        }

      }



      let kids = currentNode.getRaw(""Kids"");

      if (kids instanceof Ref) {

        kids = await xref.fetchAsync(kids);

      }

      if (!Array.isArray(kids)) {

        // Prevent errors in corrupt PDF documents that violate the

        // specification by *inlining* Page dicts directly in the Kids

        // array, rather than using indirect objects (fixes issue9540.pdf).

        let type = currentNode.getRaw(""Type"");

        if (type instanceof Ref) {

          type = await xref.fetchAsync(type);

        }

        if (isName(type, ""Page"") || !currentNode.has(""Kids"")) {

          if (currentPageIndex === pageIndex) {

            return [currentNode, null];

          }

          currentPageIndex++;

          continue;



        throw new FormatError(""Page dictionary kids object is not an array."");

      }



      // Always check all `Kids` nodes, to avoid getting stuck in an empty

      // node further down in the tree (see issue5644.pdf, issue8088.pdf),

      // and to ensure that we actually find the correct `Page` dict.

      for (let last = kids.length - 1; last >= 0; last--) {

        nodesToVisit.push(kids[last]);



    throw new Error(`Page index ${pageIndex} not found.`);
",2195
996396a9144ac9deb3d7bcdc82ba4363a31e2c25,"async close() {

  try {

    await this.overlayManager.close(this.overlayName);

    this.input.value = """";

  } catch (error) {

    console.error(""Error closing overlay"", error);

  }
}","  async close() {

    await this.overlayManager.close(this.overlayName);

    this.input.value = """";
",90
c0736647f9c09fa3d582bd7bc635dd854164ea07,"async fontFallback(id, handler) {
  const promises = [];

  this.fontCache.forEach((promise) => {
    promises.push(promise);
  });

  try {
    const translatedFonts = await Promise.all(promises);
    for (const translatedFont of translatedFonts) {
      if (translatedFont.loadedName === id) {
        translatedFont.fallback(handler);
        return;
      }
    }
  } catch (err) {
    console.error(err);
  }
}

async cleanup(manuallyTriggered = false) {
  const promises = [];

  this.fontCache.forEach((promise) => {
    promises.push(promise);
  });

  try {
    const translatedFonts = await Promise.all(promises);
    for (const { dict } of translatedFonts) {
      delete dict.cacheKey;
    }
    this.fontCache.clear();
    this.builtInCMapCache.clear();
    this.standardFontDataCache.clear();
  } catch (err) {
    console.error(err);
  }
}","  async fontFallback(id, handler) {

    const translatedFonts = await Promise.all(this.fontCache);

    for (const translatedFont of translatedFonts) {

      if (translatedFont.loadedName === id) {

        translatedFont.fallback(handler);

        return;

    }

  async cleanup(manuallyTriggered = false) {

    const translatedFonts = await Promise.all(this.fontCache);

    for (const { dict } of translatedFonts) {

      delete dict.cacheKey;

    }

    this.fontCache.clear();

    this.builtInCMapCache.clear();

    this.standardFontDataCache.clear();
",350
c48dc251e07482973ab14036d971cb00a241571a,"async function() {
    try {
      const resources = await resourcesPromise;
      const opList = new OperatorList();
      opList.addOp(OPS.beginAnnotation, [data.id, data.rect, transform, matrix, isUsingOwnCanvas]);
      await evaluator.getOperatorList({
        stream: appearance,
        task,
        resources,
        operatorList: opList,
        fallbackFontDict: this._fallbackFontDict,
      });
      opList.addOp(OPS.endAnnotation, []);
      this.reset();
      return opList;
    } catch (e) {
      console.log(""Error"", e);
    }
  }","    const opList = new OperatorList();

    let optionalContent;

    if (this.oc) {

      optionalContent = await evaluator.parseMarkedContentProps(

        this.oc,

        /* resources = */ null

      );

    }

    if (optionalContent !== undefined) {

      opList.addOp(OPS.beginMarkedContentProps, [""OC"", optionalContent]);

    }



    opList.addOp(OPS.beginAnnotation, [

      data.id,

      data.rect,

      transform,

      matrix,

      isUsingOwnCanvas,

    ]);



    await evaluator.getOperatorList({

      stream: appearance,

      task,

      resources,

      operatorList: opList,

      fallbackFontDict: this._fallbackFontDict,

    opList.addOp(OPS.endAnnotation, []);



    if (optionalContent !== undefined) {

      opList.addOp(OPS.endMarkedContent, []);

    }

    this.reset();

    return opList;
",441
c48dc251e07482973ab14036d971cb00a241571a,"async function getOperatorList(evaluator, task, intent, renderForms, annotationStorage) {
  try {
    const appearance = await this._getAppearance(evaluator, task, annotationStorage);
    if (this.appearance && content === null) {
      return super.getOperatorList(
        evaluator,
        task,
        intent,
        renderForms,
        annotationStorage,
      );
    }
    const operatorList = new OperatorList();
    // Even if there is an appearance stream, ignore it. This is the
    // behaviour used by Adobe Reader.
    if (!this._defaultAppearance || content === null) {
      return operatorList;
    }
    const matrix = [1, 0, 0, 1, 0, 0];
    const bbox = [0, 0, this.data.rect[2] - this.data.rect[0], this.data.rect[3] - this.data.rect[1]];
    const transform = getTransformMatrix(this.data.rect, bbox, matrix);
    operatorList.addOp(OPS.beginAnnotation, [this.data.id, this.data.rect, transform, this.getRotationMatrix(annotationStorage)]);
    const stream = new StringStream(content);
    return await evaluator
      .getOperatorList({
        stream,
        task,
        resources: this._fieldResources.mergedResources,
        operatorList,
      })
      .then(() => {
        operatorList.addOp(OPS.endAnnotation, []);
        return operatorList;
      });
  } catch (error) {
    throw new Error(`Error during getOperatorList: ${error}`);
  }
}","    const content = await this._getAppearance(

      evaluator,

      task,

      annotationStorage

    );

    if (this.appearance && content === null) {

      return super.getOperatorList(

        evaluator,

        task,

        intent,

        renderForms,

        annotationStorage

      );

    }

    const operatorList = new OperatorList();

    // Even if there is an appearance stream, ignore it. This is the

    // behaviour used by Adobe Reader.

    if (!this._defaultAppearance || content === null) {

      return operatorList;

    }

    const matrix = [1, 0, 0, 1, 0, 0];

    const bbox = [

      0,

      0,

      this.data.rect[2] - this.data.rect[0],

      this.data.rect[3] - this.data.rect[1],

    ];

    const transform = getTransformMatrix(this.data.rect, bbox, matrix);



    let optionalContent;

    if (this.oc) {

      optionalContent = await evaluator.parseMarkedContentProps(

        this.oc,

        /* resources = */ null

      );

    }

    if (optionalContent !== undefined) {

      operatorList.addOp(OPS.beginMarkedContentProps, [""OC"", optionalContent]);

    }



    operatorList.addOp(OPS.beginAnnotation, [

      this.data.id,

      this.data.rect,

      transform,

      this.getRotationMatrix(annotationStorage),

    ]);



    const stream = new StringStream(content);

    await evaluator.getOperatorList({

      stream,

      task,

      resources: this._fieldResources.mergedResources,

      operatorList,

    });

    operatorList.addOp(OPS.endAnnotation, []);



    if (optionalContent !== undefined) {

      operatorList.addOp(OPS.endMarkedContent, []);

    }

    return operatorList;
",696
31155740c35f5b270ff6222682b013f53351d427,"async function getAnnotationsData(intent) {
  try {
    const annotations = await this._parsedAnnotations;
    const annotationsData = [];
    if (annotations.length === 0) return annotationsData;
    for (const annotation of annotations) {
      const intentAny = !!(intent & RenderingIntentFlag.ANY);
      const intentDisplay = !!(intent & RenderingIntentFlag.DISPLAY);
      const intentPrint = !!(intent & RenderingIntentFlag.PRINT);
      if (
        intentAny ||
        (intentDisplay && annotation.viewable) ||
        (intentPrint && annotation.printable)
      ) {
        annotationsData.push(annotation.data);
    }
    return annotationsData;
  } catch (err) {
    console.error(err);
  }
}","  async getAnnotationsData(handler, task, intent) {

    const annotations = await this._parsedAnnotations;

    if (annotations.length === 0) {

      return [];

    }



    const textContentPromises = [];

    const annotationsData = [];

    let partialEvaluator;



    const intentAny = !!(intent & RenderingIntentFlag.ANY),

      intentDisplay = !!(intent & RenderingIntentFlag.DISPLAY),

      intentPrint = !!(intent & RenderingIntentFlag.PRINT);



    for (const annotation of annotations) {

      // Get the annotation even if it's hidden because

      // JS can change its display.

      const isVisible = intentAny || (intentDisplay && annotation.viewable);

      if (isVisible || (intentPrint && annotation.printable)) {

        annotationsData.push(annotation.data);

      if (annotation.hasTextContent && isVisible) {

        if (!partialEvaluator) {

          partialEvaluator = new PartialEvaluator({

            xref: this.xref,

            handler,

            pageIndex: this.pageIndex,

            idFactory: this._localIdFactory,

            fontCache: this.fontCache,

            builtInCMapCache: this.builtInCMapCache,

            standardFontDataCache: this.standardFontDataCache,

            globalImageCache: this.globalImageCache,

            options: this.evaluatorOptions,

          });

        textContentPromises.push(

          annotation

            .extractTextContent(partialEvaluator, task, this.view)

            .catch(function (reason) {

              warn(

                `getAnnotationsData - ignoring textContent during ""${task.name}"" task: ""${reason}"".`

              );

            })

        );

    }



    await Promise.all(textContentPromises);

    return annotationsData;
",1218
eed9bf71c5ee16268986a743a992c61bdbcc89da,"this.textLayerDiv.append(endOfContent);

    this.eventBus.dispatch(""textlayerrendered"", {

      source: this,

      pageNumber: this.pageNumber,

      numTextDivs: this.textDivs.length,

    });

  render() {

    if (!(this.textContent || this.textContentStream) || this.renderingDone) {

    this.cancel();

    this.textDivs.length = 0;

    const textLayerFrag = document.createDocumentFragment();

      container: textLayerFrag,

      viewport: this.viewport,

    try{
        await this.textLayerRenderTask.promise;
        this.textLayerDiv.append(textLayerFrag);
        this.#finishRendering();
        this.highlighter?.enable();
        this.accessibilityManager?.enable();
    }catch{ 
      // Cancelled or failed to render text layer; skipping errors.
     }
}","    this.div.append(endOfContent);

    this.#bindMouse();

  }



  get numTextDivs() {

    return this.textDivs.length;

  async render(viewport) {

    if (!(this.textContent || this.textContentStream)) {

      throw new Error(

        `Neither ""textContent"" nor ""textContentStream"" specified.`

      );

    }



    const scale = viewport.scale * (globalThis.devicePixelRatio || 1);

    if (this.renderingDone) {

      const { rotation } = viewport;

      const mustRotate = rotation !== this.#rotation;

      const mustRescale = scale !== this.#scale;

      if (mustRotate || mustRescale) {

        this.hide();

        updateTextLayer({

          container: this.div,

          viewport,

          textDivs: this.textDivs,

          textDivProperties: this.textDivProperties,

          isOffscreenCanvasSupported: this.isOffscreenCanvasSupported,

          mustRescale,

          mustRotate,

        });

        this.show();

        this.#scale = scale;

        this.#rotation = rotation;

      }

    this.cancel();

      container: this.div,

      viewport,

      textDivProperties: this.textDivProperties,

      isOffscreenCanvasSupported: this.isOffscreenCanvasSupported,



    await this.textLayerRenderTask.promise;

    this.#finishRendering();

    this.#scale = scale;

    this.accessibilityManager?.enable();

    this.show();

  }



  hide() {

    // We turn off the highlighter in order to avoid to scroll into view an

    // element of the text layer which could be hidden.

    this.highlighter?.disable();

    this.div.hidden = true;

  }



  show() {

    this.div.hidden = false;

    this.highlighter?.enable();
",1209
828efd9d000ab868369ac19cbc2ed0f8cc09c92f,"async () => {
    try {
        const result = await XfaLayer.render(parameters);
        return Promise.resolve(result);
    } catch (error) {
        console.error(error);
    }
}","      return XfaLayer.render(parameters);

    const xfaHtml = await this.pdfPage.getXfa();

    if (this._cancelled || !xfaHtml) {

      return { textDivs: [] };

    }



    const parameters = {

      viewport: viewport.clone({ dontFlip: true }),

      div: this.div,

      xfaHtml,

      annotationStorage: this.annotationStorage,

      linkService: this.linkService,

      intent,

    };

    if (this.div) {

      return XfaLayer.update(parameters);

    }

    // Create an xfa layer div and render the form

    this.div = document.createElement(""div"");

    this.pageDiv.append(this.div);

    parameters.div = this.div;

    return XfaLayer.render(parameters);
",558
32357e3d172a552e0408b3e1ed743e87fe7d5a21,"const jsdoc = gulp.task(""jsdoc"", async () => {
  await rimraf(JSDOC_BUILD_DIR);
  await mkdirp(JSDOC_BUILD_DIR);
  const command = `""node_modules/.bin/jsdoc"" -d ${JSDOC_BUILD_DIR} ${JSDOC_FILES.join("" "")}`;
  exec(command, done);
});","gulp.task(""jsdoc"", async function (done) {

  await rimraf(JSDOC_BUILD_DIR);

  await mkdirp(JSDOC_BUILD_DIR);



  const command = `""node_modules/.bin/jsdoc"" -d ${JSDOC_BUILD_DIR} ${JSDOC_FILES.join(

    "" ""

  )}`;

  exec(command, done);
",47
df9cce39c09cde3a4fa5f523c1115e83280a163f,"async create(xref, ref, pdfManager, idFactory, collectFields, pageRef) {
    try{
      const acroForm = await pdfManager.ensureCatalog(""acroForm"");
      const baseUrl = await pdfManager.ensureCatalog(""baseUrl"");
      const attachments = await pdfManager.ensureCatalog(""attachments"");
      const xfaDatasets = await pdfManager.ensureDoc(""xfaDatasets"");
      const pageIndex = collectFields ? await this._getPageIndex(xref, ref, pdfManager) : -1;
      const structTreeRoot = pageRef ? await pdfManager.ensureCatalog(""structTreeRoot"") : null;
      return pdfManager.ensure(this, ""_create"", [
        xref,
        ref,
        pdfManager,
        idFactory,
        acroForm,
        attachments,
        xfaDatasets,
        collectFields,
        pageIndex,
        structTreeRoot,
        pageRef,
      ]);
    } catch(error) {
      console.log(error);
    }
  }","   * @params {Object} annotationGlobals

   * @param {boolean} [collectFields]

  static async create(

    xref,

    ref,

    annotationGlobals,

    idFactory,

    collectFields,

    pageRef

  ) {

    const pageIndex = collectFields

      ? await this._getPageIndex(xref, ref, annotationGlobals.pdfManager)

      : null;



    return annotationGlobals.pdfManager.ensure(this, ""_create"", [

      xref,

      ref,

      annotationGlobals,

      idFactory,

      pageIndex,

      pageRef,

    ]);
",584
df9cce39c09cde3a4fa5f523c1115e83280a163f,"async function getParsedAnnotations() {
  try {
    const annotationPromises = [];
    // Code to be migrated
    return await Promise.all(annotationPromises).then(annotations => {
      if (annotations.length === 0) {
        return annotations;
      }

      const sortedAnnotations = [];
      let popupAnnotations;

      for (const annotation of annotations) {
        if (!annotation) {
          continue;
        }

        if (annotation instanceof PopupAnnotation) {
          (popupAnnotations ||= []).push(annotation);
          continue;
        }

        sortedAnnotations.push(annotation);
      }

      if (popupAnnotations) {
        sortedAnnotations.push(...popupAnnotations);
      }

      return sortedAnnotations;
    });
  } catch (err) {
    console.error(""Error occurred while getting parsed annotations"", err);
    throw err;
  }
}","        const sortedAnnotations = [];

        let popupAnnotations;

        // Ensure that PopupAnnotations are handled last, since they depend on

        // their parent Annotation in the display layer; fixes issue 11362.

        for (const annotation of await Promise.all(annotationPromises)) {

          if (!annotation) {

            continue;

          if (annotation instanceof PopupAnnotation) {

            (popupAnnotations ||= []).push(annotation);

            continue;

          sortedAnnotations.push(annotation);

        }

        if (popupAnnotations) {

          sortedAnnotations.push(...popupAnnotations);

        }

        return sortedAnnotations;

    return shadow(this, ""_parsedAnnotations"", promise);
",372
ff96c413d3efdc3ec08ff6c7596d57b555c1af99,"async function getUpdatedData(stream, xref, startXRef, linearization, filename) {

  let newRefs = [];

  let xfaData = null;

  if (isPureXfa) {

    xfaData = refs[0];

    if (!xfaData) {

      return stream.bytes;

    }

  } else {

    newRefs = refs.flat(2);



    if (newRefs.length === 0) {

      // No new refs so just return the initial bytes

      return stream.bytes;

    }

  const needAppearances =

    acroFormRef &&

    acroForm instanceof Dict &&

    newRefs.some(ref => ref.needAppearances);



  const xfa = (acroForm instanceof Dict && acroForm.get(""XFA"")) || null;

  let xfaDatasetsRef = null;

  let hasXfaDatasetsEntry = false;

  if (Array.isArray(xfa)) {

    for (let i = 0, ii = xfa.length; i < ii; i += 2) {

      if (xfa[i] === ""datasets"") {

        xfaDatasetsRef = xfa[i + 1];

        hasXfaDatasetsEntry = true;

      }

    }

    if (xfaDatasetsRef === null) {

      xfaDatasetsRef = xref.getNewTemporaryRef();

    }

  } else if (xfa) {

    // TODO: Support XFA streams.

    warn(""Unsupported XFA type."");

  let newXrefInfo = Object.create(null);

  if (xref.trailer) {

    // Get string info from Info in order to compute fileId.

    const infoObj = Object.create(null);

    const xrefInfo = xref.trailer.get(""Info"") || null;

    if (xrefInfo instanceof Dict) {

      xrefInfo.forEach((key, value) => {

        if (typeof value === ""string"") {

          infoObj[key] = stringToPDFString(value);

        }

      });

    newXrefInfo = {

      rootRef: xref.trailer.getRaw(""Root"") || null,

      encryptRef: xref.trailer.getRaw(""Encrypt"") || null,

      newRef: xref.getNewTemporaryRef(),

      infoRef: xref.trailer.getRaw(""Info"") || null,

      info: infoObj,

      fileIds: xref.trailer.get(""ID"") || null,

      startXRef: linearization

        ? startXRef

        : xref.lastXRefStreamPos ?? startXRef,

      filename,

    };

  return incrementalUpdate({

    originalData: stream.bytes,

    xrefInfo: newXrefInfo,

    newRefs,

    xref,

    hasXfa: !!xfa,

    xfaDatasetsRef,

    hasXfaDatasetsEntry,

    needAppearances,

    acroFormRef,

    acroForm,

    xfaData,

  }).finally(() => {

    xref.resetNewTemporaryRef();

  });

}","        const refs = await Promise.all(promises);

        let newRefs = [];

        let xfaData = null;

        if (isPureXfa) {

          xfaData = refs[0];

          if (!xfaData) {

            return stream.bytes;

        } else {

          newRefs = refs.flat(2);

          if (newRefs.length === 0) {

            // No new refs so just return the initial bytes

            return stream.bytes;

        }

        const needAppearances =

          acroFormRef &&

          acroForm instanceof Dict &&

          newRefs.some(ref => ref.needAppearances);



        const xfa = (acroForm instanceof Dict && acroForm.get(""XFA"")) || null;

        let xfaDatasetsRef = null;

        let hasXfaDatasetsEntry = false;

        if (Array.isArray(xfa)) {

          for (let i = 0, ii = xfa.length; i < ii; i += 2) {

            if (xfa[i] === ""datasets"") {

              xfaDatasetsRef = xfa[i + 1];

              hasXfaDatasetsEntry = true;

          }

          if (xfaDatasetsRef === null) {

            xfaDatasetsRef = xref.getNewTemporaryRef();

          }

        } else if (xfa) {

          // TODO: Support XFA streams.

          warn(""Unsupported XFA type."");

        }

        let newXrefInfo = Object.create(null);

        if (xref.trailer) {

          // Get string info from Info in order to compute fileId.

          const infoObj = Object.create(null);

          const xrefInfo = xref.trailer.get(""Info"") || null;

          if (xrefInfo instanceof Dict) {

            xrefInfo.forEach((key, value) => {

              if (typeof value === ""string"") {

                infoObj[key] = stringToPDFString(value);

              }

            });

          newXrefInfo = {

            rootRef: xref.trailer.getRaw(""Root"") || null,

            encryptRef: xref.trailer.getRaw(""Encrypt"") || null,

            newRef: xref.getNewTemporaryRef(),

            infoRef: xref.trailer.getRaw(""Info"") || null,

            info: infoObj,

            fileIds: xref.trailer.get(""ID"") || null,

            startXRef: linearization

              ? startXRef

              : xref.lastXRefStreamPos ?? startXRef,

            filename,

          };

        }



        return incrementalUpdate({

          originalData: stream.bytes,

          xrefInfo: newXrefInfo,

          newRefs,

          xref,

          hasXfa: !!xfa,

          xfaDatasetsRef,

          hasXfaDatasetsEntry,

          needAppearances,

          acroFormRef,

          acroForm,

          xfaData,

        }).finally(() => {

          xref.resetNewTemporaryRef();
",492
050093c9f519154f26f3d5757ffc7290fd98ba8f,"addAltTextButton() async {

await AnnotationEditor._l10nPromise

  .get(""editor_alt_text_button_label"")

  .then(msg => {

    altText.textContent = msg;

    altText.setAttribute(""aria-label"", msg);

  });
}","  async addAltTextButton() {

    const msg = await AnnotationEditor._l10nPromise.get(

      ""editor_alt_text_button_label""

    );

    altText.textContent = msg;

    altText.setAttribute(""aria-label"", msg);
",57
fc62eec9017721af1dae51336a1190223ba37008,"async function loadFont() {
  try {
    const translated = await this.loadFont();
    if (!translated.font.isType3Font) {
      return translated;
    }
    const type3Data = await translated.loadType3Data(this, resources, task);
    operatorList.addDependencies(type3Data.type3Dependencies);
    return translated;
  } catch (error) {
    return new TranslatedFont({
      loadedName: ""g_font_error"",
      font: new ErrorFont(`Type3 font load error: ${error}`),
      dict: translated.font,
      evaluatorOptions: this.options,
    });
  }
}","    let translated = await this.loadFont(

    );



    if (translated.font.isType3Font) {

      try {

        await translated.loadType3Data(this, resources, task);

        // Add the dependencies to the parent operatorList so they are

        // resolved before Type3 operatorLists are executed synchronously.

        operatorList.addDependencies(translated.type3Dependencies);

      } catch (reason) {

        translated = new TranslatedFont({

          loadedName: ""g_font_error"",

          font: new ErrorFont(`Type3 font load error: ${reason}`),

          dict: translated.font,

          evaluatorOptions: this.options,

        });

      }

    }



    state.font = translated.font;

    translated.send(this.handler);

    return translated.loadedName;
",412
fc62eec9017721af1dae51336a1190223ba37008,"`async function handleSetFont(fontName, fontRef) {
    
    try {
    
      const translated = await self.loadFont(fontName, fontRef, resources);
      
      if (!translated.font.isType3Font) {
        return translated;
      }
      
      await translated.loadType3Data(self, resources, task);
      textState.loadedName = translated.loadedName;
      textState.font = translated.font;
      textState.fontMatrix = translated.font.fontMatrix || FONT_IDENTITY_MATRIX;
      
    } catch (error) {
    
      // Ignore Type3-parsing errors, since we only use `loadType3Data` here to ensure that we'll always obtain a useful /FontBBox.
      textState.loadedName = translated.loadedName;
      textState.font = translated.font;
      textState.fontMatrix = translated.font.fontMatrix || FONT_IDENTITY_MATRIX;
      
    }
    
  }`","    async function handleSetFont(fontName, fontRef) {

      const translated = await self.loadFont(fontName, fontRef, resources);



      if (translated.font.isType3Font) {

        try {

          await translated.loadType3Data(self, resources, task);

        } catch {

          // Ignore Type3-parsing errors, since we only use `loadType3Data`

          // here to ensure that we'll always obtain a useful /FontBBox.

        }

      }



      textState.loadedName = translated.loadedName;

      textState.font = translated.font;

      textState.fontMatrix = translated.font.fontMatrix || FONT_IDENTITY_MATRIX;
",302
d1bef8cb8660a5da1e250ed4888c3b8f7779bd4a,"async function extractDataStructures(dict, dict, properties) {
    try {
        const newProperties = await this.extractDataStructures(dict, dict, properties);

        if (widths) {
            const glyphWidths = [];

            let j = firstChar;

            for (const width of widths) {
                glyphWidths[j++] = await this.xref.fetchIfRef(width);
            }

            newProperties.widths = glyphWidths;
        } else {
            newProperties.widths = this.buildCharCodeToWidth(metrics.widths, newProperties);
        }

        return await Font(baseFontName, file, newProperties);
    } catch (error) {
        console.log(`Error: ${error}`);
        throw error;
    }
}","

        const newProperties = await this.extractDataStructures(

          dict,

          dict,

          properties

        if (widths) {

          const glyphWidths = [];

          let j = firstChar;

          for (const width of widths) {

            glyphWidths[j++] = this.xref.fetchIfRef(width);

          }

          newProperties.widths = glyphWidths;

        } else {

          newProperties.widths = this.buildCharCodeToWidth(

            metrics.widths,

            newProperties

          );

        }

        return new Font(baseFontName, file, newProperties);
",265
d1bef8cb8660a5da1e250ed4888c3b8f7779bd4a,"async function extractDataStructures(dict, baseDict, properties) {
  try {
    const newProperties = await this.extractDataStructures(dict, baseDict, properties);

    this.extractWidths(dict, descriptor, newProperties);



    return new Font(fontName.name, fontFile, newProperties);
  } catch (err) {
    console.error(err);
  }
}","    const newProperties = await this.extractDataStructures(

      dict,

      baseDict,

      properties

    this.extractWidths(dict, descriptor, newProperties);



    return new Font(fontName.name, fontFile, newProperties);
",146
1cc83c4fdc614c41cf314296cf0160693c9b60da,"async function() {
  await this.getOperatorList({

  });
   operatorList.addOp(OPS.paintFormXObjectEnd, []);

    if (group) {

      operatorList.addOp(OPS.endGroup, [groupOptions]);

    }

    if (optionalContent !== undefined) {

      operatorList.addOp(OPS.endMarkedContent, []);

    }
}","    await this.getOperatorList({

    });

    operatorList.addOp(OPS.paintFormXObjectEnd, []);

    if (group) {

      operatorList.addOp(OPS.endGroup, [groupOptions]);

    }

    if (optionalContent !== undefined) {

      operatorList.addOp(OPS.endMarkedContent, []);

    }
",22
cf0797dfbd7fe1f7dcd9f1d4e60848a3a2a5de19,"return async () => {

  if (gStateObj.length > 0) {

    operatorList.addOp(OPS.setGState, [gStateObj]);

  }

  if (isSimpleGState) {

    localGStateCache.set(cacheKey, gStateRef, gStateObj);

  }

};","    await promise;

    if (gStateObj.length > 0) {

      operatorList.addOp(OPS.setGState, [gStateObj]);

    }



    if (isSimpleGState) {

      localGStateCache.set(cacheKey, gStateRef, gStateObj);

    }
",34
f5c01188dc8fbb586664bf68ef492c26813d5253,"return toUnicodePromise
   .then(async readToUnicode => {

     properties.toUnicode = readToUnicode;

     return await this.buildToUnicode(properties);

   })
   .then(async builtToUnicode => {

     properties.toUnicode = builtToUnicode;

     if (cidToGidBytes) {

       properties.cidToGidMap = this.readCidToGidMap(

         cidToGidBytes,

         builtToUnicode

       );

     }

     return properties;

   });","

    properties.toUnicode = await toUnicodePromise;



    const builtToUnicode = await this.buildToUnicode(properties);

    properties.toUnicode = builtToUnicode;



    if (cidToGidBytes) {

      properties.cidToGidMap = this.readCidToGidMap(

        cidToGidBytes,

        builtToUnicode

      );

    }

    return properties;
",140
f21a30dfb4c7812e4b31acbb15206f24611ae58b,"async readToUnicode(cmapObj) {

  let cmap = null;

  try {

    cmap = await CMapFactory.create({ encoding: cmapObj, fetchBuiltInCMap: this._fetchBuiltInCMapBound, useCMap: null });

  } catch (reason) {

    if (reason instanceof AbortException) {

      return null;

    }

    if (this.options.ignoreErrors) {

      warn(`readToUnicode - ignoring ToUnicode data: ""${reason}"".`);

      return null;

    }

    throw reason;

  }

  if (cmap instanceof IdentityCMap) {

    return new IdentityToUnicodeMap(0, 0xffff);

  const map = new Array(cmap.length);

  // Convert UTF-16BE

  // NOTE: cmap can be a sparse array, so use forEach instead of `for (;;)` to iterate over all keys.

  cmap.forEach((charCode, token) => {

    // Some cmaps contain *only* CID characters (fixes issue9367.pdf).

    if (typeof token === ""number"") {

      map[charCode] = String.fromCodePoint(token);

      return;

    }

    const str = [];

    for (let k = 0; k < token.length; k += 2) {

      const w1 = (token.charCodeAt(k) << 8) | token.charCodeAt(k + 1);

      if ((w1 & 0xf800) !== 0xd800) {

        // w1 < 0xD800 || w1 > 0xDFFF

        str.push(w1);

        continue;

      }

      k += 2;

      const w2 = (token.charCodeAt(k) << 8) | token.charCodeAt(k + 1);

      str.push(((w1 & 0x3ff) << 10) + (w2 & 0x3ff) + 0x10000);

    map[charCode] = String.fromCodePoint(...str);

  });

  return new ToUnicodeMap(map);

} else {

  return null;

}

return cmap;

}","  async readToUnicode(cmapObj) {

      return null;

      const cmap = await CMapFactory.create({

      });



      if (cmap instanceof IdentityCMap) {

        return new IdentityToUnicodeMap(0, 0xffff);

      }

      return new ToUnicodeMap(cmap.getMap());

    }

    if (cmapObj instanceof BaseStream) {

      try {

        const cmap = await CMapFactory.create({

          encoding: cmapObj,

          fetchBuiltInCMap: this._fetchBuiltInCMapBound,

          useCMap: null,

        });



        const map = new Array(cmap.length);

        // Convert UTF-16BE

        // NOTE: cmap can be a sparse array, so use forEach instead of

        // `for(;;)` to iterate over all keys.

        cmap.forEach(function (charCode, token) {

          // Some cmaps contain *only* CID characters (fixes issue9367.pdf).

          if (typeof token === ""number"") {

            map[charCode] = String.fromCodePoint(token);

            return;

          const str = [];

          for (let k = 0; k < token.length; k += 2) {

            const w1 = (token.charCodeAt(k) << 8) | token.charCodeAt(k + 1);

            if ((w1 & 0xf800) !== 0xd800) {

              // w1 < 0xD800 || w1 > 0xDFFF

              str.push(w1);

              continue;

            k += 2;

            const w2 = (token.charCodeAt(k) << 8) | token.charCodeAt(k + 1);

            str.push(((w1 & 0x3ff) << 10) + (w2 & 0x3ff) + 0x10000);

          map[charCode] = String.fromCodePoint(...str);

        });

        return new ToUnicodeMap(map);

      } catch (reason) {

        if (reason instanceof AbortException) {

          return null;

        if (this.options.ignoreErrors) {

          warn(`readToUnicode - ignoring ToUnicode data: ""${reason}"".`);

          return null;

        }

        throw reason;

      }

    return null;
",752
e4d0e84802098251bd72ffa6ef28907d1ce50f2a,"async function waitOnEventOrTimeout(
  { target, name, delay = 0 }
) {

  if (
    typeof target !== ""object"" ||
    !(name && typeof name === ""string"") ||
    !(Number.isInteger(delay) && delay >= 0)
  ) {
    throw new Error(""waitOnEventOrTimeout - invalid parameters."");
  }

  try {
    let type;
    const eventHandler = (type = WaitOnType.EVENT) => {
      target._off(name, eventHandler);
      target.removeEventListener(name, eventHandler);
      if (timeout) {
        clearTimeout(timeout);
      }
      resolve(type);
    };
    target._on(name, eventHandler);
    target.addEventListener(name, eventHandler);
    const timeout = setTimeout(() => {
      type = WaitOnType.TIMEOUT;
      handler(type);
    }, delay);
  } catch (error) {
    throw new Error(""waitOnEventOrTimeout - error: "" + error.message);
  }
}","async function waitOnEventOrTimeout({ target, name, delay = 0 }) {

  if (

    typeof target !== ""object"" ||

    !(name && typeof name === ""string"") ||

    !(Number.isInteger(delay) && delay >= 0)

  ) {

    throw new Error(""waitOnEventOrTimeout - invalid parameters."");

  }

  const { promise, resolve } = Promise.withResolvers();

  function handler(type) {

      target._off(name, eventHandler);

      target.removeEventListener(name, eventHandler);

    if (timeout) {

      clearTimeout(timeout);

    }

    resolve(type);

  }



  const eventHandler = handler.bind(null, WaitOnType.EVENT);

  if (target instanceof EventBus) {

    target._on(name, eventHandler);

  } else {

    target.addEventListener(name, eventHandler);

  }



  const timeoutHandler = handler.bind(null, WaitOnType.TIMEOUT);

  const timeout = setTimeout(timeoutHandler, delay);



  return promise;
",344
fa69d9a3bce242bc4ee3eed44a0c6eed5ce17d74,"async function goToDestinationHelper(destRef) {
  try {
    const pageIndex = await this.pdfDocument.getPageIndex(destRef);
    this.cachePageRef(pageIndex + 1, destRef);
    this.#goToDestinationHelper(rawDest, namedDest, explicitDest);
  } catch (error) {
    console.error(
      `PDFLinkService.#goToDestinationHelper: ""${destRef}"" is not a valid page reference, for dest=""${rawDest}"".`
    );
  }
}","        try {

          pageNumber = (await this.pdfDocument.getPageIndex(destRef)) + 1;

          this.cachePageRef(pageNumber, destRef);

        } catch {

          console.error(

            `goToDestination: ""${destRef}"" is not a valid page reference, for dest=""${dest}"".`

          );

          return;

        }

        `goToDestination: ""${destRef}"" is not a valid destination reference, for dest=""${dest}"".`

        `goToDestination: ""${pageNumber}"" is not a valid page number, for dest=""${dest}"".`
",329
6d523c316cf5d2c47d5e0cf0adfe3e0a57875b97,"const dataPromises = Promise.all([contentStreamPromise, resourcesPromise]);

async function getTextContent() {
  try {
    const [contentStream] = await dataPromises;
    const partialEvaluator = new PartialEvaluator({
      xref: this.xref,
      handler,
      pageIndex: this.pageIndex,
      idFactory: this._localIdFactory,
      fontCache: this.fontCache,
      builtInCMapCache: this.builtInCMapCache,
      standardFontDataCache: this.standardFontDataCache,
      globalImageCache: this.globalImageCache,
      systemFontCache: this.systemFontCache,
      options: this.evaluatorOptions,
    });
    return await partialEvaluator.getTextContent({
      stream: contentStream,
      task,
      resources: this.resources,
      includeMarkedContent,
      disableNormalization,
      sink,
      viewBox: this.view,
    });
  } catch (error) {
    console.log(error);
  }
}","    const langPromise = this.pdfManager.ensureCatalog(""lang"");

    const [contentStream, , lang] = await Promise.all([

      contentStreamPromise,

      resourcesPromise,

      langPromise,

    ]);

    const partialEvaluator = new PartialEvaluator({

      xref: this.xref,

      handler,

      pageIndex: this.pageIndex,

      idFactory: this._localIdFactory,

      fontCache: this.fontCache,

      builtInCMapCache: this.builtInCMapCache,

      standardFontDataCache: this.standardFontDataCache,

      globalImageCache: this.globalImageCache,

      systemFontCache: this.systemFontCache,

      options: this.evaluatorOptions,

    });

    return partialEvaluator.getTextContent({

      stream: contentStream,

      task,

      resources: this.resources,

      includeMarkedContent,

      disableNormalization,

      sink,

      viewBox: this.view,

      lang,
",217
0a621ba73a974d1052fc9a6f796632be3c9b975e,"const readFile = async (params) => {
  try {
    const data = await fs.readFile(params.path);
    if (!data) throw new Error(`Empty file for: ${params.path}`);
    return new Uint8Array(data);
  } catch (error) {
    reject(error || new Error(`Empty file for: ${params.path}`));
  }
};","    const data = await fs.promises.readFile(params.path);

    return new Uint8Array(data);
",204
df696063b95ef45ec9cfca077787f91c04ea8c4e,"async function fetchData(url, compressionType) {
    try {
      const data = await fetchData(url);
      return {
        cMapData:
          data instanceof ArrayBuffer
            ? new Uint8Array(data)
            : stringToBytes(data),
        compressionType,
      };
    } catch (error) {
      console.log(error);
    }
  }","  async _fetch(url) {

    const data = await fetchData(

    );

    return data instanceof ArrayBuffer

      ? new Uint8Array(data)

      : stringToBytes(data);
",183
df696063b95ef45ec9cfca077787f91c04ea8c4e,"async _fetchData(url) {
    
    try {
      const data = await fetchData(url, ""arraybuffer"");
      return new Uint8Array(data);
    } catch (error) {
      console.log(""Error occurred:"", error);
    }
  }","  async _fetch(url) {

    const data = await fetchData(url, /* type = */ ""arraybuffer"");

    return new Uint8Array(data);
",113
df696063b95ef45ec9cfca077787f91c04ea8c4e,"const fetchData = async function (url) {
  try {
    const data = await fs.promises.readFile(url);
    return new Uint8Array(data);
  } catch (err) {
    console.log(err);
  }
};","async function fetchData(url) {

  const data = await fs.promises.readFile(url);

  return new Uint8Array(data);

}
",78
df696063b95ef45ec9cfca077787f91c04ea8c4e,"async function fetchData(url) {
  try {
    const data = await fetch(url);
    return { cMapData: data, compressionType };
  } catch (error) {
    throw error;
  }
}","  async _fetch(url) {

    return fetchData(url);
",126
afb4813d1c4288011c93383d28c4445e9af28596,"function () {
    try {
        const fullReader = this._fullReader;
        await fullReader.headersReady.then(() => {
            if (!fullReader.isStreamingSupported || !fullReader.isRangeSupported) {
                if (this._lastProgress) {
                    loadingTask.onProgress?.(this._lastProgress);
                }
                fullReader.onProgress = evt => {
                    loadingTask.onProgress?.({
                        loaded: evt.loaded,
                        total: evt.total,
                    });
                };
            }
            headersCapability.resolve({
                isStreamingSupported: fullReader.isStreamingSupported,
                isRangeSupported: fullReader.isRangeSupported,
                contentLength: fullReader.contentLength,
            });
        }, headersCapability.reject);
    } catch (error) {
        console.log(error);
    }
}","    messageHandler.on(""ReaderHeadersReady"", async data => {

      await this._fullReader.headersReady;

      const { isStreamingSupported, isRangeSupported, contentLength } =

        this._fullReader;



      // If stream or range are disabled, it's our only way to report

      // loading progress.

      if (!isStreamingSupported || !isRangeSupported) {

        if (this._lastProgress) {

          loadingTask.onProgress?.(this._lastProgress);

        }

        this._fullReader.onProgress = evt => {

          loadingTask.onProgress?.({

            loaded: evt.loaded,

            total: evt.total,

          });

        };

      }

      return { isStreamingSupported, isRangeSupported, contentLength };
",613
7b5cd9cddd4977f0d28894c4bbf1cd869c8bf0a8,"async function getPDFAnnotations(pdfDoc) {
    try {
        const pdfPage = await pdfDoc.getPage(1);
        return await pdfPage.getAnnotations();
    } catch (error) {
        console.error('Error occurred while retrieving PDF annotations', error);
    }
}","        async pdfDoc => {

          const pdfPage = await pdfDoc.getPage(1);

          return pdfPage.getAnnotations();
",159
6548c9f1f61dd4f85e9081409de2db279dd7ce68,"async function renderPage() {
  const pageColors = this.pageColors;
  try {
    const resultPromise = await renderTask.promise();
    this.#finishRenderTask(renderTask, canvas);
    zeroCanvas(canvas);
    this.eventBus.dispatch(""thumbnailrendered"", {
      source: this,
      pageNumber: this.id,
      pdfPage: this.pdfPage,
    });
  } catch (error) {
    this.#finishRenderTask(renderTask, canvas, error);
  } finally {
    zeroCanvas(canvas);
    this.eventBus.dispatch(""thumbnailrendered"", {
      source: this,
      pageNumber: this.id,
      pdfPage: this.pdfPage,
    });
  }
}","      pageColors,

    let error = null;

    try {

      await renderTask.promise;

    } catch (e) {

      if (e instanceof RenderingCancelledException) {

        zeroCanvas(canvas);

        return;

      }

      error = e;

    } finally {

      // The renderTask may have been replaced by a new one, so only remove

      // the reference to the renderTask if it matches the one that is

      // triggering this callback.

      if (renderTask === this.renderTask) {

        this.renderTask = null;

      }

    }

    this.renderingState = RenderingStates.FINISHED;



    this.#convertCanvasToImage(canvas);

    zeroCanvas(canvas);



    this.eventBus.dispatch(""thumbnailrendered"", {

      source: this,

      pageNumber: this.id,

      pdfPage,

    if (error) {

      throw error;

    }
",510
d00482380af454d544324d927ec1af9e17ccb4a8,"async function getContentStream() {
  const content = await this.pdfManager.ensure(this, ""content"");
  if (content instanceof BaseStream) return content;
  if (Array.isArray(content)) return new StreamsSequenceStream(content, this._onSubStreamError.bind(this));
  return new NullStream();
}","  async getContentStream() {

    const content = await this.pdfManager.ensure(this, ""content"");



    if (content instanceof BaseStream) {

      return content;

    }

    if (Array.isArray(content)) {

      return new StreamsSequenceStream(

        content,

        this._onSubStreamError.bind(this)

      );

    }

    // Replace non-existent page content with empty content.

    return new NullStream();
",147
d00482380af454d544324d927ec1af9e17ccb4a8,"async function loadResources(keys) {

    this.resourcesPromise ||= await this.pdfManager.ensure(this, ""resources"");

    return await this.resourcesPromise.then(() => {

        const objectLoader = new ObjectLoader(this.resources, keys, this.xref);

        return await objectLoader.load();

    });

}","    const annotations = await this._parsedAnnotations;

    const promises = [];

    for (const annotation of annotations) {

      promises.push(

        annotation

          .save(partialEvaluator, task, annotationStorage, changes)

          .catch(function (reason) {

            warn(

              ""save - ignoring annotation data during "" +

                `""${task.name}"" task: ""${reason}"".`

            );

            return null;

          })

      );

    }

    return Promise.all(promises);

  async loadResources(keys) {

    await (this.resourcesPromise ??= this.pdfManager.ensure(this, ""resources""));

    const objectLoader = new ObjectLoader(this.resources, keys, this.xref);

    await objectLoader.load();

  async getOperatorList({
",551
d00482380af454d544324d927ec1af9e17ccb4a8,"return async function () {
    const opList = await partialEvaluator.getOperatorList({
      stream: contentStream,
      task,
      resources: this.resources,
      operatorList: opList,
    });
    const newOpList = await Promise.all([opList]);
    if (newOpList) {
      return { length: pageOpList.totalLength };
    } else {
      return null;
    }
  }();","      await partialEvaluator.getOperatorList({

        stream: contentStream,

        task,

        resources: this.resources,

        operatorList: opList,

      });

      return opList;

    // eslint-disable-next-line prefer-const

    let [pageOpList, annotations, newAnnotations] = await Promise.all([

    ]);



    if (newAnnotations) {

      // Some annotations can already exist (if it has the refToReplace

      // property). In this case, we replace the old annotation by the new one.

      annotations = annotations.filter(

        a => !(a.ref && deletedAnnotations.has(a.ref))

      );

      for (let i = 0, ii = newAnnotations.length; i < ii; i++) {

        const newAnnotation = newAnnotations[i];

        if (newAnnotation.refToReplace) {

          const j = annotations.findIndex(

            a => a.ref && isRefsEqual(a.ref, newAnnotation.refToReplace)

          );

          if (j >= 0) {

            annotations.splice(j, 1, newAnnotation);

            newAnnotations.splice(i--, 1);

            ii--;

      annotations = annotations.concat(newAnnotations);

    }

    if (

      annotations.length === 0 ||

      intent & RenderingIntentFlag.ANNOTATIONS_DISABLE

    ) {

      pageOpList.flush(/* lastChunk = */ true);

      return { length: pageOpList.totalLength };

    }

    const renderForms = !!(intent & RenderingIntentFlag.ANNOTATIONS_FORMS),

      isEditing = !!(intent & RenderingIntentFlag.IS_EDITING),

      intentAny = !!(intent & RenderingIntentFlag.ANY),

      intentDisplay = !!(intent & RenderingIntentFlag.DISPLAY),

      intentPrint = !!(intent & RenderingIntentFlag.PRINT);



    // Collect the operator list promises for the annotations. Each promise

    // is resolved with the complete operator list for a single annotation.

    const opListPromises = [];

    for (const annotation of annotations) {

        intentAny ||

        (intentDisplay &&

          annotation.mustBeViewed(annotationStorage, renderForms) &&

          annotation.mustBeViewedWhenEditing(isEditing, modifiedIds)) ||

        (intentPrint && annotation.mustBePrinted(annotationStorage))

        opListPromises.push(

          annotation

            .getOperatorList(partialEvaluator, task, intent, annotationStorage)

            .catch(function (reason) {

              warn(

                ""getOperatorList - ignoring annotation data during "" +

                  `""${task.name}"" task: ""${reason}"".`

              );

              return {

                opList: null,

                separateForm: false,

                separateCanvas: false,

              };

            })

        );

    }

    const opLists = await Promise.all(opListPromises);

    let form = false,

      canvas = false;

    for (const { opList, separateForm, separateCanvas } of opLists) {

      pageOpList.addOpList(opList);

      form ||= separateForm;

      canvas ||= separateCanvas;

    }

    pageOpList.flush(

      /* lastChunk = */ true,

      /* separateAnnots = */ { form, canvas }

    );

    return { length: pageOpList.totalLength };
",2812
62009ffa701a69f2ff179682169dae53d1d336b8,"async function loadResources(keys, appearance) {
  const resources = await appearance.dict.getAsync(""Resources"");

  if (!resources) return undefined;

  const objectLoader = new ObjectLoader(resources, keys, resources.xref);
  await objectLoader.load();

  return resources;
}","  async loadResources(keys, appearance) {

    const resources = await appearance.dict.getAsync(""Resources"");

    if (resources) {

      await ObjectLoader.load(resources, keys, resources.xref);

    }

    return resources;
",85
98ec2c4512014649e2c82d18b4f9e4163a0c1784,"async function createIgnorer(ignorePath, withNodeModules) {

    const ignoreContent = await (await getFileContentOrNull(path.resolve(ignorePath))) || null;

    return _createIgnorer(ignoreContent, withNodeModules);
}","async function createIgnorer(ignorePath, withNodeModules) {

  const ignoreContent = ignorePath

    ? await getFileContentOrNull(path.resolve(ignorePath))

    : null;



  return _createIgnorer(ignoreContent, withNodeModules);
",27
98ec2c4512014649e2c82d18b4f9e4163a0c1784,"async function getFileInfo(filePath, opts) {

    try {

      if (typeof filePath !== 'string') {

        throw new TypeError(`expect \`filePath\` to be a string, got \`${typeof filePath}\``);

      }

      const ignorer = await createIgnorer(opts.ignorePath, opts.withNodeModules);

      return _getFileInfo({

        ignorer,

        filePath: normalizeFilePath(filePath, opts.ignorePath),

        plugins: opts.plugins,

        resolveConfig: opts.resolveConfig,

        sync: false

      });

    } catch (error) {

      console.log('Error occurred while getting file info', error);

    }

}","async function getFileInfo(filePath, opts) {

    throw new TypeError(

      `expect \`filePath\` to be a string, got \`${typeof filePath}\``

  const ignorer = await createIgnorer(opts.ignorePath, opts.withNodeModules);

  return _getFileInfo({

    ignorer,

    filePath: normalizeFilePath(filePath, opts.ignorePath),

    plugins: opts.plugins,

    resolveConfig: opts.resolveConfig,

    sync: false

  });
",207
98ec2c4512014649e2c82d18b4f9e4163a0c1784,"async function resolveConfigFile(filePath) {
  try {
    const result = await load(filePath);
    return result ? result.filepath : null;
  } catch (err) {
    console.error(err);
  }
}","async function resolveConfigFile(filePath) {

  const result = await load(filePath);

  return result ? result.filepath : null;
",58
c493bdef8d1d7816e18627f2afd8a1952037c6a6,"async function editorconfigAsyncNoCache(filePath, config) {
  try {
    let parsed = await maybeParse(filePath, config, editorconfig.parse);
    return editorConfigToPrettier(parsed);
  } catch (error) {
    console.error(""Error parsing editorconfig file:"", error);
    return null;
  }
}","const editorconfigAsyncNoCache = async (filePath, config) => {

  const editorConfig = await maybeParse(filePath, config, editorconfig.parse);

  return editorConfigToPrettier(editorConfig);

const editorconfigAsyncWithCache = jsonStringifyMem(editorconfigAsyncNoCache);

const editorconfigSyncWithCache = jsonStringifyMem(editorconfigSyncNoCache);
",178
b3ea6799589d863972d858e24b4341530aa1df2e,"const {output} = bundleConfig;

async function migrate() {
  try {
    const result = await bundler(bundleConfig, cache);
    if (result.cached) console.log(CACHED);
    else console.log(OK);
  } catch (error) {
    console.log(FAIL + ""\n"");
    handleError(error);
  }
}","  const { output, target } = bundleConfig;

  try {

    const { cached } = await bundler(bundleConfig, cache);



    if (cached) {

      console.log(CACHED);

      return;

    }



    // Files including U+FFEE can't load in Chrome Extension

    // `prettier-chrome-extension` https://github.com/prettier/prettier-chrome-extension

    // details https://github.com/prettier/prettier/pull/8534

    if (target === ""universal"") {

      const file = path.join(""dist"", output);

      const content = fs.readFileSync(file, ""utf8"");

      if (content.includes(""\ufffe"")) {

        throw new Error(""Bundled umd file should not have U+FFFE character."");

    }



    console.log(OK);

  } catch (error) {

    console.log(FAIL + ""\n"");

    handleError(error);

  }
",553
916693c066f0d215342d174eea870cd3fb887654,"async function logPromise(name, promise) {
  try {
    const result = await promise;
    process.stdout.write(`${OK}\n`);
    return result;
  } catch (err) {
    process.stdout.write(`${FAIL}\n`);
    throw err;
  }
}","async function logPromise(name, promiseOrAsyncFunction) {

  const promise =

    typeof promiseOrAsyncFunction === ""function""

      ? promiseOrAsyncFunction()

      : promiseOrAsyncFunction;



  try {

    const result = await promise;

    process.stdout.write(`${OK}\n`);

    return result;

  } catch (error) {

    process.stdout.write(`${FAIL}\n`);

    throw error;

  }

async function runYarn(args, options) {

  args = Array.isArray(args) ? args : [args];



  try {

    return await execa(""yarn"", [""--silent"", ...args], options);

  } catch (error) {

    throw new Error(`\`yarn ${args.join("" "")}\` failed\n${error.stdout}`);

  }

}



function runGit(args, options) {

  args = Array.isArray(args) ? args : [args];

  return execa(""git"", args, options);
",555
6e71422548dd99522d86de9c2a25930e469ce5e4,"async function formatStdin(context) {
  try {
    const input = await getStdin();
    if (relativeFilepath && ignorer.ignores(fixWindowsSlashes(relativeFilepath))) {
      writeOutput(context, { formatted: input });
      return;
    }
    const options = getOptionsForFile(context, filepath);
    if (listDifferent(context, input, options, ""(stdin)"")) {
      return;
    }
    writeOutput(context, format(context, input, options), options);
  } catch (error) {
    handleError(context, relativeFilepath || ""stdin"", error);
  }
}","async function formatStdin(context) {

  const ignorer = await createIgnorerFromContextOrDie(context);

  try {

    const input = await getStdin();



    if (

      relativeFilepath &&

      ignorer.ignores(fixWindowsSlashes(relativeFilepath))

    ) {

      writeOutput(context, { formatted: input });

      return;

    }

    const options = await getOptionsForFile(context, filepath);

    if (listDifferent(context, input, options, ""(stdin)"")) {

      return;

    }

    writeOutput(context, await format(context, input, options), options);

  } catch (error) {

    handleError(context, relativeFilepath || ""stdin"", error);

  }

async function formatFiles(context) {

  const ignorer = await createIgnorerFromContextOrDie(context);
",218
90ea7e4a4f24adeb320dea79413fbdac402b1253,"async function getFileContentOrNull(filename) {
  try {
    const data = await fs.readFile(filename, ""utf8"");
    return data;
  } catch (error) {
    if (error.code !== ""ENOENT"") {
      throw createError(filename, error);
    } else {
      return null;
    }
  }
}","const fsAsync = fs.promises;

async function getFileContentOrNull(filename) {

  try {

    return await fsAsync.readFile(filename, ""utf8"");

  } catch (error) {

    return handleError(filename, error);

  }
",144
c6d6b258331cca8fa739514557bd5b1aac67199d,"async function formatWorker() {
  const result = await this.format(code, options, { ast, doc, comments, reformat });
  await this.setState(result);
}","    const result = await worker.format(code, options, {

      ast,

      doc,

      comments,

      reformat,

    });

    this.setState(result);
",77
c6d6b258331cca8fa739514557bd5b1aac67199d,"async componentDidMount() {
  try {
    const { supportInfo, version } = await this.worker.getMetadata();
    this.setState({
      loaded: true,
      availableOptions: supportInfo.options.map(augmentOption),
      version: fixPrettierVersion(version),
    });
  } catch (error) {
    console.error('Error fetching metadata from worker', error);
  }
}","  async componentDidMount() {

    const { supportInfo, version } = await this.worker.getMetadata();



    this.setState({

      loaded: true,

      availableOptions: supportInfo.options.map(augmentOption),

      version: fixPrettierVersion(version),
",113
34fadbe67d13df908023fb9a047eee1e90734aec,"async function resolveConfig(filePath) {
  try {
    const resolvedConfig = await config.resolveConfig.sync(filePath);
    fileInfo.inferredParser = getFileParser(resolvedConfig, filePath, plugins);
    return fileInfo;
  } catch (error) {
    // handle potential errors here
  }
}","    const resolvedConfig = await config.resolveConfig(filePath);

    fileInfo.inferredParser = getFileParser(resolvedConfig, filePath, plugins);

    return fileInfo;
",117
34fadbe67d13df908023fb9a047eee1e90734aec,"@template {Options} Opts

  @param {Opts} opts

  @return {Opts[""sync""] extends true ? SyncExplorer : Explorer}

  async function getExplorer(opts) {

    // Normalize opts before passing to a memoized function

    opts = { sync: false, cache: false, ...opts };

    return await getExplorerMemoized(opts);

  }

  function _resolveConfig(filePath, opts, sync) {

    try {

      const result = await resolveEditorConfig(filePath, opts);

      const editorConfigured = result ? await resolveEditorConfig(result.filepath, opts) : null;

      if (!result && !editorConfigured) {

        return null;

      }

      // We are not using this option

      delete result.insertFinalNewline;

      const merged = {

        ...editorConfigured,

        ...mergeOverrides(result, filePath),

      };

      for (const optionName of [""plugins"", ""pluginSearchDirs""]) {

        if (Array.isArray(merged[optionName])) {

          merged[optionName] = merged[optionName].map((value) =>

            typeof value === ""string"" && value.startsWith(""."") // relative path

              ? path.resolve(path.dirname(result.filepath), value)

              : value

          );

        }

      }

      return merged;

    } catch (error) {

      throw new Error(`Error resolving config for file ${filePath}: ${error}`);

    }

  }

  const resolveConfig = (filePath, opts) => _resolveConfig(filePath, opts, false);

  resolveConfig.sync = (filePath, opts) => _resolveConfig(filePath, opts, true);"," * @param {Options} [options]

 * @return {Explorer}

function getExplorer(options) {

  return getExplorerMemoized(

    // Normalize opts before passing to a memoized function

    { cache: false, ...options }

  );

async function resolveConfig(filePath, opts) {



  const [result, editorConfigured] = await Promise.all([

  ]);

  const merged = {

    ...editorConfigured,

    ...mergeOverrides(result, filePath),

  for (const optionName of [""plugins"", ""pluginSearchDirs""]) {

    if (Array.isArray(merged[optionName])) {

      merged[optionName] = merged[optionName].map((value) =>

        typeof value === ""string"" && value.startsWith(""."") // relative path

          ? path.resolve(path.dirname(result.filepath), value)

          : value

      );

    }

  if (!result && !editorConfigured) {

    return null;

  }

  // We are not using this option

  delete merged.insertFinalNewline;

  return merged;

}
",739
34fadbe67d13df908023fb9a047eee1e90734aec,"test(""API resolveConfig with no args"", async () => {
  const result = await prettier.resolveConfig();
  expect(result).toEqual({});
});

test(""API resolveConfig.sync with no args"", async () => {
  expect(prettier.resolveConfig.sync()).toEqual({});
});

test(""API resolveConfig with file arg"", async () => {
  const file = path.resolve(path.join(__dirname, ""../cli/config/js/file.js""));
  try {
    const result = await prettier.resolveConfig(file);
    expect(result).toMatchObject({ tabWidth: 8 });
  } catch (error) {
    console.log(error);
  }
});

test(""API resolveConfig.sync with file arg"", async () => {
  const file = path.resolve(path.join(__dirname, ""../cli/config/js/file.js""));
  expect(prettier.resolveConfig.sync(file)).toMatchObject({ tabWidth: 8 });
});

test(""API resolveConfig with file arg and extension override"", async () => {
  const file = path.resolve(
    path.join(__dirname, ""../cli/config/no-config/file.ts"")
  );
  try {
    const result = await prettier.resolveConfig(file, { extension: "".ts"" });
    expect(result).toMatchObject({ semi: true });
  } catch (error) {
    console.log(error);
  }
});

test(""API resolveConfig.sync with file arg and extension override"", async () => {
  const file = path.resolve(
    path.join(__dirname, ""../cli/config/no-config/file.ts"")
  );
  expect(prettier.resolveConfig.sync(file, { extension: "".ts"" })).toMatchObject({
    semi: true,
  });
});

test(""API resolveConfig with file arg and .editorconfig"", async () => {
  const file = path.resolve(
    path.join(__dirname, ""../cli/config/editorconfig/file.js"")
  );
  try {
    const result = await prettier.resolveConfig(file, { editorconfig: true });
    expect(result).toMatchObject({ useTabs: true, tabWidth: 8, printWidth: 100 });
  } catch (error) {
    console.log(error);
  }
});

test(""API resolveConfig.sync with file arg and .editorconfig"", async () => {
  const file = path.resolve(
    path.join(__dirname, ""../cli/config/editorconfig/file.js"")
  );
  expect(prettier.resolveConfig.sync(file, { editorconfig: true })).toMatchObject({
    useTabs: true,
    tabWidth: 8,
    printWidth: 100,
  });
});

test(""API resolveConfig with nested file arg and .editorconfig"", async () => {
  const file = path.resolve(
    path.join(__dirname, ""../cli/config/editorconfig/lib/file.js"")
  );
  try {
    const result = await prettier.resolveConfig(file, { editorconfig: true });
    expect(result).toMatchObject({ useTabs: false, tabWidth: 2, printWidth: 100 });
  } catch (error) {
    console.log(error);
  }
});

test(""API resolveConfig.sync with nested file arg and .editorconfig"", async () => {
  const file = path.resolve(
    path.join(__dirname, ""../cli/config/editorconfig/lib/file.js"")
  );
  expect(prettier.resolveConfig.sync(file, { editorconfig: true })).toMatchObject({
    useTabs: false,
    tabWidth: 2,
    printWidth: 100,
  });
});

test(""API resolveConfig with nested file arg and .editorconfig and indent_size = tab"", async () => {
  const file = path.resolve(
    path.join(__dirname, ""../cli/config/editorconfig/lib/indent_size=tab.js"")
  );
  try {
    const result = await prettier.resolveConfig(file, { editorconfig: true });
    expect(result).toMatchObject({ useTabs: false, tabWidth: 8, printWidth: 100 });
  } catch (error) {
    console.log(error);
  }
});

test(""API resolveConfig.sync with nested file arg and .editorconfig and indent_size = tab"", async () => {
  const file = path.resolve(
    path.join(__dirname, ""../cli/config/editorconfig/lib/indent_size=tab.js"")
  );
  expect(prettier.resolveConfig.sync(file, { editorconfig: true })).toMatchObject({
    useTabs: false,
    tabWidth: 8,
    printWidth: 100,
  });
});","test(""API resolveConfig with no args"", async () => {

  await expect(prettier.resolveConfig()).resolves.toEqual({});

test(""API resolveConfig with file arg"", async () => {

  await expect(prettier.resolveConfig(file)).resolves.toMatchObject({

test(""API resolveConfig with file arg and extension override"", async () => {

  await expect(prettier.resolveConfig(file)).resolves.toMatchObject({

test(""API resolveConfig with file arg and .editorconfig"", async () => {

  await expect(prettier.resolveConfig(file)).resolves.toMatchObject({

  await expect(

    prettier.resolveConfig(file, { editorconfig: true })

  ).resolves.toMatchObject({

test(""API resolveConfig with file arg and .editorconfig (key = unset)"", async () => {

  await expect(

    prettier.resolveConfig(file, { editorconfig: true })

  ).resolves.not.toMatchObject({ tabWidth: ""unset"" });

test(""API resolveConfig with nested file arg and .editorconfig"", async () => {

  await expect(prettier.resolveConfig(file)).resolves.toMatchObject({

  await expect(

    prettier.resolveConfig(file, { editorconfig: true })

  ).resolves.toMatchObject({

test(""API resolveConfig with nested file arg and .editorconfig and indent_size = tab"", async () => {

  await expect(prettier.resolveConfig(file)).resolves.toMatchObject({

  await expect(

    prettier.resolveConfig(file, { editorconfig: true })

  ).resolves.toMatchObject({
",2471
34fadbe67d13df908023fb9a047eee1e90734aec,"expect(prettier.resolveConfig.sync(doubleQuote)).toMatchObject({

    test(""API resolveConfig removes $schema option"", async () => {
      try {
        const result = await prettier.resolveConfig.sync(file);
        expect(result).toEqual({
          tabWidth: 42,
        });
      } catch (error) {
        // handle error
      }
    });

    test(""API resolveConfig.sync removes $schema option"", () => {
      const file = path.resolve(path.join(__dirname, ""../cli/config/$schema/index.js""));
      expect(prettier.resolveConfig.sync(file)).toEqual({
        // ...
      });
    });

    test(""API resolveConfig resolves relative path values based on config filepath"", () => {
      expect(prettier.resolveConfig.sync(`${currentDir}/index.js`)).toMatchObject({
        // ...
      });
    });

    test(""API resolveConfig de-references to an external module"", () => {
      expect(prettier.resolveConfig.sync(`${currentDir}/index.js`)).toEqual({
        // ...
      });
    });
  }","  await expect(prettier.resolveConfig(doubleQuote)).resolves.toMatchObject({

test(""API resolveConfig removes $schema option"", async () => {

  await expect(prettier.resolveConfig(file)).resolves.toEqual({

test(""API resolveConfig resolves relative path values based on config filepath"", async () => {

  await expect(

    prettier.resolveConfig(`${currentDir}/index.js`)

  ).resolves.toMatchObject({

  await expect(

    prettier.resolveConfig(

  ).resolves.toMatchObject({

test(""API resolveConfig de-references to an external module"", async () => {

  await expect(

    prettier.resolveConfig(`${currentDir}/index.js`)

  ).resolves.toEqual({
",556
08a51db63f34895c58471857cd55740a8f85d8ab,"async function require_async5() {
    const stream = await require_stream3();
    const _reader = new stream.default(this._settings);

    async function read(task) {
        let entries = [];
        try {
            const stream2 = this.api(root, task, options);
            stream2.on(""error"", reject);
            stream2.once(""data"", (entry) => entries.push(options.transform(entry)));
            stream2.once(""end"", () => resolve(entries));
        } catch (err) {
            console.error(`Error reading data from API: ${err.message}`);
        }
    }
}","var require_async6 = __commonJS({

    var async_1 = require_async5();

        this._reader = new async_1.default(this._settings);

      async read(task) {

        const entries = await this.api(root, task, options);

        return entries.map((entry) => options.transform(entry));
",369
18a24f614fe09423c953848d27e171361335bed4,"async launchApp(appName, args) {
  try {
    if (typeof appName === 'object' && !args) {
      args = appName;
      appName = undefined;
    }
    await this.#postMessageWithCallback('launchApp', resolve, { app_name: appName, args });
  } catch(err) {
    // handle error here
  }
}","    launchApp = async function launchApp(app_name, args, callback) {

        const app_info = await this.#ipc_stub({

            method: 'launchApp',

            callback,

            parameters: {

                app_name,

                args,

            },

        });

        

        return AppConnection.from(app_info, {

            appInstanceID: this.appInstanceID,

            messageTarget: this.messageTarget,

        });
",318
dcfe85ecdbe39f71138469a5faceb1fadf8b0c8f,"import { svelte } from '../helpers.js';

describe('preprocess', () => {
	it('preprocesses entire component', () => {
		const source = `
		<h1>Hello __NAME__!</h1>
	`;

		const expected = `
		<h1>Hello world!</h1>
	`;

		return svelte.preprocess(source, {
			markup: ({ content }) => {
				return { code: content.replace('__NAME__', 'world') };
			}
		}).then((processed) => {
			assert.equal(processed.toString(), expected);
		});
	});

	it('preprocesses style', () => {
		const source = `
		<div class='brand-color'>$brand</div>

		<style>
			.brand-color {
				color: $brand;
			}
		</style>
	`;

		const expected = `
		<div class='brand-color'>$brand</div>

		<style>
			.brand-color {
				color: purple;
			}
		</style>
	`;

		return svelte.preprocess(source, {
			style: ({ content }) => {
				return { code: content.replace('$brand', 'purple') };
			}
		}).then((processed) => {
			assert.equal(processed.toString(), expected);
		});
	});

	it('preprocesses style asynchronously', () => {
		const source = `
		<div class='brand-color'>$brand</div>

		<style>
			.brand-color {
				color: $brand;
			}
		</style>
	`;

		const expected = `
		<div class='brand-color'>$brand</div>

		<style>
			.brand-color {
				color: purple;
			}
		</style>
	`;

		return svelte.preprocess(source, {
			style: ({ content }) => {
				return Promise.resolve({ code: content.replace('$brand', 'purple') });
			}
		}).then((processed) => {
			assert.equal(processed.toString(), expected);
		});
	});

	it('preprocesses script', () => {
		const source = `
		<script>
			console.log(__THE_ANSWER__);
		</script>
	`;

		const expected = `
		<script>
			console.log(42);
		</script>
	`;

		return svelte.preprocess(source, {
			script: ({ content }) => {
				return { code: content.replace('__THE_ANSWER__', '42') };
			}
		}).then((processed) => {
			assert.equal(processed.toString(), expected);
		});
	});

	it('preprocesses multiple matching tags', () => {
		const source = `
		<script>REPLACEME</script>
		<style>SHOULD NOT BE REPLACED</style>
		<script>REPLACEMETOO</script>
	`;

		const expected = `
		<script>replaceme</script>
		<style>SHOULD NOT BE REPLACED</style>
		<script>replacemetoo</script>
	`;

		return svelte.preprocess(source, {
			script: ({ content }) => {
				return { code: content.toLowerCase() };
			}
		}).then((processed) => {
			assert.equal(processed.toString(), expected);
		});
	});

	it('parses attributes', () => {
		const source = `
		<style type='text/scss' data-foo=""bar"" bool></style>
	`;

		const expected = `
		<style type='text/scss' data-foo=""bar"" bool>PROCESSED</style>
	`;

		return svelte.preprocess(source, {
			style: ({ attributes }) => {
				assert.deepEqual(attributes, {
					type: 'text/scss',
					'data-foo': 'bar',
					bool: true
				});
				return { code: 'PROCESSED' };
			}
		}).then((processed) => {
			assert.equal(processed.toString(), expected);
		});
	});

	it('provides filename to processing hooks', () => {
		const source = `
		<h1>Hello __MARKUP_FILENAME__!</h1>
		<style>.red { color: __STYLE_FILENAME__; }</style>
		<script>console.log('__SCRIPT_FILENAME__');</script>
	`;

		const expected = `
		<h1>Hello file.html!</h1>
		<style>.red { color: file.html; }</style>
		<script>console.log('file.html');</script>
	`;

		return svelte.preprocess(source, {
			filename: 'file.html',
			markup: ({ content, filename }) => {
				return { code: content.replace('__MARKUP_FILENAME__', filename) };
			},
			style: ({ content, filename }) => {
				return { code: content.replace('__STYLE_FILENAME__', filename) };
			},
			script: ({ content, filename }) => {
				return { code: content.replace('__SCRIPT_FILENAME__', filename) };
			}
		}).then((processed) => {
			assert.equal(processed.toString(), expected);
		});
	});

	it('ignores null/undefined returned from preprocessor', () => {
		const source = `
		<script>
			console.log('ignore me');
		</script>
	`;

		const expected = `
		<script>
			console.log('ignore me');
		</script>
	`;

		return svelte.preprocess(source, {
			script: () => null
		}).then((processed) => {
			assert.equal(processed.toString(), expected);
		});
	});","import * as fs from 'fs';

import { loadConfig, svelte } from '../helpers.js';

describe.only('preprocess', () => {

	fs.readdirSync('test/preprocess/samples').forEach(dir => {

		if (dir[0] === '.') return;

		const config = loadConfig(`./preprocess/samples/${dir}/_config.js`);

		if (config.solo && process.env.CI) {

			throw new Error('Forgot to remove `solo: true` from test');

		}

		(config.skip ? it.skip : config.solo ? it.only : it)(dir, async () => {

			const input = fs.readFileSync(`test/preprocess/samples/${dir}/input.html`, 'utf-8');

			const expected = fs.readFileSync(`test/preprocess/samples/${dir}/output.html`, 'utf-8');

			const actual = await svelte.preprocess(input, config.preprocess);

			fs.writeFileSync(`test/preprocess/samples/${dir}/_actual.html`, actual);

			assert.equal(actual, expected);
",3577
95649da5524c3a8dfd03b54bf85564d06ad52bb7,"async function migrate(bundle) {
  try {
    const result = await bundle.generate({ format: 'iife', name: 'test' });
    const nightmare = new Nightmare({ show: false });
    nightmare.on('console', (type, ...args) => console[type](...args));
    const output = await nightmare
      .goto('http://localhost:6789')
      .evaluate(() => test(document.querySelector('main')))
      .then(result => {
        if (result) console.log(result);
        return nightmare.end();
      })
      .catch(message => {
        console.log(addLineNumbers(bundle));
        return nightmare.end().then(() => {
          throw new Error(message);
        });
      });
    return output;
  } catch (err) {
    console.error(err);
  }
}","			});



			const result = await bundle.generate({ format: 'iife', name: 'test' });

			code = result.output[0].code;



			const page = await browser.newPage();



			page.on('console', (type, ...args) => {

				console[type](...args);

			});

			try {

				await page.goto('http://localhost:6789');

				const result = await page.evaluate(() => test(document.querySelector('main')));

				if (result) console.log(result);

			} catch (err) {

				console.log(addLineNumbers(code));

				throw err;

			}
",438
3f02d999cd7b2a746d277dc4defc7b56c0482afc,"fetch(`https://api.github.com/repos/sveltejs/svelte/stats/contributors`)

	.then(async r => {
		const contributors = await r.json();
		const munged = contributors

			.sort((a, b) => b.total - a.total)

			.map(({ author }) => ({ name: author.login, src: author.avatar_url }));

		const str = `[\n\t${munged.map(c => `{ name: '${c.name}', src: '${c.src}' }`).join(',\n\t')}\n]`;

		fs.writeFileSync(`../src/routes/_contributors.js`, `export default ${str};`);
	});","const Jimp = require('jimp');

const SIZE = 64;

async function main() {

	const res = await fetch(`https://api.github.com/repos/sveltejs/svelte/stats/contributors`);

	const contributors = await res.json();

	const authors = contributors

		.sort((a, b) => b.total - a.total)

		.map(({ author }) => author);



	const sprite = new Jimp(SIZE * authors.length, SIZE);



	for (let i = 0; i < authors.length; i += 1) {

		const author = authors[i];

		console.log(`${i + 1} / ${authors.length}: ${author.login}`);



		const image_data = await fetch(author.avatar_url);

		const buffer = await image_data.arrayBuffer();



		const image = await Jimp.read(buffer);

		image.resize(SIZE, SIZE);



		sprite.composite(image, i * SIZE, 0);

	}



	await sprite.quality(80).write(`../static/contributors.jpg`);



	const str = `[\n\t${authors.map(a => `'${a.login}'`).join(',\n\t')}\n]`;



	fs.writeFileSync(`../src/routes/_contributors.js`, `export default ${str};`);

}



main();
",616
783bd9899e16276786d3fb6e96a59083e13efe7f,"async function test({ assert, component, target }) {

  try {

    fulfil(42);

    const promise = await thePromise;

    assert.htmlEqual(
      target.innerHTML,
      `
      <p>the value is 42</p>
    `
    );

    let reject;

    const promiseTwo = new Promise((f, r) => {
      reject = r;
    });

    component.thePromise = promiseTwo;

    assert.htmlEqual(
      target.innerHTML,
      `
      <p>loading...</p>
    `
    );

    reject(new Error('something broke'));

    const errorPromise = await thePromise.catch(() => {});

    assert.htmlEqual(
      target.innerHTML,
      `
      <p>oh no! something broke</p>
    `
    );

  } catch (error) {

    console.log('An error occurred:', error);

  }
}","import { create_deferred } from '../../../helpers.js';

let deferred;

	before_test() {

		deferred = create_deferred();

	},



	get props() {

		return { thePromise: deferred.promise };

	async test({ assert, component, target }) {

		deferred.resolve(42);



		await deferred.promise;

		assert.htmlEqual(target.innerHTML, `<p>the value is 42</p>`);



		deferred = create_deferred();

		component.thePromise = deferred.promise;

		assert.htmlEqual(target.innerHTML, `<p>loading...</p>`);



		deferred.reject(new Error('something broke'));



		try {

			await deferred.promise;

		} catch {}



		assert.htmlEqual(target.innerHTML, `<p>oh no! something broke</p>`);
",525
ba1603a7e2caf4ab2b6ab6e9e98f78e17d2248ce,"export const requestResolvedSubtree = path => async system => {
  const {
    errActions,
    fn: { resolveSubtree, AST: { getLineNumberForPath } },
    specSelectors,
    specActions,
  } = system;
  const specStr = specSelectors.specStr();
  const currentValue = specSelectors.specResolvedSubtree(path);
  if (currentValue) return;
  try {
    const { spec, errors } = await resolveSubtree(
      specSelectors.specJson().toJS(),
      path
    );
    errActions.clear({ type: ""thrown"" });
    console.error(err);
    return spec;
  } catch (err) {
    errActions.throw({ type: ""requestResolvedSubtree"", message: err.message });
  }
};","let requestBatch = []

const debResolveSubtrees = debounce(async () => {

  const system = requestBatch.system // Just a reference to the ""latest"" system



  if(!system) {

    console.error(""debResolveSubtrees: don't have a system to operate on, aborting."")

    return

  }

    const {

      errActions,

      errSelectors,

      fn: {

        resolveSubtree,

        AST: { getLineNumberForPath }

      },

      specSelectors,

      specActions,

    } = system

  const specStr = specSelectors.specStr()

  try {

    var batchResult = await requestBatch.reduce(async (prev, path) => {

      const { resultMap, specWithCurrentSubtrees } = await prev



      const { errors, spec } = await resolveSubtree(specWithCurrentSubtrees, path)



      if(errSelectors.allErrors().size) {

        errActions.clear({

          type: ""thrown""

        })

      }
",601
6ff1d1bd7183e9f4ec75075dccb6410a605de3d6,"async function updateInputSources( event ) {
	const referenceSpaceType = await session.requestReferenceSpace(referenceSpaceType);
}","			referenceSpace = await session.requestReferenceSpace( referenceSpaceType );



			animation.setContext( session );

			animation.start();

			scope.isPresenting = true;

			scope.dispatchEvent( { type: 'sessionstart' } );

	function onInputSourcesChange( event ) {
",202
edb93edd82d340f7a9b97c25665df21de27f38b0,"async function main() {
  try {
    const session = new XRSession();
    const referenceSpaceType = ""local"";
    await session.requestReferenceSpace(referenceSpaceType);
    updateInputSources(event);
  } catch (error) {
    console.log(error);
  }
}","			referenceSpace = await session.requestReferenceSpace( referenceSpaceType );

			animation.setContext( session );

			animation.start();



			scope.isPresenting = true;

			scope.dispatchEvent( { type: 'sessionstart' } );

	function onInputSourcesChange( event ) {
",217
3714df0b234c3b509a0e169b0621045eda4af5cf,"return async (base, info, name) => {
    const geometryInfo = await createLiveImage(base, info, name);
    if (!info.material && !geometryInfo instanceof THREE.BufferGeometry || !geometryInfo instanceof THREE.Geometry) {
      const material = new THREE.MeshPhongMaterial({
        flatShading: info.flatShading === false ? false : true,
        side: THREE.DoubleSide,
      });
      material.color.setHSL(Math.random(), .5, .5);
      info.material = material;
    }
    const geometry = geometryInfo instanceof THREE.BufferGeometry || !geometryInfo instanceof THREE.Geometry ? geometryInfo : geometryInfo.geometry;
    if (geometry) {
      const mesh = new THREE.Mesh(geometry, info.material);
      mesh.position.copy(new THREE.Vector3());
      root.add(mesh);
    }
    const lineGeometry = geometryInfo.lineGeometry || geometryInfo.geometry;
    if (info.showLines !== false && lineGeometry) {
      const lineMesh = new THREE.LineSegments(lineGeometry, !geometry ? whiteLineMaterial : blackLineMaterial);
      lineMesh.position.copy(new THREE.Vector3());
      root.add(lineMesh);
    }
  };","    createLiveImage(base, info, name);

  async function addGeometry(root, info, args = []) {

    let geometryInfo = await promise;

    if (geometryInfo instanceof THREE.BufferGeometry ||

        geometryInfo instanceof THREE.Geometry) {

      const geometry = geometryInfo;

      geometryInfo = {

        geometry,

      };

    }

    const boxGeometry = geometryInfo.geometry || geometryInfo.lineGeometry;

    boxGeometry.computeBoundingBox();

    const centerOffset = new THREE.Vector3();

    boxGeometry.boundingBox.getCenter(centerOffset).multiplyScalar(-1);

    if (geometryInfo.geometry) {

      if (!info.material) {

        const material = new THREE.MeshPhongMaterial({

          flatShading: info.flatShading === false ? false : true,

          side: THREE.DoubleSide,

        });

        material.color.setHSL(Math.random(), .5, .5);

        info.material = material;

      const mesh = new THREE.Mesh(geometryInfo.geometry, info.material);

      mesh.position.copy(centerOffset);

      root.add(mesh);

    }

    if (info.showLines !== false) {

      const lineMesh = new THREE.LineSegments(

        geometryInfo.lineGeometry || geometryInfo.geometry,

        new THREE.LineBasicMaterial({

          color: geometryInfo.geometry ? 0xffffff : colors.lines,

          transparent: true,

          opacity: 0.5,

        }));

      lineMesh.position.copy(centerOffset);

      root.add(lineMesh);

    }

  async function updateGeometry(root, info, params) {

    await addGeometry(root, info, Object.values(params));

    oldChildren.forEach((child) => {

      root.remove(child);

      child.geometry.dispose();

  const primitives = {};



  async function createLiveImage(elem, info, name) {
",1114
3714df0b234c3b509a0e169b0621045eda4af5cf,"async function addGeometry(root, info) {
  try {
    await addGeometry(root, info);
    threejsLessonUtils.addDiagram(elem, { create: () => root });
  } catch (err) {
    console.error(err);
  }
}","    await addGeometry(root, info);

    threejsLessonUtils.addDiagram(elem, {create: () => root});
",99
429b3d3f6e4aa25b528891bb297c1daac726b1c6,"const writer = this;

async function createGLB(json) {
	try {
		// Merge buffers.
		const blob = new Blob(writer.buffers, { type: 'application/octet-stream' });

		// Declare extensions.
		const extensionsUsedList = Object.keys(writer.extensionsUsed);
		if (extensionsUsedList.length > 0) json.extensionsUsed = extensionsUsedList;

		// Update bytelength of the single buffer.
		if (json.buffers && json.buffers.length > 0) json.buffers[0].byteLength = blob.size;

		if (writer.options.binary === true) {
			const reader = new window.FileReader();
			reader.readAsArrayBuffer(blob);
			reader.onloadend = async function () {
				// Binary chunk.
				const binaryChunk = getPaddedArrayBuffer(reader.result);

				// JSON chunk.
				const jsonChunk = getPaddedArrayBuffer(stringToArrayBuffer(JSON.stringify(json)), 0x20);

				// GLB header.
				const header = new ArrayBuffer(GLB_HEADER_BYTES);
				const headerView = new DataView(header);
				headerView.setUint32(0, GLB_HEADER_MAGIC, true);
				headerView.setUint32(4, GLB_VERSION, true);
				const totalByteLength = GLB_HEADER_BYTES + jsonChunkPrefix.byteLength + jsonChunk.byteLength + binaryChunkPrefix.byteLength + binaryChunk.byteLength;
				headerView.setUint32(8, totalByteLength, true);

				const glbBlob = new Blob([header, jsonChunkPrefix, jsonChunk, binaryChunkPrefix, binaryChunk], { type: 'application/octet-stream' });

				const glbReader = new window.FileReader();
				glbReader.readAsArrayBuffer(glbBlob);
				glbReader.onloadend = async function () {
					onDone(glbReader.result);
				};
			}
		} else {
			if (json.buffers && json.buffers.length > 0) {
				const reader = new window.FileReader();
				reader.readAsDataURL(blob);
				reader.onloadend = async function () {
					const base64data = reader.result;
					json.buffers[0].uri = base64data;
					onDone(json);
				};
			} else {
				onDone(json);
			}
		}
	} catch (error) {
		console.log('Error creating GLB:', error);
	}
}","		await Promise.all( this.pending );

		const writer = this;

		const buffers = writer.buffers;

		const json = writer.json;

		options = writer.options;

		const extensionsUsed = writer.extensionsUsed;

		// Merge buffers.

		const blob = new Blob( buffers, { type: 'application/octet-stream' } );

		// Declare extensions.

		const extensionsUsedList = Object.keys( extensionsUsed );

		if ( extensionsUsedList.length > 0 ) json.extensionsUsed = extensionsUsedList;

		// Update bytelength of the single buffer.

		if ( json.buffers && json.buffers.length > 0 ) json.buffers[ 0 ].byteLength = blob.size;

		if ( options.binary === true ) {

			// https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#glb-file-format-specification

			const reader = new window.FileReader();

			reader.readAsArrayBuffer( blob );

			reader.onloadend = function () {

				// Binary chunk.

				const binaryChunk = getPaddedArrayBuffer( reader.result );

				const binaryChunkPrefix = new DataView( new ArrayBuffer( GLB_CHUNK_PREFIX_BYTES ) );

				binaryChunkPrefix.setUint32( 0, binaryChunk.byteLength, true );

				binaryChunkPrefix.setUint32( 4, GLB_CHUNK_TYPE_BIN, true );



				// JSON chunk.

				const jsonChunk = getPaddedArrayBuffer( stringToArrayBuffer( JSON.stringify( json ) ), 0x20 );

				const jsonChunkPrefix = new DataView( new ArrayBuffer( GLB_CHUNK_PREFIX_BYTES ) );

				jsonChunkPrefix.setUint32( 0, jsonChunk.byteLength, true );

				jsonChunkPrefix.setUint32( 4, GLB_CHUNK_TYPE_JSON, true );



				// GLB header.

				const header = new ArrayBuffer( GLB_HEADER_BYTES );

				const headerView = new DataView( header );

				headerView.setUint32( 0, GLB_HEADER_MAGIC, true );

				headerView.setUint32( 4, GLB_VERSION, true );

				const totalByteLength = GLB_HEADER_BYTES

					+ jsonChunkPrefix.byteLength + jsonChunk.byteLength

					+ binaryChunkPrefix.byteLength + binaryChunk.byteLength;

				headerView.setUint32( 8, totalByteLength, true );



				const glbBlob = new Blob( [

					header,

					jsonChunkPrefix,

					jsonChunk,

					binaryChunkPrefix,

					binaryChunk

				], { type: 'application/octet-stream' } );



				const glbReader = new window.FileReader();

				glbReader.readAsArrayBuffer( glbBlob );

				glbReader.onloadend = function () {



					onDone( glbReader.result );

			};

		} else {

			if ( json.buffers && json.buffers.length > 0 ) {

				const reader = new window.FileReader();

				reader.readAsDataURL( blob );

				reader.onloadend = function () {

					const base64data = reader.result;

					json.buffers[ 0 ].uri = base64data;

					onDone( json );

				};

			} else {

				onDone( json );

		}


",970
9c57b2e117e7e615cf8c9645fad90e4ad8ce6757,"`await Promise.all( this.pending ).then( function () {

	const buffers = writer.buffers;

	const json = writer.json;

	const options = writer.options;

	const extensionsUsed = writer.extensionsUsed; // Merge buffers.

	const blob = new Blob( buffers, {

		type: 'application/octet-stream'

	} ); // Declare extensions.

	const extensionsUsedList = Object.keys( extensionsUsed );

	if ( extensionsUsedList.length > 0 ) json.extensionsUsed = extensionsUsedList; // Update bytelength of the single buffer.

	if ( json.buffers && json.buffers.length > 0 ) json.buffers[ 0 ].byteLength = blob.size;

	if ( options.binary === true ) {

		// https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#glb-file-format-specification

		const reader = new window.FileReader();

		reader.readAsArrayBuffer( blob );

		reader.onloadend = function () {

			// Binary chunk.

			const binaryChunk = getPaddedArrayBuffer( reader.result );

			const binaryChunkPrefix = new DataView( new ArrayBuffer( GLB_CHUNK_PREFIX_BYTES ) );

			binaryChunkPrefix.setUint32( 0, binaryChunk.byteLength, true );

			binaryChunkPrefix.setUint32( 4, GLB_CHUNK_TYPE_BIN, true ); // JSON chunk.

			const jsonChunk = getPaddedArrayBuffer( stringToArrayBuffer( JSON.stringify( json ) ), 0x20 );

			const jsonChunkPrefix = new DataView( new ArrayBuffer( GLB_CHUNK_PREFIX_BYTES ) );

			jsonChunkPrefix.setUint32( 0, jsonChunk.byteLength, true );

			jsonChunkPrefix.setUint32( 4, GLB_CHUNK_TYPE_JSON, true ); // GLB header.

			const header = new ArrayBuffer( GLB_HEADER_BYTES );

			const headerView = new DataView( header );

			headerView.setUint32( 0, GLB_HEADER_MAGIC, true );

			headerView.setUint32( 4, GLB_VERSION, true );

			const totalByteLength = GLB_HEADER_BYTES + jsonChunkPrefix.byteLength + jsonChunk.byteLength + binaryChunkPrefix.byteLength + binaryChunk.byteLength;

			headerView.setUint32( 8, totalByteLength, true );

			const glbBlob = new Blob( [ header, jsonChunkPrefix, jsonChunk, binaryChunkPrefix, binaryChunk ], {

				type: 'application/octet-stream'

			} );

			const glbReader = new window.FileReader();

			glbReader.readAsArrayBuffer( glbBlob );

			glbReader.onloadend = function () {

				onDone( glbReader.result );

			};

	} else {

		if ( json.buffers && json.buffers.length > 0 ) {

			const reader = new window.FileReader();

			reader.readAsDataURL( blob );

			reader.onloadend = function () {

				const base64data = reader.result;

				json.buffers[ 0 ].uri = base64data;

				onDone( json );

			};

		} else {

			onDone( json );

		}

	} );`","			await Promise.all( this.pending );

			const buffers = writer.buffers;

			const json = writer.json;

			options = writer.options;

			const extensionsUsed = writer.extensionsUsed; // Merge buffers.

			const blob = new Blob( buffers, {

				type: 'application/octet-stream'

			} ); // Declare extensions.

			const extensionsUsedList = Object.keys( extensionsUsed );

			if ( extensionsUsedList.length > 0 ) json.extensionsUsed = extensionsUsedList; // Update bytelength of the single buffer.

			if ( json.buffers && json.buffers.length > 0 ) json.buffers[ 0 ].byteLength = blob.size;

			if ( options.binary === true ) {

				// https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#glb-file-format-specification

				const reader = new window.FileReader();

				reader.readAsArrayBuffer( blob );

				reader.onloadend = function () {

					// Binary chunk.

					const binaryChunk = getPaddedArrayBuffer( reader.result );

					const binaryChunkPrefix = new DataView( new ArrayBuffer( GLB_CHUNK_PREFIX_BYTES ) );

					binaryChunkPrefix.setUint32( 0, binaryChunk.byteLength, true );

					binaryChunkPrefix.setUint32( 4, GLB_CHUNK_TYPE_BIN, true ); // JSON chunk.



					const jsonChunk = getPaddedArrayBuffer( stringToArrayBuffer( JSON.stringify( json ) ), 0x20 );

					const jsonChunkPrefix = new DataView( new ArrayBuffer( GLB_CHUNK_PREFIX_BYTES ) );

					jsonChunkPrefix.setUint32( 0, jsonChunk.byteLength, true );

					jsonChunkPrefix.setUint32( 4, GLB_CHUNK_TYPE_JSON, true ); // GLB header.



					const header = new ArrayBuffer( GLB_HEADER_BYTES );

					const headerView = new DataView( header );

					headerView.setUint32( 0, GLB_HEADER_MAGIC, true );

					headerView.setUint32( 4, GLB_VERSION, true );

					const totalByteLength = GLB_HEADER_BYTES + jsonChunkPrefix.byteLength + jsonChunk.byteLength + binaryChunkPrefix.byteLength + binaryChunk.byteLength;

					headerView.setUint32( 8, totalByteLength, true );

					const glbBlob = new Blob( [ header, jsonChunkPrefix, jsonChunk, binaryChunkPrefix, binaryChunk ], {

						type: 'application/octet-stream'

					} );

					const glbReader = new window.FileReader();

					glbReader.readAsArrayBuffer( glbBlob );



					glbReader.onloadend = function () {



						onDone( glbReader.result );

				};

			} else {

				if ( json.buffers && json.buffers.length > 0 ) {

					const reader = new window.FileReader();

					reader.readAsDataURL( blob );

					reader.onloadend = function () {

						const base64data = reader.result;

						json.buffers[ 0 ].uri = base64data;

						onDone( json );

					};

				} else {

					onDone( json );

			}
",139
5fb35c77b98b0c3d438100035a1e8dafeca5eb2a,"async () => {


		const resultBuffer = await resultBuffer.mapAsync( GPUMapMode.READ );


		try{


		const times = new BigUint64Array( resultBuffer.getMappedRange() );


		const duration = Number( times[ 1 ] - times[ 0 ] ) / 1000000;



		this.renderer.info.updateTimestamp( type, duration );


		resultBuffer.unmap();


		}catch(error){


		console.log(""Error in mapAsync"", error);

		}


		}","			await resultBuffer.mapAsync( GPUMapMode.READ );

			const times = new BigUint64Array( resultBuffer.getMappedRange() );

			const duration = Number( times[ 1 ] - times[ 0 ] ) / 1000000;

			this.renderer.info.updateTimestamp( type, duration );

			resultBuffer.unmap();
",124
0a7d33cbfd6c6b913b80d5ddcb15dbb2198606ce,"(async() => {
  try {
    const times = await resultBuffer.mapAsync(GPUMapMode.READ);
    const duration = Number(times[1] - times[0]) / 1000000;
    this.renderer.info.updateTimestamp(type, duration);
    await resultBuffer.unmap();
  } catch (error) {
    console.log('Error:', error);
  }
})();","			await resultBuffer.mapAsync( GPUMapMode.READ );

			const times = new BigUint64Array( resultBuffer.getMappedRange() );

			const duration = Number( times[ 1 ] - times[ 0 ] ) / 1000000;

			this.renderer.info.updateTimestamp( type, duration );

			resultBuffer.unmap();
",174
0a7d33cbfd6c6b913b80d5ddcb15dbb2198606ce,"async function() {
    try {
        resultBuffer.mapAsync(GPUMapMode.READ)
        const times = new BigUint64Array(resultBuffer.getMappedRange())
        const duration = Number(times[1] - times[0]) / 1000000;
        this.renderer.info.updateTimestamp(type, duration);
        resultBuffer.unmap();
    } catch (error) {
        console.log(""Error: "", error)
    }
}","			await resultBuffer.mapAsync( GPUMapMode.READ );

			const times = new BigUint64Array( resultBuffer.getMappedRange() );

			const duration = Number( times[ 1 ] - times[ 0 ] ) / 1000000;

			this.renderer.info.updateTimestamp( type, duration );

			resultBuffer.unmap();
",145
702d47e6b0b1c71ead1111c1d3952fbaf86abf2a,"async function loadNoteToEditor(noteId) {
    try {
      const note = await $.get(baseApiUrl + 'notes/' + noteId);
      globalCurrentNote = note;
      globalCurrentNoteLoadTime = Math.floor(new Date().getTime() / 1000);
      if (newNoteCreated) {
        newNoteCreated = false;
        $(""#note-title"").focus().select();
      }
      handleEncryption(note.detail.encryption > 0, false, async () => {
        $(""#note-detail-wrapper"").show();
        // this may fal if the dialog has not been previously opened
        try {
          $(""#encryption-password-dialog"").dialog('close');
        } catch (e) {}
        $(""#encryption-password"").val("""");
        decryptNoteIfNecessary(note);
        $(""#note-title"").val(note.detail.note_title);
        noteChangeDisabled = true;
        // Clear contents and remove all stored history. This is to prevent undo from going across notes
        $('#note-detail').summernote('reset');
        $('#note-detail').summernote('code', note.detail.note_text);
        document.location.hash = noteId;
        addRecentNote(noteId, note.detail.note_id);
        noteChangeDisabled = false;
        setNoteBackgroundIfEncrypted(note);
      });
    } catch (error) {
      console.log(""Error:"", error);
    }
  }","async function loadNoteToEditor(noteId) {

    const note = await $.get(baseApiUrl + 'notes/' + noteId);

    globalCurrentNote = note;

    globalCurrentNoteLoadTime = Math.floor(new Date().getTime() / 1000);

    if (newNoteCreated) {

        newNoteCreated = false;

        $(""#note-title"").focus().select();

    }

    await handleEncryption(note.detail.encryption > 0, false);

    $(""#note-detail-wrapper"").show();

    // this may fal if the dialog has not been previously opened

    try {

        $(""#encryption-password-dialog"").dialog('close');

    }

    catch(e) {}

    $(""#encryption-password"").val('');

    decryptNoteIfNecessary(note);

    $(""#note-title"").val(note.detail.note_title);

    noteChangeDisabled = true;

    // Clear contents and remove all stored history. This is to prevent undo from going across notes

    $('#note-detail').summernote('reset');

    $('#note-detail').summernote('code', note.detail.note_text);

    document.location.hash = noteId;

    addRecentNote(noteId, note.detail.note_id);

    noteChangeDisabled = false;



    setNoteBackgroundIfEncrypted(note);

async function loadNote(noteId) {

    const note = await $.get(baseApiUrl + 'notes/' + noteId);



    if (note.detail.encryption > 0 && !isEncryptionAvailable()) {

        return;

    }

    decryptNoteIfNecessary(note);

    return note;
",307
4efa00f36bf435f49180a7900a9a00406651a49f,"encryptionPasswordFormEl.submit(async () => {
        try {
            const key = await getDataKey(password);
            dialogEl.dialog(""close"");
            dataKey = key;
            decryptTreeItems();
            if (encryptionDeferred !== null) {
                encryptionDeferred.resolve();
                encryptionDeferred = null;
            }
        } catch (error) {
            console.log(reason);
            error(reason);
        }
        return false;
    });","    async function setupEncryptionSession() {

        const key = await getDataKey(password);

        if (key === false) {

            showError(""Wrong password!"");

            return;

        }

        dialogEl.dialog(""close"");

        dataKey = key;

        decryptTreeItems();

        if (encryptionDeferred !== null) {

            encryptionDeferred.resolve();

            encryptionDeferred = null;

        }

    }
",287
34f1eb930c01b6c34eaa18b0a514bc6da77acbf8,"// Migrate Promise Chains to async/await Syntax
async function getRecentNotes() {
  try {
    const result = await server.get('recent-notes');
    // Logic to handle the resolved value goes here
  } catch (error) {
    // Logic to handle errors goes here
  } finally {
    // Logic to execute regardless of whether the promise was fulfilled or rejected goes here
  }
}","    async function reload() {

        const result = await server.get('recent-notes');



    }
",278
7ea23586fe04814a9780e70dd0b7808e6620d98d,"async function loadNotes(searchText) {
    try {
        const resp = await server.get('notes?search=' + searchText);

        getTree().filterBranches(node => {
            return resp.includes(node.data.note_id);
        });
    } catch (err) {
        console.error(err);
    }
}","            const noteIds = await server.get('notes?search=' + encodeURIComponent(searchText));



            for (const noteId of noteIds) {

                await noteTree.expandToNote(noteId, {noAnimation: true, noEvents: true});

            }



            // Pass a string to perform case insensitive matching

            getTree().filterBranches(node => noteIds.includes(node.data.note_id));
",293
0e9473119ebd0bcfd77eaf78e27ab33827b33586,"async function loadTree() {

    let resp;

    try {
        resp = await server.get('tree');
    } catch (error) {
        console.log(error);
        return;
    }

    startNotePath = resp.start_note_path;

    if (document.location.hash) {
        startNotePath = getNotePathFromAddress();
    }

    try {
        prepareNoteTree(resp.notes);
    } catch (error) {
        console.log(error);
        return;
    }
}","    async function loadTree() {

        const resp = await server.get('tree');

        startNotePath = resp.start_note_path;

        if (document.location.hash) {

            startNotePath = getNotePathFromAddress();

        }

        return prepareNoteTree(resp.notes);
",193
b10b0048f31e7ec5b828aa4c86d070ad8bf08115,"$form.submit(async () => {
  try {
    await server.put('tree/' + branchId + '/set-prefix', { prefix: prefix });
    treeService.setPrefix(branchId, prefix);
  } catch (error) {
    console.log(error);
  }
});","async function savePrefix() {

    await server.put('tree/' + branchId + '/set-prefix', { prefix: prefix });



    await treeService.setPrefix(branchId, prefix);

}



$form.submit(() => {

    savePrefix();
",83
e827ddffb9279a0dcd67d62efd0a38d280cb3e91,"$(document).ready(async () => {
    const result = await server.get('migration');
    const appDbVersion = result.app_dbVersion;
    const dbVersion = result.dbVersion;
    if (appDbVersion === dbVersion) {
      $(""#up-to-date"").show();
    } else {
      $(""#need-to-migrate"").show();
      $(""#app-db-version"").html(appDbVersion);
      $(""#db-version"").html(dbVersion);
    }
  });","$(document).ready(async () => {

    const {appDbVersion, dbVersion} = await server.get('migration');

    console.log(""HI"", {appDbVersion, dbVersion});

    if (appDbVersion === dbVersion) {

        $(""#up-to-date"").show();

    }

    else {

        $(""#need-to-migrate"").show();



        $(""#app-db-version"").html(appDbVersion);

        $(""#db-version"").html(dbVersion);

    }
",105
1fe7c62f5a90e8dbf6e93f268069dbf87fc59d74,"async function setupSyncFromServer() {
    try {
        await $.post('/api/setup/sync-from-server', {});
        window.location.replace(""/"");
    } catch (err) {
        alert(""Error, see dev console for details."");
        console.error(err);
    }
}","            const resp = await $.post('/api/setup/sync-from-server', {



            if (resp.result === 'success') {

                this.step('sync-in-progress');



                checkOutstandingSyncs();



                setInterval(checkOutstandingSyncs, 1000);

            }

            else {

                showAlert('Sync setup failed: ', resp.error);

            }

async function checkOutstandingSyncs() {

    const stats = await $.get('/api/sync/stats');

    const totalOutstandingSyncs = stats.outstandingPushes + stats.outstandingPulls;



    $(""#outstanding-syncs"").html(totalOutstandingSyncs);

}


",492
51175e3676ab98a678e49d9d17c7ab1cf1630bb9,"async function importNote() {
try {
const result = await exportService.importIntoNote(currentNode.data.noteId);
$dialog.modal('hide');
} catch (error) {
console.log(error);
}}","    importIntoNote(currentNode.data.noteId);

function importIntoNote(importNoteId) {

    const formData = new FormData();

    formData.append('upload', $fileUploadInput[0].files[0]);



    // this is done to reset the field otherwise triggering import same file again would not work

    // https://github.com/zadam/trilium/issues/388

    $fileUploadInput.val('');



    $.ajax({

        url: baseApiUrl + 'notes/' + importNoteId + '/import',

        headers: server.getHeaders(),

        data: formData,

        dataType: 'json',

        type: 'POST',

        contentType: false, // NEEDED, DON'T REMOVE THIS

        processData: false, // NEEDED, DON'T REMOVE THIS

    })

        .fail((xhr, status, error) => alert('Import error: ' + xhr.responseText))

        .done(async note => {

            $dialog.modal('hide');



            infoService.showMessage(""Import finished successfully."")



            await treeService.reload();



            if (note) {

                const node = await treeService.activateNote(note.noteId);



                node.setExpanded(true);

            }

        });

}


",993
dad47d115f010cff18239b787e80b76c5fea2b81,"async function showDialog() {
  try {
    const tables = await server.get('sql/schema');
    $tables.empty();
    for (const table of tables) {
      const $tableLink = $('<a href=""javascript:"">').text(table.name);
      const $columns = $(""<table>"");
      for (const column of table.columns) {
        $columns.append($(""<tr>"").append($(""<td>"").text(column.name)).append($(""<td>"").text(column.type)));
      }
      $tableLink.attr(""title"", $columns.html()).tooltip({ html: true }).click(() => codeEditor.setValue(`SELECT * FROM ${table.name} LIMIT 100`));
      $tables.append($tableLink).append(' ');
    }
  } catch (error) {
    console.log(error);
  }
}","async function showDialog() {

    await showTables();


",604
b84542064cd4d0615f298f9f9ef68690c8fe92a6,"async function loadLibrary() {
    await libraryLoader.requireLibrary(libraryLoader.SORTABLE);
    new Sortable(this.$widgetsEnabled[0], {
        group: 'widgets',
        handle: '.handle',
        animation: 150
    });
    new Sortable(this.$widgetsDisabled[0], {
        group: 'widgets',
        handle: '.handle',
        animation: 150
    });
}","        await libraryLoader.requireLibrary(libraryLoader.SORTABLE);



        new Sortable(this.$widgetsEnabled[0], {

            group: 'widgets',

            handle: '.handle',

            animation: 150,

            onSort: evt => this.save()

        });

        new Sortable(this.$widgetsDisabled[0], {

            group: 'widgets',

            handle: '.handle',

            animation: 150,

            onSort: evt => this.save()

        });

    }



    async save() {

        const opts = {};



        this.$widgetsConfiguration.find('.list-group-item').each((i, el) => {

            const widgetName = $(el).find('div[data-widget-name]').attr('data-widget-name');



            opts[widgetName + 'Widget'] = JSON.stringify({

                enabled: $.contains(this.$widgetsEnabled[0], el),

                expanded: $(el).find(""input[type=checkbox]"").is("":checked""),

                position: (i + 1) * 10



        await server.put('options', opts);
",684
465c3b87a76f5396d0e2fd3dc69330b8887be847,"async function onKeyDown(node) {
    switch (event.keyCode) {
        case $.ui.keyCode.LEFT:
            node.navigate($.ui.keyCode.LEFT, true).then(treeService.clearSelectedNodes);
            return false;
        case $.ui.keyCode.RIGHT:
            node.navigate($.ui.keyCode.RIGHT, true).then(treeService.clearSelectedNodes);
            return false;
        case $.ui.keyCode.UP:
            node.navigate($.ui.keyCode.UP, true).then(treeService.clearSelectedNodes);
            return false;
        case $.ui.keyCode.DOWN:
            node.navigate($.ui.keyCode.DOWN, true).then(treeService.clearSelectedNodes);
            return false;
        default:
            return false;
    }
}","    ""SearchInSubtree"": node => {

        searchNoteService.searchInSubtree(node.data.noteId);

    }

};

async function getKeyboardBindings() {

    const bindings = Object.assign({}, fixedKeyBindings);

    for (const actionName in templates) {

        const action = await keyboardActionService.getAction(actionName);

        for (const shortcut of action.effectiveShortcuts || []) {

            bindings[shortcut] = templates[actionName];

        }

    return bindings;

}



export default {

    getKeyboardBindings

};
",525
bcb3a707f403e711c4a1bbe89deba313c34d7ae3,"async function putOptions(opts) {
  try {
    await server.put('options', opts);
    toastService.showPersistent({
      id: ""options-change-saved"",
      title: ""Options status"",
      message: ""Options change have been saved."",
      icon: ""slider"",
      closeAfter: 2000,
    });
  } catch (err) {
    console.error(err);
  }
}","

        await this.updateMultipleOptions(opts);

    }



    async updateMultipleOptions(opts) {

        await server.put('options', opts);



        this.showUpdateNotification();

    }



    showUpdateNotification() {

        toastService.showPersistent({

            id: ""options-change-saved"",

            title: ""Options status"",

            message: ""Options change have been saved."",

            icon: ""slider"",

            closeAfter: 2000



    async updateCheckboxOption(name, $checkbox) {

        const isChecked = $checkbox.prop(""checked"");



        return await this.updateOption(name, isChecked ? 'true' : 'false');

    }



    setCheckboxState($checkbox, optionValue) {

        $checkbox.prop('checked', optionValue === 'true');

    }
",470
8c4dda45eff76887b6690eb3f67dba35456548c4,"import froca from ""../../services/froca.js"";

// FIXME: this widget might not be useful anymore

async function targetNote(noteId) {
  try {
    const note = await froca.getNote(noteId);
    if (!note) {
      console.log(`Note ${noteId} has not been found. This might happen on the first run before the target note is created.`);
      if (!this.retried) {
        this.retried = true;
        setTimeout(() => this.targetNote(noteId), 15000); // should be higher than timeout for checkHiddenSubtree
      }
      return;
    }
    this.icon(note.getIcon());
    this.title(() => {
      const n = froca.getNoteFromCache(noteId);
      // always fresh, always decoded (when protected session is available)
      return n.title;
    });
    this.refreshIcon();
  } catch (error) {
    console.error(error);
  }
}
this.onClick(() => appContext.tabManager.openTabWithNoteWithHoisting(noteId, true));
return this;","import linkContextMenuService from ""../../menus/link_context_menu.js"";

import utils from ""../../services/utils.js"";

    constructor(noteToOpen) {

        super();

        this.noteToOpen = noteToOpen;

        this.title(() => this.noteToOpen.title)

            .icon(() => this.noteToOpen.getIcon())

            .onClick((widget, evt) => this.launch(evt))

            .onAuxClick((widget, evt) => this.launch(evt))

            .onContextMenu(evt => linkContextMenuService.openContextMenu(this.noteToOpen.noteId, null, evt));

    }

    async launch(evt) {

        const ctrlKey = utils.isCtrlKey(evt);

        if ((evt.which === 1 && ctrlKey) || evt.which === 2) {

            await appContext.tabManager.openInNewTab(this.noteToOpen.noteId);

        } else {

            await appContext.tabManager.openInSameTab(this.noteToOpen.noteId);

        }
",695
96a868a4de206af9466cbea9ab84300f47842f89,"var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator[""throw""](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
return function (html) {
  return __awaiter(this, void 0, void 0, function* () {
    const manifestJson = dist_1.parseManifestJsonOnce(process.env.UNI_INPUT_DIR);
    const title = ((_a = manifestJson.h5) === null || _a === void 0 ? void 0 : _a.title) || manifestJson.name || """";
    return html.replace(/<title>(.*?)<\/title>/, `<title>${title}</title>`);
  });
};","    return async function (html) {

        const manifestJson = dist_1.parseManifestJsonOnce(process.env.UNI_INPUT_DIR);

        const title = ((_a = manifestJson.h5) === null || _a === void 0 ? void 0 : _a.title) || manifestJson.name || '';

        return html.replace(/<title>(.*?)<\/title>/, `<title>${title}</title>`);
",696
7a479da856f34e7e247c9761dd67e195034c2df2,"async function _0(_0, _1) {
  const data = await navigator.clipboard.readText();
}

async function _1(_0, _1) {
  await navigator.clipboard.writeText(data);
}","  async (_, { resolve, reject }) => {

      const data = await navigator.clipboard.readText();

  }

  async ({ data }, { resolve, reject }) => {

      await navigator.clipboard.writeText(data);

  },
",75
39ac9b887e0fbf98b0c53d1c37b75383d6458ecf,"exports.mssqlQuery = async (connectionString, query) => {
    try {
      const pool = await mssql.connect(connectionString);
      const result = await pool.request().query(query);
      return result;
    } catch (err) {
      throw err;
    } finally {
      mssql.close();
    }
  };","exports.mssqlQuery = async function (connectionString, query) {

    let pool;

    try {

        pool = new mssql.ConnectionPool(connectionString);

        await pool.connect();

        await pool.request().query(query);

        pool.close();

    } catch (e) {

        if (pool) {

            pool.close();

        }

        throw e;

    }
",144
9fc43f8fa51f5a5d1c36d07ea34db0f042264316,"const { warn, error } = require('./util/log')

async function main() {

  const projectName = program.args[0]

  if (!projectName) {

    warn(`\n  Please provide an app name.`)

    program.outputHelp()

    process.exit(1)

  }

  const builtInGenerators = fs

    .readdirSync(path.resolve(__dirname, './generators'))

    .filter(dir => dir.charAt(0) !== '.')

    .map(id => createGenerator(id, `./generators/${id}`))

  debug(builtInGenerators)

  const installedGenerators = resolveInstalledGenerators().map(id => {

    return createGenerator(id)

  })

  const targetDir = path.resolve(process.cwd(), projectName)

  const creator = new Creator(projectName, builtInGenerators.concat(installedGenerators))

  try {

    await creator.create(targetDir)

    // TODO: log instructions

  } catch (error) {

    error(`Error occurred while creating the project`, error)

  }
}","const chalk = require('chalk')

const rimraf = require('rimraf')

const inquirer = require('inquirer')

const { warn, error } = require('@vue/cli-shared-utils')

async function run () {

  program

    .usage('<app-name>')

    .parse(process.argv)



  const projectName = program.args[0]

  if (!projectName) {

    warn(`\n  Please provide an app name.`)

    program.outputHelp()

    process.exit(1)

  }



  const targetDir = path.resolve(process.cwd(), projectName)

  if (fs.existsSync(targetDir)) {

    const { overwrite } = await inquirer.prompt([

      {

        name: 'overwrite',

        type: 'confirm',

        message: `Target directory ${chalk.cyan(targetDir)} already exists.\n  Overwrite?`

      }

    ])

    if (overwrite) {

      rimraf.sync(targetDir)

    } else {

      return

    }

  }



  const createGenerator = (id, requirePath = id) => ({

    id,

    apply: require(requirePath)

  })

  const builtInGenerators = fs

    .readdirSync(path.resolve(__dirname, './generators'))

    .filter(dir => dir.charAt(0) !== '.')

    .map(id => createGenerator(id, `./generators/${id}`))

  debug(builtInGenerators)

  const installedGenerators = resolveInstalledGenerators().map(id => {

    return createGenerator(id)

  })

  const creator = new Creator(projectName, builtInGenerators.concat(installedGenerators))

  await creator.create(targetDir)

}

run().catch(error)
",888
69ebd800a2cd0726aa4bbeb1bdb3ade3bc0c0c4f,"const chalk = require('chalk');

async function run(command, args, rawArgs) {
  removeArg(rawArgs, 'url');
  removeArg(rawArgs, 'mode');
  let serverPromise;
  if (args.url) {
    serverPromise = Promise.resolve({ url: args.url });
  } else {
    serverPromise = api.service.run('serve');
  }
  const { info } = require('@vue/cli-shared-utils');
  try {
    const { url, server } = await serverPromise;
    info(`Starting e2e tests...`);
    const cyArgs = [
      command, // open or run
      '--config', `baseUrl=${url}`,
      ...rawArgs
    ];
    const execa = require('execa');
    const cypressBinPath = require.resolve('cypress/bin/cypress');
    const runner = execa(cypressBinPath, cyArgs, { stdio: 'inherit' });
    if (server) {
      runner.on('exit', () => server.close());
      runner.on('error', () => server.close());
    }
    if (process.env.VUE_CLI_TEST) {
      runner.on('exit', code => {
        process.exit(code);
      });
    }
    return runner;
  } catch (err) {
    console.error(`Error: ${err}`);
  }
}

const commandOptions = {
  '--mode': 'specify the mode the dev server should run in. (default: production)',
  '--url': 'run e2e tests against given url instead of auto-starting dev server'
};

api.registerCommand('e2e', {
  description: 'run e2e tests headlessly with `cypress run`',
  usage: 'vue-cli-service e2e [options]',
  options: Object.assign({
    '-s, --spec': 'runs a specific spec file. defaults to ""all""'
  }, commandOptions),
}, async (args, rawArgs) => {
  return await run('run', args, rawArgs);
});

api.registerCommand('e2e:open', {
  description: 'run e2e tests in interactive mode with `cypress open`',
  usage: 'vue-cli-service e2e:open [options]',
  options: commandOptions,
  details:
    `All Cypress CLI options are supported:\n` +
    chalk.yellow(`https://docs.cypress.io/guides/guides/command-line.html#cypress-open`)
}, async (args, rawArgs) => {
  return await run('open', args, rawArgs);
});","  api.registerCommand('test:e2e', {

    description: 'run e2e tests with Cypress',

    usage: 'vue-cli-service test:e2e [options]',

    options: {

      '--headless': 'run in headless mode without GUI',

      '--mode': 'specify the mode the dev server should run in. (default: production)',

      '--url': 'run e2e tests against given url instead of auto-starting dev server',

      '-s, --spec': '(headless only) runs a specific spec file. defaults to ""all""'

    },

  }, async (args, rawArgs) => {

    removeArg(rawArgs, 'headless')

    removeArg(rawArgs, 'mode')

    removeArg(rawArgs, 'url')

    const { info } = require('@vue/cli-shared-utils')

    info(`Starting e2e tests...`)



    const { url, server } = args.url

      ? { url: args.url }

      : await api.service.run('serve')



    const cyArgs = [

      args.headless ? 'run' : 'open', // open or run

      '--config', `baseUrl=${url}`,

      ...rawArgs

    ]



    const execa = require('execa')

    const cypressBinPath = require.resolve('cypress/bin/cypress')

    const runner = execa(cypressBinPath, cyArgs, { stdio: 'inherit' })

    if (server) {

      runner.on('exit', () => server.close())

      runner.on('error', () => server.close())

    }



    if (process.env.VUE_CLI_TEST) {

      runner.on('exit', code => {

        process.exit(code)

      })

    }



    return runner

  })

  'test:e2e': 'production'
",1498
d2d2f7f346cd0a4faf24f754817e07163365b6e5,"async function list(base, context) {
    try {
        const files = await fs.readdir(base, 'utf8');
        return files.map((file) => ({ path: path.join(base, file), name: file }))
            .filter((file) => fs.statSync(file.path).isDirectory());
    } catch (err) {
        throw err;
    }
}","async function list (base, context) {

  const files = await fs.readdir(base, 'utf8')

  return files.map(

    file => ({

      path: path.join(base, file),

      name: file

  ).filter(

    file => fs.statSync(file.path).isDirectory()

  )
",109
d2d2f7f346cd0a4faf24f754817e07163365b6e5,"async function deleteFolder (file) {

  try {

    await rimraf(file);

  } catch (err) {

    throw err;

  }

}","async function deleteFolder (file) {

  await fs.remove(file)
",61
